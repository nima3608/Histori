From 17b186627c9c48228ca84a6b601d12937b26a932 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 19 Sep 2017 07:48:10 +0000
Subject: [PATCH 0804/1000] MANTIS 47240 Mantis 47240: Config service meta data
 access - Implement Number servant extension

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1261 90b65887-3827-0410-9a23-83215b262276
---
 .../cpp/CfgXMgrB/inc/cfgCorba_Number2.hpp     |  93 ++++
 .../CfgXMgrB/inc/cfgCorba_ServiceNumber.hpp   | 119 +++++
 .../cpp/CfgXMgrB/src/cfgCorba_Number2.cpp     | 426 ++++++++++++++++++
 3 files changed, 638 insertions(+)
 create mode 100644 SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/cfgCorba_Number2.hpp
 create mode 100644 SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/cfgCorba_ServiceNumber.hpp
 create mode 100644 SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgCorba_Number2.cpp

diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/cfgCorba_Number2.hpp b/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/cfgCorba_Number2.hpp
new file mode 100644
index 00000000..2870b1b2
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/cfgCorba_Number2.hpp
@@ -0,0 +1,93 @@
+/**
+ **************************************************************************
+ *
+ * @file cfgCorba_Number2.hpp
+ *
+ * Contains declaration of class cfgCorba_Number2.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2017 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+#ifndef CFGCORBA_NUMBER2_HPP
+#define CFGCORBA_NUMBER2_HPP
+#ifdef SHOW_INCLUDE_FILES
+
+#pragma message("including: " __FILE__)
+
+#endif
+
+
+#include "cfgEntity.hpp"
+
+
+
+/**
+ *
+ * Handle class.
+ *
+**/
+class cfgCorba_Number2_Private;
+
+
+
+/**
+ *
+ * An object of this class provides a CORBA-based access to configuration
+ * items of "text" type.
+ *
+**/
+class cfgCorba_Number2
+{
+
+   /**
+    *
+    * Implementation handle.
+    *
+   **/
+   cfgCorba_Number2_Private * Handle;
+
+public:
+
+   /**
+    *
+    * Constructor.
+    *
+    * @param Entity:    Configuration data reference.
+    *
+   **/
+   explicit cfgCorba_Number2( cfgEntity & Entity );
+
+   /**
+    *
+    * Destructor
+    *
+   **/
+   ~cfgCorba_Number2();
+
+private:
+
+   //! Default constructor - Intentionally not implemented.
+   cfgCorba_Number2();
+
+   //! Copy constructor - Intentionally not implemented.
+   cfgCorba_Number2( cfgCorba_Number2 const & );
+
+   //! Assignment - Intentionally not implemented.
+   cfgCorba_Number2 & operator=( cfgCorba_Number2 const & );
+
+
+};
+
+
+
+#endif
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/cfgCorba_ServiceNumber.hpp b/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/cfgCorba_ServiceNumber.hpp
new file mode 100644
index 00000000..82d40497
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/cfgCorba_ServiceNumber.hpp
@@ -0,0 +1,119 @@
+/**
+ **************************************************************************
+ *
+ * @file cfgCorba_ServiceNumber.hpp
+ *
+ * Contains declaration of class cfgCorba_ServiceNumber.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2017 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+#ifndef CFGCORBA_SERVICENUMBER
+#define CFGCORBA_SERVICENUMBER
+#ifdef SHOW_INCLUDE_FILES
+#pragma message("including: " __FILE__)
+#endif
+
+
+#include "cfgCorba_Node.hpp"
+
+
+class cfgCorba_ServiceNumber :
+   virtual public serviceCfg_Node,
+   virtual public POA_Config::Number
+{
+
+   cfgEntity * M_ConfigEntity;
+
+   /**
+    *
+    * Create a configuration item
+    *
+   **/
+   void create
+        (
+           Config::access const &            Acc,
+           Config::description const &       Desc,
+           CORBA::Long                       Def,
+           CORBA::Long                       Min,
+           CORBA::Long                       Max
+        );
+
+   /**
+    *
+    * Get a configuration value
+    *
+   **/
+   CORBA::Long get( Config::access const & Acc );
+
+   /**
+    *
+    * Increment and get the incremented configuration value
+    *
+   **/
+   CORBA::Long incrementGet( Config::access const & Acc, CORBA::Long Inc );
+
+   /**
+    *
+    * Set a configuration value
+    *
+   **/
+   void set( Config::access const & Acc, CORBA::Long Val );
+
+   /**
+    *
+    * Set an initial configuration value
+    *
+   **/
+   void setInitial( Config::access const & Acc, CORBA::Long Val );
+
+   /**
+    *
+    * Set new meta-data for an existing configuration item.
+    *
+   **/
+   void setMeta
+        (
+           Config::access const &            Acc,
+           Config::description const &       Desc,
+           CORBA::Long                       Min,
+           CORBA::Long                       Max
+        );
+
+public:
+
+   /**
+    *
+    * Constructor.
+    *
+    * @param Configuration:             Refers the configuration back-end.
+    *
+   **/
+   explicit cfgCorba_ServiceNumber( cfgEntity & Configuration );
+
+   /**
+    *
+    * Destructor.
+    *
+   **/
+   ~cfgCorba_ServiceNumber();
+
+private:
+
+   //! Default constructor - intentionally not implemented.
+   cfgCorba_ServiceNumber();
+
+};
+
+
+#endif
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgCorba_Number2.cpp b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgCorba_Number2.cpp
new file mode 100644
index 00000000..d5bfcf62
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgCorba_Number2.cpp
@@ -0,0 +1,426 @@
+/**
+ **************************************************************************
+ *
+ * @file cfgCorba_Number2.cpp
+ *
+ * Contains method implementation of class cfgCorba_Number2.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2017 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+
+// Exported
+#include "cfgCorba_Number2.hpp"
+
+// Loacal header
+#include "cfgCorba_ServiceNumber.hpp"
+#include "cfgCorba_Template.hpp"
+#include "cfgRightsMan.hpp"
+
+#include "cfgclnt/CfgMgrIPC.h"
+
+#include "massaiCorba/orbIncDefs.h"
+#include "massaiCorba/corbasrvr.h"
+
+#ifdef _TAO_
+#include "Tao/CORBA.h"
+#include "massaiCorba/orbIncDefs.h"
+#include "CfgMgr.h"
+#include "CfgMgr_skel.h"
+#endif
+
+#ifdef _ORBACUS_
+#include <CfgMgr_skel.h>
+#endif
+
+#include "cfgMetaNumber.hpp"
+#include "cfgValueNumber.hpp"
+
+#include "trc/TraceClt.h"
+
+#define SCN2  "cfgCorba_ServiceNumber2::"
+
+
+
+/**
+ **************************************************************************
+ *
+ * Number2 configuration service implementation class
+ *
+ **************************************************************************
+**/
+class cfgCorba_ServiceNumber2 :
+   virtual public cfgCorba_ServiceNumber,
+   virtual public POA_Config::Number2
+{
+
+   cfgEntity * M_ConfigEntity;
+
+
+   CORBA::Long getWithMeta
+      (
+         Config::access const &         acc,
+         Config::Number2::metaData_out  meta_data_out
+      )
+   {
+      //TODO
+      verifyAccess( SCN2 "getWithMeta", acc );
+      writeTrace
+      (
+         SecondaryRuntime_HERE, SCN2 "getWithMeta(%s) ...",
+         access2Str(acc).c_str()
+      );
+      try
+      {
+         //
+         // Metadata
+         //
+         Config::Number2::metaData * md = new Config::Number2::metaData;
+         cfgMeta const * const meta_data_cfg
+            = M_ConfigEntity->itemGetMeta
+               (
+                  acc.Authorization,
+                  cfgEntity::PURP_DIRGET, //TODO
+                  acc.Item
+               );
+         if( meta_data_cfg )
+         {
+            md->Desc.Explanation
+               = CORBA::string_dup
+                  (
+                     meta_data_cfg->getExplanation().c_str()
+                  );
+            std::string rights_cfg;
+            meta_data_cfg->getRights( acc.Authorization, rights_cfg );
+            md->Desc.Rights
+               = CORBA::string_dup( rights_cfg.c_str() );
+            //
+            try
+            {
+               cfgMetaNumber const * const meta_number_cfg =
+                  dynamic_cast<cfgMetaNumber const *>( meta_data_cfg );
+               if( meta_number_cfg )
+               {
+                  md->MinValue = meta_number_cfg->getMinValue();
+                  md->MaxValue = meta_number_cfg->getMaxValue();
+               }
+               else
+               {
+                  writeTrace
+                  (
+                     SecondaryRuntime_HERE,
+                     SCN2 "getWithMeta - NULL."
+                  );
+               }
+            }
+            catch( ... )
+            {
+               writeTrace
+               (
+                  SecondaryRuntime_HERE,
+                  SCN2 "getWithMeta - exception."
+               );
+            }
+         }
+         else
+         {
+            // No meta data available, probably just initialized.
+            // Fake an explanation.
+            md->Desc.Explanation
+                     = CORBA::string_dup
+                        (
+                           "ENTRY NOT YET CREATED!"
+                        );
+            // Fake the access rights
+            md->Desc.Rights
+                     = CORBA::string_dup
+                       (
+                          "rl"
+                       );
+            md->MinValue = 0;
+            md->MaxValue = 0;
+         }
+         meta_data_out = md;
+         //
+         // Value
+         //
+         Materna::MSSD::autoMutex valmux( M_ConfigEntity->valueMutex() );
+         cfgValueNumber const * const valref =
+            dynamic_cast<cfgValueNumber const *>
+            (
+               M_ConfigEntity->itemGetValue( acc.Authorization, acc.Item )
+            );
+         if( valref )
+         {
+            CORBA::Long const Val = valref->scalar();
+            writeTrace
+            (
+               SecondaryRuntime_HERE, SCN2 "getWithMeta = %d.",
+               Val
+            );
+            return Val;
+         }
+         else
+         {
+            throw Config::Node::notFound();
+         }
+      }
+      catch( cfgEntity_NotAuthorized & )
+      {
+         writeTrace
+         (
+            SecondaryRuntime_HERE,
+            SCN2 "getWithMeta - notAuthorized exception."
+         );
+         throw Config::Node::notAuthorized();
+      }
+      catch( cfgEntity_NotFound & )
+      {
+         writeTrace
+         (
+            SecondaryRuntime_HERE,
+            SCN2 "getWithMeta - notFound exception."
+         );
+         throw Config::Node::notFound();
+      }
+      catch( Config::Node::notFound & )
+      {
+         writeTrace
+         (
+            SecondaryRuntime_HERE,
+            SCN2 "getWithMeta - notFound exception (root)."
+         );
+         throw;
+      }
+      catch( ... )
+      {
+         writeTrace
+         (
+            SecondaryRuntime_HERE,
+            SCN2 "getWithMeta - noConfiguration exception."
+         );
+         throw Config::Node::noConfiguration();
+      }
+   }
+
+
+   /**
+    *
+    * Set new meta-data for an existing configuration item.
+    *
+   **/
+   void setMeta2
+         (
+            Config::access const &              acc,
+            Config::Number2::metaData const &     meta_data
+        )
+   {
+      writeTrace
+      (
+         BasicRuntime_HERE,
+         SCN2 "setMeta2(%s) Rights:\"%s\" Expl:\"%s\""
+         " MaxValue:%d MinValue:%d",
+         access2Str(acc).c_str(),
+         meta_data.Desc.Rights,
+         meta_data.Desc.Explanation,
+         meta_data.MaxValue,
+         meta_data.MinValue
+      );
+      try
+      {
+         std::string const rights( meta_data.Desc.Rights );
+         std::string const explanation( meta_data.Desc.Explanation );
+         cfgMetaNumber cfg_meta_number
+                     (
+                        rights,
+                        explanation,
+                        static_cast<unsigned>( meta_data.MaxValue ),
+                        static_cast<unsigned>( meta_data.MinValue )
+                     );
+         M_ConfigEntity->itemSetMeta
+         (
+            cfg_meta_number, acc.Item
+         );
+      }
+      catch( cfgEntity_NotAuthorized & )
+      {
+         writeTrace
+         (
+            SecondaryRuntime_HERE,
+            SCN2 "setMeta2 - notAuthorized exception."
+         );
+         throw Config::Node::notAuthorized();
+      }
+      catch( cfgEntity_NotFound & )
+      {
+         writeTrace
+         (
+            SecondaryRuntime_HERE,
+            SCN2 "setMeta2 - notFound exception."
+         );
+         throw Config::Node::notFound();
+      }
+      catch( cfgEntity_WrongParameter & )
+      {
+         writeTrace
+         (
+            SecondaryRuntime_HERE,
+            SCN2 "setMeta2 - wrongParam exception."
+         );
+         throw Config::Node::wrongParam();
+      }
+      catch( ... )
+      {
+         writeTrace
+         (
+            SecondaryRuntime_HERE,
+            SCN2 "setMeta2 - noConfiguration exception."
+         );
+         throw Config::Node::noConfiguration();
+      }
+      writeTrace
+      (
+         BasicRuntime_HERE,
+         SCN2 "setMeta2(%s).",
+         access2Str(acc).c_str()
+      );
+   } // void setMeta2()
+
+public:
+
+   /**
+    *
+    * Constructor.
+    *
+    * @param Configuration:             Refers the configuration back-end.
+    *
+   **/
+   explicit cfgCorba_ServiceNumber2( cfgEntity & Configuration ) :
+      serviceCfg_Node( Configuration ),
+      cfgCorba_ServiceNumber( Configuration ),
+      POA_Config::Number2(),
+      M_ConfigEntity( &Configuration )
+   {
+   }
+
+   /**
+    *
+    * Destructor.
+    *
+   **/
+   ~cfgCorba_ServiceNumber2()
+   {
+      M_ConfigEntity = 0;
+   }
+
+private:
+
+   //! Default constructor - intentionally not implemented.
+   cfgCorba_ServiceNumber2();
+
+};
+
+
+
+class cfgCorba_Number2_Private
+{
+   cfgCorba_ServiceNumber2 *                             pLC_Number;
+   corbaServantEx<cfgCorba_ServiceNumber2> *             pLD_Number;
+
+public:
+
+   /**
+    *
+    * Constructor
+    *
+   **/
+   cfgCorba_Number2_Private();
+
+   /**
+    *
+    * Constructor
+    *
+   **/
+   explicit cfgCorba_Number2_Private( cfgEntity & Configuration ) :
+      pLC_Number( 0 ),
+      pLD_Number( 0 )
+   {
+
+      pLC_Number = new cfgCorba_ServiceNumber2( Configuration );
+      pLD_Number = new_Servant<cfgCorba_ServiceNumber2>
+                     (
+                        *pLC_Number,
+                        CFGMGR_SRVNAME_NUMBER2
+                     );
+   }
+
+   /**
+    *
+    * Destructor
+    *
+   **/
+   ~cfgCorba_Number2_Private()
+   {
+      try
+      {
+         delete pLD_Number;
+         delete pLC_Number;
+      }
+      catch( ... )
+      {
+      }
+   }
+
+private:
+
+   //! Copy constructor - Intentionally not implemented.
+   cfgCorba_Number2_Private( cfgCorba_Number2_Private const & );
+
+   //! Assignment - Intentionally not implemented.
+   cfgCorba_Number2_Private & operator=
+      (
+         cfgCorba_Number2_Private const &
+      );
+
+};
+
+
+
+cfgCorba_Number2::cfgCorba_Number2( cfgEntity & Configuration ) :
+   Handle( new cfgCorba_Number2_Private( Configuration ) )
+{
+   writeTrace
+      (
+         SecondaryRuntime_HERE, "cfgCorba_Number2::cfgCorba_Number2"
+      );
+}
+
+
+
+cfgCorba_Number2::~cfgCorba_Number2()
+{
+   try
+   {
+      writeTrace
+         (
+            SecondaryRuntime_HERE, "cfgCorba_Number2::~cfgCorba_Number2"
+         );
+      delete Handle;
+   }
+   catch( ... )
+   {
+   }
+}
+
+
+
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
-- 
2.41.0.windows.1

