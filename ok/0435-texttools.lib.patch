From 0c103f6b08e01d7d49e24dc8794b5f647f749105 Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 9 Jul 2013 16:59:18 +0000
Subject: [PATCH 0435/1077] texttools.lib V1.0.0.4 Mantis 0027919: appControl:
 desktop can not be closed; ctfmon.exe must be terminated; remove default:
 TerminationExclusion=ctfmon.exe from PLATFORM.ENVIRONMENT.Variables

git-svn-id: svn://localhost/SelfServiceCommon/trunk@530 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/Text/src/local_def.cpp         |  7 ++++-
 .../Massai/cpp/Text/src/readEnv.cpp           | 28 +++++++------------
 2 files changed, 16 insertions(+), 19 deletions(-)

diff --git a/SelfServiceCommon/Massai/cpp/Text/src/local_def.cpp b/SelfServiceCommon/Massai/cpp/Text/src/local_def.cpp
index a9840db7..de743cfd 100644
--- a/SelfServiceCommon/Massai/cpp/Text/src/local_def.cpp
+++ b/SelfServiceCommon/Massai/cpp/Text/src/local_def.cpp
@@ -1,9 +1,14 @@
 #include "Tools/VERSIONLIB.h"
 
-VERSION_ID_DT(text, 1, 0, 0, 3);
+VERSION_ID_DT(text, 1, 0, 0, 4);
 
 /*! \page texttools.lib; text tools library - Release Notes
 
+\date 09.07.2013
+\li V1.0.0.4
+\li Mantis 0027919: appControl: desktop can not be closed; ctfmon.exe must be terminated;
+  remove default: TerminationExclusion=ctfmon.exe from PLATFORM.ENVIRONMENT.Variables
+
 \date 27.06.2013
 \li V1.0.0.3
 \li SteT Mantis 0027839: mstarter: substition for "$"
diff --git a/SelfServiceCommon/Massai/cpp/Text/src/readEnv.cpp b/SelfServiceCommon/Massai/cpp/Text/src/readEnv.cpp
index 89f5eb3e..4b9e4794 100644
--- a/SelfServiceCommon/Massai/cpp/Text/src/readEnv.cpp
+++ b/SelfServiceCommon/Massai/cpp/Text/src/readEnv.cpp
@@ -55,7 +55,6 @@ namespace
     std::list<std::string>& defaultValue)
   {
     explanation = "substitution variables; format variablename=value";
-    defaultValue.push_back("TerminationExclusion=ctfmon.exe");
   }
 
   ReadConfig::ReadConfig(const std::string& authentification, TraceInterface& trc):
@@ -124,31 +123,24 @@ namespace
 
   void add(Environment& env, const std::string& variable, TraceInterface& trc, const char* what)
   {
-    size_t delimiter = variable.find('=');
-    if(delimiter != std::string::npos)
+    if(variable.size() == 0)
     {
-      std::string key = std::string(variable, 0, delimiter);
-      std::string value = std::string(variable, delimiter + 1);
-      if(key.size() > 0)
-      {
-        env[key] = value;
-        trc.writeTrace(SecondaryRuntime_HERE, "(%s): (%.100s)->(%.1000s)", what, key.c_str(), value.c_str());
-      }
-      else
-      {
-        trc.writeTrace(MajorWarning_HERE, "(%s): ignore(%s)", what, variable.c_str());
-      }
+      trc.writeTrace(MajorWarning_HERE, "(%s): ignore()", what);
     }
     else
     {
-      env[variable] = "";
-      if(variable.size() > 0)
+      size_t delimiter = variable.find('=', 1);
+      if(delimiter != std::string::npos)
       {
-        trc.writeTrace(SecondaryRuntime_HERE, "(%s): (%.100s)->()", what, variable.c_str());
+        std::string key = std::string(variable, 0, delimiter);
+        std::string value = std::string(variable, delimiter + 1);
+        env[key] = value;
+        trc.writeTrace(SecondaryRuntime_HERE, "(%s): (%.100s)->(%.1000s)", what, key.c_str(), value.c_str());
       }
       else
       {
-        trc.writeTrace(MajorWarning_HERE, "(%s): ignore(%s)", what, variable.c_str());
+        env[variable] = "";
+        trc.writeTrace(SecondaryRuntime_HERE, "(%s): (%.100s)->()", what, variable.c_str());
       }
     }
   }
-- 
2.41.0.windows.1

