From 8c945d8ed0e3275fd7378d7b603503d3a1f418a9 Mon Sep 17 00:00:00 2001
From: tgeisler <tgeisler@90b65887-3827-0410-9a23-83215b262276>
Date: Thu, 28 Apr 2011 16:13:13 +0000
Subject: [PATCH 0107/1076] Mantis0018811: mcontrol should wait a given time
 till startup Mantis0018904: mcontrol hung if corba servant is created too
 early Mantis0013984: Update-Service should show a message when update is
 carried out Mantis0014040: Update-Service should show a message when update
 is carried out

git-svn-id: svn://localhost/SelfServiceCommon/trunk@136 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/Controller/inc/mcontrol_def.h  |  20 +-
 .../Massai/cpp/Controller/inc/serverwin.h     |   2 +
 .../cpp/Controller/res/mcontrol_small_ds.bmp  | Bin 0 -> 111670 bytes
 .../cpp/Controller/res/mcontrol_small_su.bmp  | Bin 0 -> 111670 bytes
 .../Massai/cpp/Controller/src/main.cpp        |  54 +++-
 .../Massai/cpp/Controller/src/serverwin.cpp   | 258 +++++++++++++++---
 6 files changed, 276 insertions(+), 58 deletions(-)
 create mode 100644 SelfServiceCommon/Massai/cpp/Controller/res/mcontrol_small_ds.bmp
 create mode 100644 SelfServiceCommon/Massai/cpp/Controller/res/mcontrol_small_su.bmp

diff --git a/SelfServiceCommon/Massai/cpp/Controller/inc/mcontrol_def.h b/SelfServiceCommon/Massai/cpp/Controller/inc/mcontrol_def.h
index 2bdbf776..a2b22d2b 100644
--- a/SelfServiceCommon/Massai/cpp/Controller/inc/mcontrol_def.h
+++ b/SelfServiceCommon/Massai/cpp/Controller/inc/mcontrol_def.h
@@ -12,10 +12,24 @@
 
 /*! \page massaicontroller mControl - Release Notes
  *
- *  @version 1.0.1.2
+ *  @version 1.0.1.3
  *
  *  \section change1 Change history
  *
+ *  \date 28.04.2009 \li V1.0.1.3
+ *                   \li GiT: Mantis0013984,Mantis0014040: Update-Service should show a message when update is carried out
+ *                   \li      - mcontrol_small_su.bmp is shown, has to be placed in the working folder of mcontrol.exe
+ *                   \li GiT: Mantis0018904: mcontrol hung if corba servant is created too early
+ *                   \li GiT: Mantis0018811: mcontrol should wait a given time till startup
+ *                   \li      - new parameter: delaybeforestart:seconds
+ *                   \li      - mcontrol_small_ds.bmp is shown, has to be placed in the working folder of mcontrol.exe
+ *                   \li QA-Tests: Check window shown while start is delayed
+ *                   \li QA-Tests: Check window shown while update is carried out
+ *                   \li QA-Tests: Check all windows shown in server and kiosk mode
+ *                   \li QA-Tests: Check if platform startup with high kiosk load
+ *                   \li QA-Tests: Check if several times start/stop of platform is reliable
+ *
+ *
  *  \date 07.12.2009 \li V1.0.1.2
  *                   \li JK: Mantis0006878: mcontrol stürzt ab
  *                   \li - More traces to improve debugging.
@@ -128,8 +142,8 @@
 #define IDI_ICON1 101
 #define IDI_ICON2 102
 
-#define FILE_VER_BIN     1,0,1,2
-#define FILE_VER_STR     "FileVersion", "1.0.1.2\0"
+#define FILE_VER_BIN     1,0,1,3
+#define FILE_VER_STR     "FileVersion", "1.0.1.3\0"
 
 #define FILEDESCRIPTION  "FileDescription"  ,"mcontrol\0"
 #define INTERNALNAME     "InternalName"     ,"mcontrol\0"
diff --git a/SelfServiceCommon/Massai/cpp/Controller/inc/serverwin.h b/SelfServiceCommon/Massai/cpp/Controller/inc/serverwin.h
index 23bda32e..9f94155e 100644
--- a/SelfServiceCommon/Massai/cpp/Controller/inc/serverwin.h
+++ b/SelfServiceCommon/Massai/cpp/Controller/inc/serverwin.h
@@ -32,6 +32,8 @@ void prot(char *pszFormat, ...);
 
 #define WM_TEST                   (WM_USER + 8)
 
+#define WM_START_DELAY_TIMER      (WM_USER + 101)
+
 // imports ------------------------------------------------------------------
 
 HINSTANCE getInstance();    // from main.cpp
diff --git a/SelfServiceCommon/Massai/cpp/Controller/res/mcontrol_small_ds.bmp b/SelfServiceCommon/Massai/cpp/Controller/res/mcontrol_small_ds.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..a1e4425216ad107a50ded28005e483b6e2a35f38
GIT binary patch
literal 111670
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
K1R$_C1pW^)PZw4I

literal 0
HcmV?d00001

diff --git a/SelfServiceCommon/Massai/cpp/Controller/res/mcontrol_small_su.bmp b/SelfServiceCommon/Massai/cpp/Controller/res/mcontrol_small_su.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..8052d5612e3cdf09cc7a45f5577be8cdbfeeb4e4
GIT binary patch
literal 111670
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
ZJ*oKvv^iOB+(+z5XP_7mfWW~J_#e?c|C9g#

literal 0
HcmV?d00001

diff --git a/SelfServiceCommon/Massai/cpp/Controller/src/main.cpp b/SelfServiceCommon/Massai/cpp/Controller/src/main.cpp
index 73bbeacf..8b520833 100644
--- a/SelfServiceCommon/Massai/cpp/Controller/src/main.cpp
+++ b/SelfServiceCommon/Massai/cpp/Controller/src/main.cpp
@@ -44,6 +44,7 @@ static bool      fNoSNMP     = false;
 static HINSTANCE hInstance;
 static HWND      hwnd= 0;
 
+extern long setLevel(long level);
 //---------------------------------------------------------------------------
 //
 //  function:   void exitHandler(int iSignal)
@@ -162,7 +163,7 @@ bool noSNMP()
 int WINAPI myWinMain( HINSTANCE hInst, char const * CmdLine )
 {
 MSG          msg ;
-WNDCLASS     wndclass ;
+WNDCLASS     wndclass;
 
 char         szService[256];
 char        *pStr;
@@ -171,8 +172,12 @@ int          x,cx,
 long         i;
 long         rc;
 long         lWait = 60000;
+long         lDelay = -1;
 FILE        *fp;
 
+//setLevel(9);
+
+
     HANDLE isRunning;
 
     // needed! otherwise a ctrl-break leeds to exit(0)!!!
@@ -226,6 +231,22 @@ FILE        *fp;
       fflush(fp);
     }
 
+    if((pStr = strstr(szCmdLine,"-delaybeforestart:")) != NULL)
+    {
+       pStr += 18;
+
+       lDelay = atoi(pStr);
+
+       if(!lDelay)
+         lDelay = -1;
+
+       if(fp)
+       {
+         fprintf(fp,"%s found option [delaybeforestart:], delay = %d\n",timeStamp(),lDelay);
+         fflush(fp);
+       }
+    }
+
     if((pStr = strstr(szCmdLine,"-wait:")) != NULL)
     {
        pStr += 6;
@@ -410,9 +431,12 @@ FILE        *fp;
           TRACE(HERE,"failed to get ABLS-IP-Address");
       }
 
+      DWORD myStyle = WS_POPUP;
+      if(!serverMode())
+        myStyle |= WS_EX_TOPMOST;
       hwnd = CreateWindow(szAppName,            // window class name
                           szAppName,            // window caption
-                          WS_POPUP,             // window style
+                          myStyle,              // window style
                           x,                    // initial x position
                           y,                    // initial y position
                           cx,                   // initial x size
@@ -426,11 +450,15 @@ FILE        *fp;
 
       if(mDaemon_isService())
       {
-        PostMessage(hwnd,WM_PAINT,0,0);
+        //PostMessage(hwnd,WM_PAINT,0,0);
+        RedrawWindow(hwnd,NULL,NULL,RDW_INTERNALPAINT);
       }
 
       mDaemon_indReady(0);
 
+      // delay the start of the platform
+      PostMessage(hwnd,WM_START_DELAY_TIMER, lDelay, 0);
+
       // process all remaining window messages
 
       while(PeekMessage(&msg,NULL,0,0,PM_REMOVE))
@@ -440,14 +468,17 @@ FILE        *fp;
 
       controllerServant Ctrl(hwnd);
 
+      checkReboot checker(&Ctrl);
+
+      while(PeekMessage(&msg,NULL,0,0,PM_REMOVE))
+        DispatchMessage(&msg);
+
       // create the servant itself
 
       corbaServantEx <controllerServant> Servant (1,Ctrl, "massaiKioskControl",19998);
 
       // create reboot thread
 
-      checkReboot checker(&Ctrl);
-
       checker.saveRebootDate();
 
       // but start only if not in server mode !!!
@@ -564,12 +595,13 @@ char const * mDaemon_dependencies()
 **/
 char const * mDaemon_help()
 {
-  return "[-wait[:timeout]][-service:servicename][-server][-nolog|-nosnmp]\n"
-         "-wait[:timeout] set timeout in ms for initial waiting for dependencies, default 60000, -wait waits forever\n"
-         "-service:servicename set dependency, default is massaiTrace\n"
-         "-server run in server mode, default is kiosk mode\n"
-         "-nolog event logging disabled\n"
-         "-nosnmp for ebent logging use logservice instead of massaisnmp: do not send start platform event\n";
+  return "[-delaybeforestart:seconds][-wait[:timeout]][-service:servicename][-server][-nolog|-nosnmp]\n"
+         "-delaybeforestart:seconds  set delay in seconds to wait before startup\n"
+         "-wait[:timeout]  set timeout in ms for initial waiting for dependencies, default 60000, -wait waits forever\n"
+         "-service:servicename  set dependency, default is massaiTrace\n"
+         "-server  run in server mode, default is kiosk mode\n"
+         "-nolog  event logging disabled\n"
+         "-nosnmp  for event logging use logservice instead of massaisnmp: do not send start platform event\n";
 }
 
 
diff --git a/SelfServiceCommon/Massai/cpp/Controller/src/serverwin.cpp b/SelfServiceCommon/Massai/cpp/Controller/src/serverwin.cpp
index 3ab2c00f..ba796dcf 100644
--- a/SelfServiceCommon/Massai/cpp/Controller/src/serverwin.cpp
+++ b/SelfServiceCommon/Massai/cpp/Controller/src/serverwin.cpp
@@ -45,6 +45,11 @@
 #define UPDATE_NAME    "mupdate.exe"
 #define REBOOT_KIOSK   123
 
+#define START_DELAY_TIMER      1
+#define OVERLAY_INFO_OFF 0
+#define OVERLAY_INFO_1 1
+#define OVERLAY_INFO_2 2
+
 static HANDLE  hSem     = NULL;
 
 
@@ -125,7 +130,14 @@ private:
 static myProcess * hStarter = NULL;
 
 
-static HWND    hwndLoad = NULL;
+static HWND    hwndFocus;
+static HBITMAP hBitmap;
+static HBITMAP hBitmap_info_1,hBitmap_info_2;
+
+static HWND   hwndLoad = NULL;
+static HWND   hwndInfo1 = NULL;
+static HWND   hwndInfo2 = NULL;
+
 static alert  *pAlert   = NULL;
 
 static long    lAllProcesses,
@@ -166,6 +178,12 @@ static void createAlert()
     pAlert = NULL;
     TRACE(HERE,"(create)alertException: %s",e.toString().c_str());
   }
+  catch( ... )
+  {
+    pAlert = NULL;
+    TRACE(HERE,"(create)alertException (unknown)");
+  }
+
 }
 
 //------------------------------------------------------------------------
@@ -661,10 +679,8 @@ BOOL CALLBACK EnumWindowsProc(HWND hWnd, LPARAM lParam)
 
 LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
 {
-static bool    fInitialStart     = true;
+static int    fInitialStart     = -1;
 
-static HWND    hwndFocus;
-static HBITMAP hBitmap;
 static int     x,cx,
                y,cy,
                cxLoad,
@@ -684,6 +700,7 @@ INITCOMMONCONTROLSEX iccex;
      switch(message)
      {
      case WM_CREATE:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_CREATE");
 
           createAlert();
 
@@ -749,11 +766,79 @@ INITCOMMONCONTROLSEX iccex;
           SendMessage(hwndLoad,PBM_SETRANGE,0,MAKELPARAM(0,100));
           SendMessage(hwndLoad,PBM_SETPOS,0,0);
           SendMessage(hwndLoad,PBM_SETBARCOLOR,0,0x00008000);
+          UpdateWindow(hwndLoad);
+
+          hwndInfo1 = CreateWindow(
+                        TEXT("STATIC"),
+                        NULL,
+                        WS_CHILD | SS_BITMAP | SS_REALSIZEIMAGE | SS_CENTERIMAGE,
+                        0,
+                        0,
+                        100,
+                        100,
+                        hwnd,
+                        NULL,
+                        getInstance(),
+                        NULL);
+          SetClassLong(hwndInfo1 ,GCL_STYLE,CS_HREDRAW | CS_VREDRAW);
+
+          hdc = GetDC(hwndInfo1);
+
+          hBitmap_info_1 = CreateBitmapObjectFromDibFile (hdc,".\\mcontrol_small_ds.bmp");
+          if(!hBitmap_info_1)
+          {
+            TRACE(HERE,".\\mcontrol_small_ds.bmp not found");
+          }
+
+          BITMAP tmpBmp;
+          GetObject(hBitmap_info_1, sizeof(BITMAP), (LPSTR)&tmpBmp);
+          int iLpos,iTpos;
+          ((cx-tmpBmp.bmWidth)!=0)?iLpos=(cx-tmpBmp.bmWidth)/2:iLpos=0;
+          ((cy-tmpBmp.bmHeight)!=0)?iTpos=(cy-tmpBmp.bmHeight)/2:iTpos=0;
+          MoveWindow(hwndInfo1,iLpos,iTpos,tmpBmp.bmWidth,tmpBmp.bmHeight,false);
+          SendMessage(hwndInfo1,STM_SETIMAGE, (WPARAM)IMAGE_BITMAP,(LPARAM)hBitmap_info_1);
+
+          ReleaseDC(hwndInfo1, hdc);
+
+          hwndInfo2 = CreateWindow(
+                        TEXT("STATIC"),
+                        NULL,
+                        WS_CHILD | SS_BITMAP | SS_REALSIZEIMAGE | SS_CENTERIMAGE,
+                        0,
+                        0,
+                        100,
+                        100,
+                        hwnd,
+                        NULL,
+                        getInstance(),
+                        NULL);
+          SetClassLong(hwndInfo2 ,GCL_STYLE,CS_HREDRAW | CS_VREDRAW);
+
+          hdc = GetDC(hwndInfo2);
+
+          hBitmap_info_2 = CreateBitmapObjectFromDibFile (hdc,".\\mcontrol_small_su.bmp");
+          if(!hBitmap_info_2)
+          {
+            TRACE(HERE,".\\mcontrol_small_su.bmp not found");
+          }
+
+          BITMAP tmpBmp1;
+          GetObject(hBitmap_info_2, sizeof(BITMAP), (LPSTR)&tmpBmp1);
+          ((cx-tmpBmp1.bmWidth)!=0)?iLpos=(cx-tmpBmp1.bmWidth)/2:iLpos=0;
+          ((cy-tmpBmp1.bmHeight)!=0)?iTpos=(cy-tmpBmp1.bmHeight)/2:iTpos=0;
+          MoveWindow(hwndInfo2,iLpos,iTpos,tmpBmp1.bmWidth,tmpBmp1.bmHeight,false);
+          SendMessage(hwndInfo2,STM_SETIMAGE, (WPARAM)IMAGE_BITMAP,(LPARAM)hBitmap_info_2);
+
+          ReleaseDC(hwndInfo2, hdc);
+
+          ShowWindow(hwndInfo1,SW_HIDE);
+          ShowWindow(hwndInfo2,SW_HIDE);
 
           return(0);
           break;
 
      case WM_USER:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_USER");
 
           if(wParam)
           {
@@ -790,14 +875,65 @@ INITCOMMONCONTROLSEX iccex;
           return(0);
           break;
 
+     case WM_START_DELAY_TIMER:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_START_DELAY_TIMER");
+          if(fInitialStart!=-1)
+          {
+            return(0);
+          }
+          if((int)wParam<=0)
+          {
+            TRACE(HERE,"No start delay timer set - normal startup");
+            fInitialStart=1;
+            InvalidateRect (hwnd, NULL, TRUE);
+            UpdateWindow (hwnd);
+            //createAlert();
+          } else
+          {
+            TRACE(HERE,"Start delay timer seconds:%d",wParam);
+            fInitialStart=0;
+            SetTimer( hwnd, START_DELAY_TIMER, wParam*1000, NULL );
+
+            ShowWindow(hwndInfo1,SW_SHOW);
+            UpdateWindow(hwndInfo1);
+          }
+          return(0);
+          break;
+
+     case WM_TIMER:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_TIMER");
+          if(wParam==START_DELAY_TIMER)
+          {
+            TRACE(HERE,"Delay finished");
+            KillTimer( hwnd, START_DELAY_TIMER);
+            if(fInitialStart==0)
+            {
+              TRACE(HERE,"Delay finished - Start massai");
+              fInitialStart=1;
+              ShowWindow(hwndInfo1,SW_HIDE);
+              InvalidateRect (hwnd, NULL, TRUE);
+              UpdateWindow (hwnd);
+              //createAlert();
+            }
+            return(0);
+          }
+          break;
+
      case WM_SYSKEYUP:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_SYSKEYUP");
+          // don't let windows process these messages
+          return(0);
      case WM_SYSKEYDOWN:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_SYSKEYDOWN");
+          // don't let windows process these messages
+          return(0);
      case WM_SYSCHAR:
-
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_SYSCHAR");
           // don't let windows process these messages
           return(0);
 
      case WM_KEYUP:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_KEYUP");
 
           //TRACE(HERE,"GetKeyState(VK_CONTROL) = 0x%08x",GetKeyState(VK_CONTROL));
 
@@ -913,16 +1049,19 @@ INITCOMMONCONTROLSEX iccex;
           return(0);
 
      case WM_MASSAIREBOOT_REMOTE:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_MASSAIREBOOT_REMOTE");
 
           sendAlert(ALERT_E_REBOOT_REMOTE);
           return(0);
 
      case WM_MASSAISHUTDOWN_REMOTE:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_MASSAISHUTDOWN_REMOTE");
 
           sendAlert(ALERT_E_SHUTDOWN_REMOTE);
           return(0);
 
      case WM_MASSAISTART_REMOTE:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_MASSAISTART_REMOTE");
 
           // request from remote !!
 
@@ -934,10 +1073,17 @@ INITCOMMONCONTROLSEX iccex;
 
             fStarted          = true;
 
+            ShowWindow(hwndInfo2,SW_SHOW);
+            UpdateWindow(hwndInfo2);
+            UpdateWindow(hwndLoad);
+
             // start update service previous to all other tasks ...
 
             rc = startUpdate();
 
+            ShowWindow(hwndInfo2,SW_HIDE);
+            UpdateWindow(hwndInfo2);
+
             if(rc == REBOOT_KIOSK)
             {
               TRACE(HERE,"update service requested kiosk reboot, rc = %d",rc);
@@ -970,6 +1116,7 @@ INITCOMMONCONTROLSEX iccex;
           return(rc);
 
      case WM_MASSAISTOP_REMOTE:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_MASSAISTOP_REMOTE");
 
           // request from remote !!
 
@@ -996,6 +1143,7 @@ INITCOMMONCONTROLSEX iccex;
           return(rc);
 
      case WM_MASSAISTOP_SCHEDULER:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_MASSAISTOP_SCHEDULER");
 
           if(fStarted)
           {
@@ -1025,69 +1173,84 @@ INITCOMMONCONTROLSEX iccex;
           break;
 
      case WM_MASSAISTART:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_MASSAISTART");
      case WM_MASSAISTART_SCHEDULER:
+          if(message!=WM_MASSAISTART) TRACE(SecondaryRuntime_HERE,"WndProc WM_MASSAISTART_SCHEDULER");
 
-          if(message == WM_MASSAISTART)
-          {
-            sendAlert(ALERT_E_START_LOCAL);
-          } else
+          if(!fStarted)
           {
-            TRACE(HERE,"scheduler requested START");
-            sendAlert(ALERT_E_START_SCHEDULED);
-          }
+            if(message == WM_MASSAISTART)
+            {
+              sendAlert(ALERT_E_START_LOCAL);
+            } else
+            {
+              TRACE(HERE,"scheduler requested START");
+              sendAlert(ALERT_E_START_SCHEDULED);
+            }
 
-          Sleep(3000);
+            Sleep(2000);
 
-          SendMessage(hwndLoad,PBM_SETBARCOLOR,0,0x00008000);
+            ShowWindow(hwndInfo2,SW_SHOW);
 
-          // start update service previous to all other tasks ...
+            SendMessage(hwndLoad,PBM_SETBARCOLOR,0,0x00008000);
 
-          rc = startUpdate();
+            UpdateWindow(hwndInfo2);
+            UpdateWindow(hwndLoad);
 
-          if(rc == REBOOT_KIOSK)
-          {
-            TRACE(HERE,"update service requested kiosk reboot, rc = %d",rc);
+            Sleep(1000);
 
-            sendAlert(ALERT_E_REBOOT_UPDATE);
+            // start update service previous to all other tasks ...
 
-            rc = shutdownOS_Now(true);
+            rc = startUpdate();
 
-            TRACE(HERE,"kiosk reboot, rc = %d",rc);
+            ShowWindow(hwndInfo2,SW_HIDE);
+            UpdateWindow(hwndInfo2);
 
-            PostQuitMessage(0);
-            return(0);
-          }
+            if(rc == REBOOT_KIOSK)
+            {
+              TRACE(HERE,"update service requested kiosk reboot, rc = %d",rc);
 
-          // execute system commands before starting platform
+              sendAlert(ALERT_E_REBOOT_UPDATE);
 
-          execSysCmdsStartup();
+              rc = shutdownOS_Now(true);
 
-          if(rc = startAll())
-          {
-            char szMsg[512];
+              TRACE(HERE,"kiosk reboot, rc = %d",rc);
 
-            sprintf(szMsg,"Problem detected during platform startup.\nError = %d",rc);
+              PostQuitMessage(0);
+              return(0);
+            }
 
-            MessageBox(hwnd,TEXT(szMsg),TEXT("Massai"),MB_ICONSTOP | MB_OK);
+            // execute system commands before starting platform
 
-            PostMessage(hwnd,WM_CLOSE,0,0);
-          }
-          else
-          {
-            Sleep(1000);
+            execSysCmdsStartup();
 
-            SetActiveWindow(hwnd);
-            SetFocus(hwnd);
+            if(rc = startAll())
+            {
+              char szMsg[512];
 
-            fStarted           = true;
-          }
+              sprintf(szMsg,"Problem detected during platform startup.\nError = %d",rc);
 
+              MessageBox(hwnd,TEXT(szMsg),TEXT("Massai"),MB_ICONSTOP | MB_OK);
+
+              PostMessage(hwnd,WM_CLOSE,0,0);
+            }
+            else
+            {
+              Sleep(1000);
+
+              SetActiveWindow(hwnd);
+              SetFocus(hwnd);
+
+              fStarted           = true;
+            }
+          }
           return(0);
           break;
 
      case WM_CLOSE:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_CLOSE");
 
-          TRACE(HERE,"shutting down contoller...");
+          TRACE(HERE,"shutting down controller...");
 
           if(hSem)
             SetEvent(hSem);
@@ -1108,12 +1271,17 @@ INITCOMMONCONTROLSEX iccex;
           break;
 
      case WM_DESTROY:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_DESTROY");
 
           DestroyWindow(hwndLoad);
+          DestroyWindow(hwndInfo1);
+          DestroyWindow(hwndInfo2);
+
           return(0);
           break;
 
      case WM_PAINT:
+          //TRACE(SecondaryRuntime_HERE,"WndProc WM_PAINT");
 
           if(!serverMode())
             hwndFocus = GetFocus();
@@ -1146,9 +1314,9 @@ INITCOMMONCONTROLSEX iccex;
 
           EndPaint (hwnd, &ps);
 
-          if(fInitialStart)
+          if(fInitialStart==1)
           {
-            fInitialStart = false;
+            fInitialStart = 2;
             PostMessage(hwnd,WM_MASSAISTART,0,0);
           }
 
@@ -1160,6 +1328,7 @@ INITCOMMONCONTROLSEX iccex;
         (AkA)
         */
         case WM_SYSCOMMAND:
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_SYSCOMMAND");
             if (wParam != SC_RESTORE || serverMode()) break;    // nothing to do
 
             TRACE(HERE, "Request to go into service");
@@ -1217,6 +1386,7 @@ INITCOMMONCONTROLSEX iccex;
         case WM_DEVICECHANGE: // This message is broadcasted whenever something relevant occurs in a device
         {
           //TRACE(HERE, "[WM_DEVICECHANGE] Hardware configuration changed");
+          TRACE(SecondaryRuntime_HERE,"WndProc WM_DEVICECHANGE");
 
           switch(wParam)
           {
-- 
2.41.0.windows.1

