From b8723574f33b6f1190e1f43e54b499684febfef4 Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 26 Nov 2013 13:44:03 +0000
Subject: [PATCH 0496/1076] extension Mantis 0029957: ConveyorComp: CUSS1.3
 Conveyor (without ConveyorAEA)

textidl.lib
V1.0.0.9
added new datastatus, eventcodes, statuscodes

code.idl.cmops.idl, characteristics.idl
V1.3.1
use CUSS1.3 IDL and XSD



git-svn-id: svn://localhost/SelfServiceCommon/trunk@617 90b65887-3827-0410-9a23-83215b262276
---
 SelfServiceCommon/Interfaces/inc/cuss/orbs.h  |  15 +
 .../Massai/cpp/textIDL/src/local_def.cpp      |  10 +-
 .../Massai/cpp/textIDL/src/textcodes.cpp      |  17 +
 .../Massai/idl/Cuss/CUSS.PAYMENT.XSD          | 547 ++++++++++++++++++
 .../Massai/idl/Cuss/CUSS.SBD.XSD              | 203 +++++++
 .../Massai/idl/Cuss/characteristics.idl       | 260 +++++----
 SelfServiceCommon/Massai/idl/Cuss/codes.idl   | 480 +++++++--------
 SelfServiceCommon/Massai/idl/Cuss/comps.idl   | 543 +++++++++--------
 .../Massai/idl/Cuss/comps.tao140.idl          | 540 +++++++++--------
 SelfServiceCommon/Massai/idl/Cuss/types.idl   | 245 ++++----
 10 files changed, 1917 insertions(+), 943 deletions(-)
 create mode 100644 SelfServiceCommon/Massai/idl/Cuss/CUSS.PAYMENT.XSD
 create mode 100644 SelfServiceCommon/Massai/idl/Cuss/CUSS.SBD.XSD

diff --git a/SelfServiceCommon/Interfaces/inc/cuss/orbs.h b/SelfServiceCommon/Interfaces/inc/cuss/orbs.h
index e558eb5b..35e34403 100644
--- a/SelfServiceCommon/Interfaces/inc/cuss/orbs.h
+++ b/SelfServiceCommon/Interfaces/inc/cuss/orbs.h
@@ -103,6 +103,9 @@ namespace m_datastatus
     const long DS_TYPES_ISO15961                 = 18000; /* IATA RFID baggage tag devices */
     const long DS_TYPES_RP1745                   = 18010; /* IATA Baggage Service Messages Format */
     const long DS_TYPES_WEIGHT                   = 18020; /* Baggage Weight from Scale or Conveyor */
+    const long DS_TYPES_HEAVYTAG                 = 18030; /* Special Heavy Tag for baggage */
+    const long DS_TYPES_SBDAEA                   = 18040; /* AEA-SBD control language */
+    const long DS_TYPES_SBDCUSS                  = 18050; /* CUSS-SBD control language */
 
     const long DS_TYPES_EPASSPORT_DG1            = 20100; /* e-Passport format */
     const long DS_TYPES_EPASSPORT_DG2            = 20200; /* e-Passport format */
@@ -125,6 +128,7 @@ namespace m_datastatus
     const long DS_TYPES_EPASSPORT_DG19           = 21900; /* e-Passport format */
     const long DS_TYPES_EPASSPORT_DG20           = 22000; /* e-Passport format */
 
+    const long DS_TYPES_EPAYMENT                 = 23000; /* E-Payment: CuPaySchema.xsd */
 };
 
 /**
@@ -197,6 +201,10 @@ namespace m_eventcodes
     const long STATE_EXPLANATION                = 1000;/**< Tell CLA why application is in current state */
     const long ACTIVE_TRANSFER                  = 1001;/**< Request CLA transver ACTIVE to new application */
     const long TRANSACTION_EXPLANATION          = 1002;/**< Tell CLA what happened in most recent transaction*/
+
+    const long VERSION_EXPLANATION              = 1003; /**< Tell CLA the version string for the application */
+    const long ACTIVE_UNAVAILABLE               = 133;  /**< Go unavailable while active in a transaction */
+    const long UPDATE_REQUEST                   = 1004; /**< Tell CLA the application wishes to update */
 };
 
 /**
@@ -252,6 +260,13 @@ namespace m_statuscodes
     const long BAGGAGE_INTRUSION_BACK            = 143; /**< private + platform  */
     const long BAGGAGE_TRANSPORT_BUSY            = 144; /**< private + platform  */
 
+    const long BAGGAGE_MISTRACKED                = 145; /**< private + platform  */
+    const long BAGGAGE_UNEXPECTED_CHANGE         = 146; /**< private + platform  */
+    const long BAGGAGE_ACCEPTED                  = 147; /**< private + platform  */
+    const long BAGGAGE_DELIVERED                 = 148; /**< private + platform  */
+    const long BAGGAGE_INTERFERENCE_USER         = 149; /**< private + platform  */
+    const long BAGGAGE_INTRUSION_SAFETY          = 150; /**< private + platform  */
+
     const long FORMAT_ERROR                      = 201; /**< private + platform (platform only for output classes) */
     const long LENGTH_ERROR                      = 202; /**< private + platform (platform only for output classes) */
     const long DATA_MISSING                      = 203; /**< private + platform (platform only for output classes) */
diff --git a/SelfServiceCommon/Massai/cpp/textIDL/src/local_def.cpp b/SelfServiceCommon/Massai/cpp/textIDL/src/local_def.cpp
index e7649cb6..b1150e8c 100644
--- a/SelfServiceCommon/Massai/cpp/textIDL/src/local_def.cpp
+++ b/SelfServiceCommon/Massai/cpp/textIDL/src/local_def.cpp
@@ -1,6 +1,6 @@
 #include "tools/versionlib.h"
 
-VERSION_ID_DT(textIDL, 1, 0, 0, 8);
+VERSION_ID_DT(textIDL, 1, 0, 0, 9);
 
 /*!
 \file
@@ -8,18 +8,22 @@ VERSION_ID_DT(textIDL, 1, 0, 0, 8);
 
 \page textidl.lib Release Notes - textidl.lib
 
-@version 1.0.0.8
+@version 1.0.0.9
 
 \section changehistory Change history
 
 textidl.lib
 
+\version 1.0.0.9
+\li 26.11.2013
+\li Mantis 0029957: ConveyorComp: CUSS1.3 Conveyor (without ConveyorAEA)
+- added new datastatus, eventcodes, statuscodes
+
 \version 1.0.0.8
 \li 15.08.2013
 \li Mantis 0028544: GPP: Volke/Rickert/H&W-Printer sends initially MEDIA_ABSENT when status is unknown\n
 added mediaStatusType.MEDIA_UNKNOWN
 
-
 \version 1.0.0.7
 \li 05.07.2017
 \li applicationStart.cmdLine changed from String to List of Strings
diff --git a/SelfServiceCommon/Massai/cpp/textIDL/src/textcodes.cpp b/SelfServiceCommon/Massai/cpp/textIDL/src/textcodes.cpp
index 07fd83a4..a3c94440 100644
--- a/SelfServiceCommon/Massai/cpp/textIDL/src/textcodes.cpp
+++ b/SelfServiceCommon/Massai/cpp/textIDL/src/textcodes.cpp
@@ -77,6 +77,9 @@ namespace MASSAI
         case DS_TYPES_ISO15961:                 return "ISO15961";
         case DS_TYPES_RP1745:                   return "RP1745";
         case DS_TYPES_WEIGHT:                   return "WEIGHT";
+        case DS_TYPES_HEAVYTAG:                 return "HEAVYTAG";
+        case DS_TYPES_SBDAEA:                   return "SBDAEA";
+        case DS_TYPES_SBDCUSS:                  return "SBDCUSS";
 
         case DS_TYPES_EPASSPORT_DG1:            return "EPASSPORT_DG1";
         case DS_TYPES_EPASSPORT_DG2:            return "EPASSPORT_DG2";
@@ -98,6 +101,9 @@ namespace MASSAI
         case DS_TYPES_EPASSPORT_DG18:           return "EPASSPORT_DG18";
         case DS_TYPES_EPASSPORT_DG19:           return "EPASSPORT_DG19";
         case DS_TYPES_EPASSPORT_DG20:           return "EPASSPORT_DG20";
+
+        case DS_TYPES_EPAYMENT:                 return "EPAYMENT";
+
         default:                                return unknown("DataStatusType", code);
       }
     }
@@ -178,6 +184,7 @@ namespace MASSAI
         case AVAILABLE_UNAVAILABLE:           return "AVAILABLE_UNAVAILABLE";
         case DISABLED_SUSPENDED:              return "DISABLED_SUSPENDED";
         case ACTIVE_ACTIVE:                   return "ACTIVE_ACTIVE";
+        case ACTIVE_UNAVAILABLE:              return "ACTIVE_UNAVAILABLE";
         case RELEASED:                        return "RELEASED";
         case UNAVAILABLE:                     return "UNAVAILABLE";
         case READY:                           return "READY";
@@ -191,6 +198,9 @@ namespace MASSAI
         case STATE_EXPLANATION:               return "STATE_EXPLANATION";
         case ACTIVE_TRANSFER:                 return "ACTIVE_TRANSFER";
         case TRANSACTION_EXPLANATION:         return "TRANSACTION_EXPLANATION";
+        case VERSION_EXPLANATION              return "VERSION_EXPLANATION";
+        case UPDATE_REQUEST                   return "UPDATE_REQUEST";
+
         case RC_REFERENCE:                    return "REFERENCE";
         case RC_STATE:                        return "STATE";
         case RC_DENIED:                       return "DENIED";
@@ -251,6 +261,13 @@ namespace MASSAI
         case BAGGAGE_INTRUSION_FRONT:        return "BAGGAGE_INTRUSION_FRONT";
         case BAGGAGE_INTRUSION_BACK:         return "BAGGAGE_INTRUSION_BACK";
         case BAGGAGE_TRANSPORT_BUSY:         return "BAGGAGE_TRANSPORT_BUSY";
+        case BAGGAGE_MISTRACKED:             return "BAGGAGE_MISTRACKED";
+        case BAGGAGE_UNEXPECTED_CHANGE:      return "BAGGAGE_UNEXPECTED_CHANGE";
+        case BAGGAGE_ACCEPTED:               return "BAGGAGE_ACCEPTED";
+        case BAGGAGE_DELIVERED:              return "BAGGAGE_DELIVERED";
+        case BAGGAGE_INTERFERENCE_USER:      return "BAGGAGE_INTERFERENCE_USER";
+        case BAGGAGE_INTRUSION_SAFETY:       return "BAGGAGE_INTRUSION_SAFETY";
+
 
         case FORMAT_ERROR:                   return "FORMAT_ERROR";
         case LENGTH_ERROR:                   return "LENGTH_ERROR";
diff --git a/SelfServiceCommon/Massai/idl/Cuss/CUSS.PAYMENT.XSD b/SelfServiceCommon/Massai/idl/Cuss/CUSS.PAYMENT.XSD
new file mode 100644
index 00000000..41174c7f
--- /dev/null
+++ b/SelfServiceCommon/Massai/idl/Cuss/CUSS.PAYMENT.XSD
@@ -0,0 +1,547 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- edited with XML Spy v4.4 U (http://www.xmlspy.com) by Ethan Hall-Beyer (private) -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
+	<xs:simpleType name="currency-code-type">
+		<xs:annotation>
+			<xs:documentation>ISO 4217 (3-character alpha) currency code</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:string">
+			<xs:length value="3"/>
+		</xs:restriction>
+	</xs:simpleType>
+	<xs:simpleType name="ds-types-type">
+		<xs:annotation>
+			<xs:documentation>DS type(s) string</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:string">
+			<xs:enumeration value="DS_TYPES_EPAYMENT"/>
+		</xs:restriction>
+	</xs:simpleType>
+	<xs:simpleType name="transaction-document-type">
+		<xs:annotation>
+			<xs:documentation>Transaction document type</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:string">
+			<xs:enumeration value="none"/>
+			<xs:enumeration value="request"/>
+			<xs:enumeration value="response"/>
+			<xs:enumeration value="ack"/>
+		</xs:restriction>
+	</xs:simpleType>
+	<xs:element name="approval-code" type="xs:string">
+		<xs:annotation>
+			<xs:documentation>Acquirer or issuer provided approval (authorization) code</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+	<xs:element name="approved-amounts">
+		<xs:annotation>
+			<xs:documentation>Authorized financial elements (mandatory in response, not required in request)</xs:documentation>
+		</xs:annotation>
+		<xs:complexType>
+			<xs:sequence>
+				<xs:element ref="base-amount"/>
+			</xs:sequence>
+			<xs:attribute name="currency-code" type="currency-code-type" use="required"/>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="authorization-amounts">
+		<xs:annotation>
+			<xs:documentation>Requested or authorized financial elements</xs:documentation>
+		</xs:annotation>
+		<xs:complexType>
+			<xs:sequence>
+				<xs:element name="requested-amounts" minOccurs="0">
+					<xs:annotation>
+						<xs:documentation>Requested financial elements (mandatory in request, required in response only where authorized amount is in a different currency from that requested)</xs:documentation>
+					</xs:annotation>
+					<xs:complexType>
+						<xs:sequence>
+							<xs:element ref="base-amount"/>
+						</xs:sequence>
+						<xs:attribute name="currency-code" type="currency-code-type" use="required"/>
+					</xs:complexType>
+				</xs:element>
+				<xs:element ref="approved-amounts" minOccurs="0"/>
+			</xs:sequence>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="base-amount" type="xs:decimal">
+		<xs:annotation>
+			<xs:documentation>Requested or authorized amount in units.subunits (arithmetic major units) format</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+	<xs:element name="card-brand-list">
+		<xs:annotation>
+			<xs:documentation>Component-configured or application-requested card brand list</xs:documentation>
+		</xs:annotation>
+		<xs:complexType>
+			<xs:sequence>
+				<xs:element ref="card-brand" maxOccurs="unbounded"/>
+			</xs:sequence>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="card-brand">
+		<xs:annotation>
+			<xs:documentation>Card brand identifier</xs:documentation>
+		</xs:annotation>
+		<xs:simpleType>
+			<xs:restriction base="xs:string">
+				<xs:enumeration value="amex"/>
+				<xs:enumeration value="cart-blanche"/>
+				<xs:enumeration value="discover"/>
+				<xs:enumeration value="jcb"/>
+				<xs:enumeration value="maestro"/>
+				<xs:enumeration value="mastercard"/>
+				<xs:enumeration value="switch"/>
+				<xs:enumeration value="visa"/>
+			</xs:restriction>
+		</xs:simpleType>
+	</xs:element>
+	<xs:element name="cu-msg">
+		<xs:annotation>
+			<xs:documentation>Common use message document root element</xs:documentation>
+		</xs:annotation>
+		<xs:complexType>
+			<xs:choice>
+				<xs:element name="characteristics">
+					<xs:annotation>
+						<xs:documentation>Component characteristics</xs:documentation>
+					</xs:annotation>
+					<xs:complexType>
+						<xs:choice>
+							<xs:element name="epayment">
+								<xs:annotation>
+									<xs:documentation>EPayment component characteristics</xs:documentation>
+								</xs:annotation>
+								<xs:complexType>
+									<xs:sequence>
+										<xs:element ref="card-brand-list" minOccurs="0"/>
+										<xs:element ref="media-type-list" minOccurs="0"/>
+										<xs:element name="currency-code-list" minOccurs="0">
+											<xs:annotation>
+												<xs:documentation>Component-configured payment currency code list</xs:documentation>
+											</xs:annotation>
+											<xs:complexType>
+												<xs:sequence>
+													<xs:element name="currency-code" type="currency-code-type" maxOccurs="unbounded">
+														<xs:annotation>
+															<xs:documentation>ISO 4217 (3-character alpha) currency code</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+												</xs:sequence>
+											</xs:complexType>
+										</xs:element>
+									</xs:sequence>
+								</xs:complexType>
+							</xs:element>
+						</xs:choice>
+						<xs:attribute name="ds-types" type="ds-types-type" use="required"/>
+					</xs:complexType>
+				</xs:element>
+				<xs:element ref="epayment-msg"/>
+			</xs:choice>
+			<xs:attribute name="cu-msg-schema-version" use="optional" default="1.00">
+				<xs:simpleType>
+					<xs:restriction base="xs:string"/>
+				</xs:simpleType>
+			</xs:attribute>
+			<xs:attribute name="cu-msg-document-type" use="required">
+				<xs:simpleType>
+					<xs:restriction base="xs:string">
+						<xs:enumeration value="characteristics"/>
+						<xs:enumeration value="epayment-msg"/>
+					</xs:restriction>
+				</xs:simpleType>
+			</xs:attribute>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="epayment-msg">
+		<xs:annotation>
+			<xs:documentation>Common use payment component request/response message</xs:documentation>
+		</xs:annotation>
+		<xs:complexType>
+			<xs:choice>
+				<xs:element name="setup">
+					<xs:annotation>
+						<xs:documentation>Execution context setup</xs:documentation>
+					</xs:annotation>
+					<xs:complexType>
+						<xs:sequence>
+							<xs:element ref="merchant-id" minOccurs="0"/>
+							<xs:element ref="card-brand-list" minOccurs="0"/>
+							<xs:element ref="media-type-list" minOccurs="0"/>
+						</xs:sequence>
+						<xs:attribute name="ds-types" type="ds-types-type" use="optional"/>
+					</xs:complexType>
+				</xs:element>
+				<xs:element name="transaction">
+					<xs:annotation>
+						<xs:documentation>Financial transaction</xs:documentation>
+					</xs:annotation>
+					<xs:complexType>
+						<xs:choice>
+							<xs:element name="transaction-request">
+								<xs:annotation>
+									<xs:documentation>Financial request from common use application to payment component</xs:documentation>
+								</xs:annotation>
+								<xs:complexType>
+									<xs:sequence>
+										<xs:element name="environment" minOccurs="0">
+											<xs:annotation>
+												<xs:documentation>Optional common use terminal/application operational parameters</xs:documentation>
+											</xs:annotation>
+											<xs:complexType>
+												<xs:sequence>
+													<xs:element ref="merchant-id" minOccurs="0"/>
+													<xs:element name="location" type="xs:string" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Common use kiosk/terminal/station identifier</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+													<xs:element name="cashier" type="xs:string" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Agent/cashier (or pseudo-cashier) identifier</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+													<xs:element name="order-reference" type="xs:string" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Airline/merchant order, receipt or ticket reference number</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+												</xs:sequence>
+											</xs:complexType>
+										</xs:element>
+										<xs:element name="pre-auth" minOccurs="0">
+											<xs:annotation>
+												<xs:documentation>Details of previously acquired pre-auth being finalized by this post-auth</xs:documentation>
+											</xs:annotation>
+											<xs:complexType>
+												<xs:sequence>
+													<xs:element ref="transaction-reference" minOccurs="0"/>
+													<xs:element ref="approval-code" minOccurs="0"/>
+													<xs:element ref="approved-amounts"/>
+												</xs:sequence>
+											</xs:complexType>
+										</xs:element>
+										<xs:element name="account" minOccurs="0">
+											<xs:annotation>
+												<xs:documentation>Optional common use terminal/application-acquired account details</xs:documentation>
+											</xs:annotation>
+											<xs:complexType>
+												<xs:choice>
+													<xs:element name="manual">
+														<xs:annotation>
+															<xs:documentation>Manually-acquired account details (or the relevant elements from an electronic acquisition)</xs:documentation>
+														</xs:annotation>
+														<xs:complexType>
+															<xs:sequence>
+																<xs:element name="pan">
+																	<xs:simpleType>
+																		<xs:restriction base="xs:string">
+																			<xs:minLength value="12"/>
+																			<xs:maxLength value="19"/>
+																		</xs:restriction>
+																	</xs:simpleType>
+																</xs:element>
+																<xs:element name="expiration">
+																	<xs:annotation>
+																		<xs:documentation>MMYY format</xs:documentation>
+																	</xs:annotation>
+																	<xs:simpleType>
+																		<xs:restriction base="xs:string">
+																			<xs:length value="4"/>
+																		</xs:restriction>
+																	</xs:simpleType>
+																</xs:element>
+															</xs:sequence>
+														</xs:complexType>
+													</xs:element>
+													<xs:element name="swipe">
+														<xs:annotation>
+															<xs:documentation>Electronically-acquired account details</xs:documentation>
+														</xs:annotation>
+														<xs:complexType>
+															<xs:sequence>
+																<xs:element name="track" maxOccurs="3">
+																	<xs:complexType>
+																		<xs:simpleContent>
+																			<xs:extension base="xs:string">
+																				<xs:attribute name="track-number" use="required">
+																					<xs:simpleType>
+																						<xs:restriction base="xs:integer">
+																							<xs:minInclusive value="1"/>
+																							<xs:maxInclusive value="3"/>
+																						</xs:restriction>
+																					</xs:simpleType>
+																				</xs:attribute>
+																			</xs:extension>
+																		</xs:simpleContent>
+																	</xs:complexType>
+																</xs:element>
+															</xs:sequence>
+														</xs:complexType>
+													</xs:element>
+												</xs:choice>
+												<xs:attribute name="account-type" use="required">
+													<xs:annotation>
+														<xs:documentation>Account data acquisition type (or pseudo-acquisition type; some applications may present the account data to the payment component as having been manually acquired even if they were acquired electronically)</xs:documentation>
+													</xs:annotation>
+													<xs:simpleType>
+														<xs:restriction base="xs:string">
+															<xs:enumeration value="manual"/>
+															<xs:enumeration value="swipe"/>
+														</xs:restriction>
+													</xs:simpleType>
+												</xs:attribute>
+											</xs:complexType>
+										</xs:element>
+										<xs:element name="itinerary" minOccurs="0">
+											<xs:annotation>
+												<xs:documentation>Travel itinerary details</xs:documentation>
+											</xs:annotation>
+											<xs:complexType>
+												<xs:sequence>
+													<xs:element name="name" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Passenger name</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+													<xs:element name="pnr" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Passenger name record</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+													<xs:element name="date" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Transaction (flight) date</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+													<xs:element name="flight-number" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Airline identifier and flight number</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+													<xs:element name="departure-city" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Departure city code</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+													<xs:element name="arrival-city" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Arrival city code</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+												</xs:sequence>
+											</xs:complexType>
+										</xs:element>
+										<xs:element name="billing-description" type="xs:string" minOccurs="0">
+											<xs:annotation>
+												<xs:documentation>Descriptive billing information</xs:documentation>
+											</xs:annotation>
+										</xs:element>
+										<xs:element ref="gp-parameter-list" minOccurs="0"/>
+										<xs:element ref="authorization-amounts"/>
+									</xs:sequence>
+									<xs:attribute name="language" use="optional">
+										<xs:annotation>
+											<xs:documentation>ISO 639-1 (2-character) code for the interface language to be used at the payment device and in transaction status messages</xs:documentation>
+										</xs:annotation>
+										<xs:simpleType>
+											<xs:restriction base="xs:string">
+												<xs:length value="2"/>
+											</xs:restriction>
+										</xs:simpleType>
+									</xs:attribute>
+								</xs:complexType>
+							</xs:element>
+							<xs:element name="transaction-response">
+								<xs:annotation>
+									<xs:documentation>Financial request response from payment component to common use application</xs:documentation>
+								</xs:annotation>
+								<xs:complexType>
+									<xs:choice>
+										<xs:element name="approval">
+											<xs:complexType>
+												<xs:sequence>
+													<xs:element ref="transaction-reference" minOccurs="0"/>
+													<xs:element ref="media-type" minOccurs="0"/>
+													<xs:element name="approval-type" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Type of approval</xs:documentation>
+														</xs:annotation>
+														<xs:simpleType>
+															<xs:restriction base="xs:string">
+																<xs:enumeration value="pin"/>
+																<xs:enumeration value="signature"/>
+															</xs:restriction>
+														</xs:simpleType>
+													</xs:element>
+													<xs:element name="card-brand" type="xs:string" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Card brand name</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+													<xs:element ref="approval-code" minOccurs="0"/>
+													<xs:element ref="gp-parameter-list" minOccurs="0"/>
+													<xs:element ref="authorization-amounts"/>
+													<xs:element name="receipt-data" type="xs:string" minOccurs="0">
+														<xs:annotation>
+															<xs:documentation>Acquirer-provided pre-formatted receipt data</xs:documentation>
+														</xs:annotation>
+													</xs:element>
+												</xs:sequence>
+											</xs:complexType>
+										</xs:element>
+										<xs:element name="non-approval">
+											<xs:annotation>
+												<xs:documentation>Decline, referral or failure details</xs:documentation>
+											</xs:annotation>
+											<xs:complexType>
+												<xs:simpleContent>
+													<xs:extension base="xs:string">
+														<xs:attribute name="non-approval-reason-code" type="xs:integer" use="optional"/>
+														<xs:attribute name="referral" type="xs:boolean" use="optional"/>
+													</xs:extension>
+												</xs:simpleContent>
+											</xs:complexType>
+										</xs:element>
+										<xs:element name="transaction-status">
+											<xs:annotation>
+												<xs:documentation>Free-form status indication and/or display text</xs:documentation>
+											</xs:annotation>
+											<xs:complexType>
+												<xs:simpleContent>
+													<xs:extension base="xs:string">
+														<xs:attribute name="transaction-status-id" use="optional">
+															<xs:simpleType>
+																<xs:restriction base="xs:string">
+																	<xs:enumeration value="amount-approval"/>
+																	<xs:enumeration value="application-selection"/>
+																	<xs:enumeration value="card-insertion"/>
+																	<xs:enumeration value="card-removal"/>
+																	<xs:enumeration value="cashback-entry"/>
+																	<xs:enumeration value="pin-entry"/>
+																	<xs:enumeration value="processing"/>
+																</xs:restriction>
+															</xs:simpleType>
+														</xs:attribute>
+													</xs:extension>
+												</xs:simpleContent>
+											</xs:complexType>
+										</xs:element>
+									</xs:choice>
+									<xs:attribute name="response-type" use="required">
+										<xs:simpleType>
+											<xs:restriction base="xs:string">
+												<xs:enumeration value="approval"/>
+												<xs:enumeration value="decline"/>
+												<xs:enumeration value="failure"/>
+												<xs:enumeration value="status"/>
+											</xs:restriction>
+										</xs:simpleType>
+									</xs:attribute>
+								</xs:complexType>
+							</xs:element>
+							<xs:element name="transaction-ack">
+								<xs:annotation>
+									<xs:documentation>Confirmation (or rejection) of approved funds consumption</xs:documentation>
+								</xs:annotation>
+								<xs:complexType>
+									<xs:attribute name="consumed" type="xs:boolean" use="required"/>
+								</xs:complexType>
+							</xs:element>
+						</xs:choice>
+						<xs:attribute name="transaction-document-type" type="transaction-document-type" use="required"/>
+						<xs:attribute name="transaction-document-return-type" type="transaction-document-type" use="optional">
+							<xs:annotation>
+								<xs:documentation>Advise to the recipient as to what type of transaction document is expected to be returned; for a response document, this attribute indicates whether the platform expects an acknowledgement document to be returned to commit (or discard) the transaction</xs:documentation>
+							</xs:annotation>
+						</xs:attribute>
+						<xs:attribute name="transaction-type" use="required">
+							<xs:annotation>
+								<xs:documentation>Financial transaction type</xs:documentation>
+							</xs:annotation>
+							<xs:simpleType>
+								<xs:restriction base="xs:string">
+									<xs:enumeration value="pre-auth"/>
+									<xs:enumeration value="post-auth"/>
+									<xs:enumeration value="purchase"/>
+									<xs:enumeration value="refund"/>
+									<xs:enumeration value="void-purchase"/>
+									<xs:enumeration value="void-refund"/>
+								</xs:restriction>
+							</xs:simpleType>
+						</xs:attribute>
+					</xs:complexType>
+				</xs:element>
+			</xs:choice>
+			<xs:attribute name="epayment-msg-id" type="xs:string" use="optional">
+				<xs:annotation>
+					<xs:documentation>Application-defined EPayment component message ID (message exchange context), echoed by the common-use platform in the corresponding response(s); the application may use this to match the response(s) to the original request</xs:documentation>
+				</xs:annotation>
+			</xs:attribute>
+			<xs:attribute name="epayment-msg-type" use="required">
+				<xs:annotation>
+					<xs:documentation>The type of common use payment operation contained in the XML message</xs:documentation>
+				</xs:annotation>
+				<xs:simpleType>
+					<xs:restriction base="xs:string">
+						<xs:enumeration value="setup"/>
+						<xs:enumeration value="transaction"/>
+					</xs:restriction>
+				</xs:simpleType>
+			</xs:attribute>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="gp-parameter-list">
+		<xs:annotation>
+			<xs:documentation>General-purpose parameters</xs:documentation>
+		</xs:annotation>
+		<xs:complexType>
+			<xs:sequence>
+				<xs:element name="gp-parameter" minOccurs="0" maxOccurs="unbounded">
+					<xs:complexType>
+						<xs:simpleContent>
+							<xs:extension base="xs:string">
+								<xs:attribute name="gp-parameter-name" type="xs:string" use="required"/>
+							</xs:extension>
+						</xs:simpleContent>
+					</xs:complexType>
+				</xs:element>
+			</xs:sequence>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="media-type-list">
+		<xs:annotation>
+			<xs:documentation>Component-configured or application-requested media type list</xs:documentation>
+		</xs:annotation>
+		<xs:complexType>
+			<xs:sequence>
+				<xs:element ref="media-type" maxOccurs="unbounded"/>
+			</xs:sequence>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="media-type">
+		<xs:annotation>
+			<xs:documentation>Media type identifier</xs:documentation>
+		</xs:annotation>
+		<xs:simpleType>
+			<xs:restriction base="xs:string">
+				<xs:enumeration value="icc"/>
+				<xs:enumeration value="mag-stripe"/>
+				<xs:enumeration value="nfc"/>
+				<xs:enumeration value="rfid"/>
+			</xs:restriction>
+		</xs:simpleType>
+	</xs:element>
+	<xs:element name="merchant-id" type="xs:string">
+		<xs:annotation>
+			<xs:documentation>Airline/merchant identifier where operating in a multi-merchant environment</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+	<xs:element name="transaction-reference" type="xs:string">
+		<xs:annotation>
+			<xs:documentation>Acquirer or issuer provided reference to use for subsequent post-auth or void request (unique transaction identifier, STAN)</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+</xs:schema>
diff --git a/SelfServiceCommon/Massai/idl/Cuss/CUSS.SBD.XSD b/SelfServiceCommon/Massai/idl/Cuss/CUSS.SBD.XSD
new file mode 100644
index 00000000..1cdb5d58
--- /dev/null
+++ b/SelfServiceCommon/Massai/idl/Cuss/CUSS.SBD.XSD
@@ -0,0 +1,203 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- edited with XMLSpy v2010 (http://www.altova.com) by Detlef Meier (Materna GmbH) -->
+<!-- edited with XML Spy v4.4 U (http://www.xmlspy.com) by Ethan Hall-Beyer (private) -->
+<xsd:schema targetNamespace="urn:CUSS-1.3/types/conveyorInterface" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:CUSS-1.3/types/conveyorInterface" id="baggageTypes">
+	<xsd:complexType name="baggageDataType">
+		<xsd:annotation>
+			<xsd:documentation>Data acquired for a single object on the bag measurement / conveyor device</xsd:documentation>
+		</xsd:annotation>
+		<xsd:sequence>
+			<xsd:element name="barcodeTagList" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>List of optical barcode measurement values</xsd:documentation>
+				</xsd:annotation>
+				<xsd:complexType>
+					<xsd:sequence>
+						<xsd:element name="lpnBarcodeTag" type="tns:barcodeTagDataType" minOccurs="0" maxOccurs="unbounded">
+							<xsd:annotation>
+								<xsd:documentation>IATA Resolution 740 baggage license plate ten digit numbers</xsd:documentation>
+							</xsd:annotation>
+						</xsd:element>
+						<xsd:element name="otherBarcodeTag" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
+							<xsd:annotation>
+								<xsd:documentation>Other barcode tags detected on the object. Encode as base64 if binary barcode data</xsd:documentation>
+							</xsd:annotation>
+						</xsd:element>
+					</xsd:sequence>
+				</xsd:complexType>
+			</xsd:element>
+			<xsd:element name="rfidTagList" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>List of radio frequency measurement values (for components supporting DS_TYPES_ISO15961)</xsd:documentation>
+				</xsd:annotation>
+				<xsd:complexType>
+					<xsd:sequence>
+						<xsd:element name="rfidTag" type="tns:rfidTagDataType" maxOccurs="unbounded">
+							<xsd:annotation>
+								<xsd:documentation>One or more RFID bagtag data fields</xsd:documentation>
+							</xsd:annotation>
+						</xsd:element>
+					</xsd:sequence>
+				</xsd:complexType>
+			</xsd:element>
+			<xsd:element name="dimension" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>Dimension values identified for an object on the measurement device </xsd:documentation>
+				</xsd:annotation>
+				<xsd:complexType>
+					<xsd:sequence>
+						<xsd:element name="load" type="tns:weightType" minOccurs="0">
+							<xsd:annotation>
+								<xsd:documentation>Weight load value (for components supporting DS_TYPES_SCALE)</xsd:documentation>
+							</xsd:annotation>
+						</xsd:element>
+						<xsd:element name="size" type="tns:sizeType" minOccurs="0">
+							<xsd:annotation>
+								<xsd:documentation>Size and dimension values (for components supporting DS_TYPES_SBDCUSS)</xsd:documentation>
+							</xsd:annotation>
+						</xsd:element>
+					</xsd:sequence>
+				</xsd:complexType>
+			</xsd:element>
+			<xsd:element name="bsmMessage" type="xsd:string" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>IATA RP1745 Baggage Source Message (BSM) values, containing at least the  following elements: .V, .F and .N. (for components supporting DS_TYPES_RP1745)</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+		</xsd:sequence>
+	</xsd:complexType>
+	<xsd:complexType name="rfidTagDataType">
+		<xsd:annotation>
+			<xsd:documentation>RFID tag data</xsd:documentation>
+		</xsd:annotation>
+		<xsd:sequence>
+			<xsd:element name="property" type="tns:rfidProperty" minOccurs="0" maxOccurs="unbounded">
+				<xsd:annotation>
+					<xsd:documentation>RFID data</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+		</xsd:sequence>
+		<xsd:attribute name="id" type="xsd:string" use="required">
+			<xsd:annotation>
+				<xsd:documentation>Unique tag identifier for reading and writing</xsd:documentation>
+			</xsd:annotation>
+		</xsd:attribute>
+	</xsd:complexType>
+	<xsd:complexType name="barcodeTagDataType">
+		<xsd:annotation>
+			<xsd:documentation>String-based barcode with additional id reference</xsd:documentation>
+		</xsd:annotation>
+		<xsd:simpleContent>
+			<xsd:extension base="xsd:string">
+				<xsd:attribute name="lpnNumber" type="xsd:string" use="required">
+					<xsd:annotation>
+						<xsd:documentation>Distinct identifier of this LPN</xsd:documentation>
+					</xsd:annotation>
+				</xsd:attribute>
+			</xsd:extension>
+		</xsd:simpleContent>
+	</xsd:complexType>
+	<xsd:complexType name="rfidProperty">
+		<xsd:annotation>
+			<xsd:documentation>RFID data structure</xsd:documentation>
+		</xsd:annotation>
+		<xsd:sequence>
+			<xsd:element name="string" type="xsd:string" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>RFID tag data is stored as a normal string</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+			<xsd:element name="binary" type="xsd:hexBinary" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>RFID tag data is stored in hexadecimal format</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+		</xsd:sequence>
+		<xsd:attribute name="key" type="xsd:string" use="required">
+			<xsd:annotation>
+				<xsd:documentation>RFID property key as defined in IATA Res. 1740c (last part of object id)</xsd:documentation>
+			</xsd:annotation>
+		</xsd:attribute>
+	</xsd:complexType>
+	<xsd:element name="baggageData" type="tns:baggageDataType">
+		<xsd:annotation>
+			<xsd:documentation>Baggage data structure</xsd:documentation>
+		</xsd:annotation>
+	</xsd:element>
+	<xsd:complexType name="sizeType">
+		<xsd:annotation>
+			<xsd:documentation>Provide object dimension measurements</xsd:documentation>
+		</xsd:annotation>
+		<xsd:sequence>
+			<xsd:element name="width" type="xsd:int" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>Width of the object, in centimetres (cm)</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+			<xsd:element name="length" type="xsd:int" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>Length of the object, in centimetres (cm)</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+			<xsd:element name="height" type="xsd:int" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>Height of the object, in centimetres (cm)</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+			<xsd:element name="alibi" type="tns:alibiType" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>Reference or confirmation value for the size measurement</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+			<xsd:element name="stable" type="xsd:boolean">
+				<xsd:annotation>
+					<xsd:documentation>Indicates if the measurement is stable</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+		</xsd:sequence>
+	</xsd:complexType>
+	<xsd:complexType name="weightType">
+		<xsd:annotation>
+			<xsd:documentation>Provide object weight measurements</xsd:documentation>
+		</xsd:annotation>
+		<xsd:sequence>
+			<xsd:element name="weight" type="xsd:int">
+				<xsd:annotation>
+					<xsd:documentation>Weight of the object, in grams</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+			<xsd:element name="alibi" type="tns:alibiType" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>Reference or confirmation value for the weight measurement</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+			<xsd:element name="stable" type="xsd:boolean">
+				<xsd:annotation>
+					<xsd:documentation>Indicates if the measurement is stable</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+		</xsd:sequence>
+	</xsd:complexType>
+	<xsd:element name="barcodeTag" type="tns:barcodeTagDataType">
+		<xsd:annotation>
+			<xsd:documentation>License Plate Numbers (LPNs) according to IATA Resolution 740b</xsd:documentation>
+		</xsd:annotation>
+	</xsd:element>
+	<xsd:complexType name="alibiType">
+		<xsd:annotation>
+			<xsd:documentation>Reference or confirmation number for the measurement values, for audit or alibi purposes</xsd:documentation>
+		</xsd:annotation>
+		<xsd:sequence>
+			<xsd:element name="provider" type="xsd:string" minOccurs="0">
+				<xsd:annotation>
+					<xsd:documentation>The source or provider of the alibi value</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+			<xsd:element name="value" type="xsd:string">
+				<xsd:annotation>
+					<xsd:documentation>The alibi value</xsd:documentation>
+				</xsd:annotation>
+			</xsd:element>
+		</xsd:sequence>
+	</xsd:complexType>
+</xsd:schema>
diff --git a/SelfServiceCommon/Massai/idl/Cuss/characteristics.idl b/SelfServiceCommon/Massai/idl/Cuss/characteristics.idl
index 0a582556..3a661f21 100644
--- a/SelfServiceCommon/Massai/idl/Cuss/characteristics.idl
+++ b/SelfServiceCommon/Massai/idl/Cuss/characteristics.idl
@@ -4,16 +4,15 @@
 //
 //  Purpose:   CUSS virtual components characteristics
 //
-//  Date:      02.03.2009
+//  Date:      17.06.2013
 //
 //  Version:   1.3
 //
-//  Author:    CUSS Management Group
+//  Author:    IATA Passenger Experience Management Group: CUWG CUSS-TSG
 //
-//  Copyright(c) 2003,2009 International Air Transport Association, All Rights Reserved
+//  Copyright(c) 2003,2009,2013 International Air Transport Association, All Rights Reserved
 //
-//  Note:      This IDL file is backward-compatible with that of CUSS 0.2.1 and CUSS 1.0
-//             Please refer to the CUSS 1.2 Technical Specification for more information
+//  Note:      Please refer to the CUSS 1.3 Technical Specification for more information
 //
 //  Changed:   Baggage handling support added. (Nicolas Bruns, 29.06.2004)
 //
@@ -21,6 +20,12 @@
 //  @li V1.3
 //  @li Mantis 0025566: WeightScale: support standalone Scale (BaggageScale CUSS1.3)
 //  @li added interface Scale
+//
+//  @date 26.11.2013
+//  @li V1.3.1
+//  @li Mantis 0029957: ConveyorComp: CUSS1.3 Conveyor (without ConveyorAEA)
+//  @li use full CUSS1.3 IDL + Materna extension MediaType: BoardingPassFirst, BoardingPassBusiness, BoardingPassEconomy     
+//
 //----------------------------------------------------------------------------
 
 #ifndef CHARACTERISTICS_IDL
@@ -31,11 +36,11 @@
 #include "codes.idl"
 #include "types.idl"
 
-/** Definition of the Virtual Component Characteristics 
+/** Definition of the Virtual Component Characteristics
  *
- *  @note: Some attributes may not be applicable depending on the corresponding real component. 
+ *  @note: Some attributes may not be applicable depending on the corresponding real component.
  *         Non-applicable values are either represented as:
- *         -1                      (for attributes of type long or string) or 
+ *         -1                      (for attributes of type long or string) or
  *         nonApplicableValue      (for attributes of enumerated types).
  */
 
@@ -50,9 +55,9 @@ module Characteristics
 
         /** Component identification for use by system manager.
             This identification gives a more precise definition of the component, e.g. ATB-PRINTER-BIN1
-        */        
+        */
         readonly attribute string realComponentIdentification;
-        
+
         /** Describes whether the firmware can be updated or not */
         readonly attribute boolean downloadableFirmware;
 
@@ -72,7 +77,7 @@ module Characteristics
     /** Common Characteristic definition */
     interface MediaType
     {
-        /** Definition of media types */       
+        /** Definition of media types */
         enum MediaTypeDef
         {
           nonApplicableMediaType, /**< Non applicable characteristic value */
@@ -81,22 +86,22 @@ module Characteristics
           Chip,                   /**< Documents with a chip like RF-Baggage tags */
           Printed,                /**< Any printed document (OCR/BarCode/Plain paper) */
           JIS                     /**< JIS cards */
-        };                
+        };
 
-        /** Attribute containing one media type */        
+        /** Attribute containing one media type */
         readonly attribute MediaTypeDef type;
-    };                    
+    };
 
     /** Definition of the list of media types */
     typedef sequence <MediaType> MediaTypeListDef;
-    
+
     /** Common Characteristic definition */
         interface MediaTypeList
     {
-        /** List of media types */        
+        /** List of media types */
         readonly attribute MediaTypeListDef mtList;
     };
-    
+
     /** Common Characteristic definition */
     interface Location
     {
@@ -106,23 +111,23 @@ module Characteristics
         {
           nonApplicableImageType, /**< Non applicable characteristic value */
 
-          notAvailable,           /**< no image available */ 
-          BMP,                    /**< Microsoft bitmap file */ 
+          notAvailable,           /**< no image available */
+          BMP,                    /**< Microsoft bitmap file */
           JPEG,                   /**< JPEG file */
           PNG,                    /**< Portable network graphics file */
-          Flash                   /**< Macromedia flash file */ 
-        };                
+          Flash                   /**< Macromedia flash file */
+        };
 
-        /** URL to location image */        
+        /** URL to location image */
         readonly attribute string Map;
-        
-        /** The type of the image as specified above */        
+
+        /** The type of the image as specified above */
         readonly attribute ImageType mapType;
 
-        /** URL to usage image/animation */        
+        /** URL to usage image/animation */
         readonly attribute string howTo;
 
-        /** The type of the image/animation as specified above */        
+        /** The type of the image/animation as specified above */
         readonly attribute ImageType howToType;
 
         /** Definition of where to find components */
@@ -134,14 +139,14 @@ module Characteristics
             inArea                     /**< device is located outside the kiosk */
         };
 
-        /** Where to find the component */        
+        /** Where to find the component */
         readonly attribute LocationType componentLocation;
     };
 
     /** Common Characteristic definition */
     interface ComponentFonts
     {
-        /** CUSS supported barcodes */        
+        /** CUSS supported barcodes */
         enum BarcodeStandard
         {
           nonApplicableBarcodeStandard, /**< Non applicable characteristic value */
@@ -151,10 +156,10 @@ module Characteristics
           Code2of5                      /**< Barcode definition */
         };
 
-        /** specifies which of the above standards was used */        
+        /** specifies which of the above standards was used */
         readonly attribute BarcodeStandard usedStandard;
 
-        /** Specification of a single font */        
+        /** Specification of a single font */
         struct FontSpec
         {
           string         fontName;          /**< Name of the font */
@@ -172,10 +177,10 @@ module Characteristics
           long           characterLength;   /**< Font attribute (0 = variable length, n = fixed length) */
         };
 
-        /** FontList declaration */        
+        /** FontList declaration */
         typedef sequence<FontSpec> FontList;
 
-        /** Fonts available from this component */        
+        /** Fonts available from this component */
         readonly attribute FontList Fonts;
     };
 
@@ -197,16 +202,16 @@ module Characteristics
         readonly attribute long AllmostEmptyLevel;
 
         /** Shows the current number of documents in the bin.
-         *  This value is adjusted by the platform automatically 
+         *  This value is adjusted by the platform automatically
          *  after documents have been printed.
-         */        
+         */
         readonly attribute long currentNoOfDocuments;
     };
 
     /** Common Characteristic definition */
     interface IOMode
     {
-        /** MediaInput/MediaOutput supported modes */        
+        /** MediaInput/MediaOutput supported modes */
         enum InputOutputMode
         {
           nonApplicableInputOutputMode, /**< Non applicable characteristic value */
@@ -214,8 +219,8 @@ module Characteristics
           CheckIn,                      /**< Check-in mode for ATB printers */
           Revalidation                  /**< Revalidation mode for ATB printer */
         };
-        
-        /** The currently used mode for reading/writing. */                    
+
+        /** The currently used mode for reading/writing. */
         readonly attribute InputOutputMode mode;
 
         /**
@@ -223,30 +228,30 @@ module Characteristics
          *
          *  @param  appRef  A valid application reference
          *  @param  mode    The input/output mode to be used (check-in or Revalidation)
-         *  
+         *
          */
         returncodes::rc setIOMode(in types::reference appRef, in InputOutputMode mode);
     };
-    
+
     /** Capture characteristics */
     interface Capture : Bin, Manufacturer { };
 
-    /** DataInput characteristics 
+    /** DataInput characteristics
      *
      *  @note  In CUSS 1.0, supportedDataTypes attribute is missing.
-     *         The following data types are assumed :
-     *         string         as clockDataType for Clock device 
-     *         const long     as switchDataType for sensor devices 
+     *         The following data types are assumed:
+     *         string         as clockDataType for Clock device
+     *         const long     as switchDataType for sensor devices
      *
      */
-    interface DataInput : Manufacturer 
-    { 
-        /** time difference in hours relative to GMT 
+    interface DataInput : Manufacturer
+    {
+        /** time difference in hours relative to GMT
          *
          * @note   This applies only to Clock device
          *
-         */        
-        readonly attribute long timeZone; 
+         */
+        readonly attribute long timeZone;
     };
 
     /** DataOutput characteristics */
@@ -271,19 +276,19 @@ module Characteristics
     /** Feeder characteristics */
     interface Feeder : Bin, Manufacturer { };
 
-    /** Description of data types used by the MediaInput characteristics */    
+    /** Description of data types used by the MediaInput characteristics */
     enum DataType
     {
         nonApplicableDataType, /**< Non applicable characteristic value */
-            
+
         AEA,                   /**< CUSS - AEA data type*/
         MSG,                   /**< CUSS - MSG data type*/
         SVG                    /**< CUSS - SVG data type*/
     };
 
-    /** Definition of the list of data types */    
+    /** Definition of the list of data types */
     typedef sequence <DataType> DataTypeList;
-    
+
     /** MediaInput characteristics */
     interface MediaInput : IOMode, MediaTypeList, ComponentFonts, Location, Manufacturer
     {
@@ -300,17 +305,17 @@ module Characteristics
             PenScan                  /**< Standard barcode reader technology */
         };
 
-        /** The kind of reader which is handled by this component */        
+        /** The kind of reader which is handled by this component */
         readonly attribute ReaderType typeOfReader;
 
-        /** The list of data types supported by this component */        
+        /** The list of data types supported by this component */
         readonly attribute DataTypeList supportedDataTypes;
 
-        /** Describes the type of data stream that is supported by this component. 
+        /** Describes the type of data stream that is supported by this component.
    *
    *  @note   This attribute is not used in CUSS 1.0
-   *   
-         */                      
+   *
+         */
         readonly attribute DataType setupDataType;
 
         /** The number of tracks that can be read by the components.
@@ -329,21 +334,21 @@ module Characteristics
         {
           nonApplicableMediaType, /**< Non applicable characteristic value */
 
-          Ticket,                 /**< TAT- or ATB ticket */ 
+          Ticket,                 /**< TAT- or ATB ticket */
           BoardingPass,           /**< Boarding pass */
-          GeneralPurposeDoc,      /**< General purpose document */ 
-          BaggageTag,             /**< Baggage tag */ 
+          GeneralPurposeDoc,      /**< General purpose document */
+          BaggageTag,             /**< Baggage tag */
           InsertedDoc,            /**< Document inserted by the user */
           Card,                   /**< Any type of card */
-          BoardingPassFirst,      /**< ATB1 or ATB2 boarding passes for first Class */
-          BoardingPassBusiness,   /**< ATB1 or ATB2 boarding passes for business class*/
-          BoardingPassEconomy     /**< ATB1 or ATB2 boarding passes for economy class*/
+          BoardingPassFirst,      /**< ATB1 or ATB2 boarding passes for first class; materna extension  */
+          BoardingPassBusiness,   /**< ATB1 or ATB2 boarding passes for business class; materna extension */
+          BoardingPassEconomy     /**< ATB1 or ATB2 boarding passes for economy class; materna extension */
         };                
 
-        /** Attribute containing the media type */        
+        /** Attribute containing the media type */
         readonly attribute MediaType type;
 
-        /** The list of data types supported by this component */        
+        /** The list of data types supported by this component */
         readonly attribute DataTypeList supportedDataTypes;
 
         /** Size of the internal data buffer */
@@ -362,11 +367,11 @@ module Characteristics
         /** The maximum length of a document measured in MilliMeters */
         readonly attribute long maxDocumentLength;
 
-        /** Printing technology specification 
-         * 
+        /** Printing technology specification
+         *
          *  @note   attribute for mediaTransferType is missing in CUSS 1.0 IDL.
-         *          Instead, its value (DirectThermal or ThermalTransfer ) 
-         *          should be inserted somewhere inside the string representing 
+         *          Instead, its value (DirectThermal or ThermalTransfer )
+         *          should be inserted somewhere inside the string representing
          *          Manufacturer::ModelNumber attribute. This was agreed upon
          *          in order to keep CUSS 1.0 IDLs backward-compatible to 0.2.1.
          *
@@ -386,7 +391,7 @@ module Characteristics
         /** The maximum printing size in Y direction measured in MilliMeters */
         readonly attribute long maxPrintSizeY;
 
-        /** Printing orientations */        
+        /** Printing orientations */
         enum PrintOrientationDef
         {
           nonApplicablePrintOrientation, /**< Non applicable characteristic value */
@@ -394,8 +399,8 @@ module Characteristics
           Portrait,                      /**< printing orientation */
           Landscape                      /**< printing orientation */
         };
-        
-        /** The current print orientation. */                  
+
+        /** The current print orientation. */
         readonly attribute PrintOrientationDef printOrientation;
 
         /**
@@ -403,42 +408,42 @@ module Characteristics
          *
          *  @param  appRef      A valid application reference
          *  @param  orientation The printing orientation (Portrait or Landscape)
-         *  
+         *
          */
         returncodes::rc setPrintOrientation(in types::reference appRef, in PrintOrientationDef orientation);
     };
 
     /** Storage characteristics */
     interface Storage : Manufacturer
-    {   
+    {
 
-        /** Specifies the total size available for an application on a disk */        
+        /** Specifies the total size available for an application on a disk */
         readonly attribute long size;
 
-        /** Specifies the path to writeable/readable location 
+        /** Specifies the path to writeable/readable location
             (all path specifications end with a separator, e.g. slash or backslash)
-        */        
+        */
         readonly attribute string path;
     };
 
-    /** Display characteristics */    
+    /** Display characteristics */
     interface Display : Location, Manufacturer
     {
-      /** Resolution list definition */      
+      /** Resolution list definition */
       typedef sequence<long> ResolutionList;
 
-      /** List of supported screen resolutions 
+      /** List of supported screen resolutions
           \li  800 indicates a resolution of  800 by  600
           \li 1024 indicates a resolution of 1024 by  768
           \li 1280 indicates a resolution of 1280 by 1024
           \li 1600 indicates a resolution of 1600 by 1200
-          
-          @attention Currently only one screen resolution should be used if the 
+
+          @attention Currently only one screen resolution should be used if the
                      touch screen overlay is not automatically re-calibrated
-      */      
+      */
       readonly attribute ResolutionList displayResolution;
-      
-      /** Currently used screen resolution. */      
+
+      /** Currently used screen resolution. */
       readonly attribute long currentResolution;
 
       /**
@@ -450,31 +455,31 @@ module Characteristics
        */
       returncodes::rc setScreenResolution(in types::reference appRef, in long resolution);
 
-      /** Physical screen size measured in MilliMeter */      
+      /** Physical screen size measured in MilliMeter */
       readonly attribute long screenDiagonal;
     };
-    
+
     /** UserInput characteristics */
     interface UserInput : Location, Manufacturer { };
 
     /** UserOutput characteristics */
     interface UserOutput : Location, Manufacturer { };
-    
-    /** Network characteristics 
+
+    /** Network characteristics
         Standard attributes only for this component.
     */
     interface Network : Manufacturer { };
     /** Application characteristics */
-    interface Application : Manufacturer 
-    { 
-        /** Kiosk Application identification */        
+    interface Application : Manufacturer
+    {
+        /** Kiosk Application identification */
         readonly attribute types::akID identification;
 
-        /** Definition of the different address types */        
+        /** Definition of the different address types */
         enum ContactAddressType
         {
             nonApplicableContactAddress, /**< Non applicable characteristic value */
-            
+
             None,                        /**< No address available */
             Pager,                       /**< Page address */
             EMail,                       /**< EMail address */
@@ -485,24 +490,24 @@ module Characteristics
             URL,                         /**< Uniform Resource Locator (Internet support application) */
             IOR                          /**< Interoperable Object Reference (CORBA support application) */
         };
-        
-        /** Definition for a single contact field */        
+
+        /** Definition for a single contact field */
         struct Contact
         {
           string             name;    /**< Name of the person to contact */
           string             company; /**< Name of the company to contact */
-          string             note;    /**< Unspecific note on person or company */          
+          string             note;    /**< Unspecific note on person or company */
           string             address; /**< Address to be used */
           ContactAddressType type;    /**< Specifies the type of the address */
         };
 
-        /** Definition for the contact list */        
+        /** Definition for the contact list */
         typedef sequence <Contact> ContactList;
-        
-        /** The list of all available contacts */        
+
+        /** The list of all available contacts */
         readonly attribute ContactList allContacts;
-        
-        /** Specifies the first of IP-Port range that can be used by this application */        
+
+        /** Specifies the first of IP-Port range that can be used by this application */
         readonly attribute long firstIPPort;
 
         /** Specifies the last of IP-Port range that can be used by this application */
@@ -511,13 +516,50 @@ module Characteristics
 
     /** Scale characteristics */
 
-    interface Scale : Location, Manufacturer
+    interface BaggageScale
     {
-        /** the maximum weight of the baggage (in grams) */
+        /** The maximum weight of the baggage (in grams) */
         readonly attribute long maxWeight;
     };
-    
-    /** Conveyor characteristics */
+
+    /** ConveyorSBD characteristics
+    *  @note This is the new definition for CUSS 1.3. Older definitions are deprecated
+    *  from CUSS version 1.3 and will be completely removed in CUSS 1.5 latest.
+     */
+
+    interface ConveyorSBD : Location, Manufacturer
+    {
+        /** The maximum weight of the baggage (in grams) */
+        readonly attribute long maxWeight;
+
+        /** The maximum width of baggage (in millimeters) */
+        readonly attribute long maxWidth;
+
+        /** The maximum height of baggage (in millimeters) */
+        readonly attribute long maxHeight;
+
+        /** The maximum length of baggage (in millimeters) */
+        readonly attribute long maxLength;
+
+        /** The maximum number of bags a conveyor can handle */
+        readonly attribute long maxBags;
+
+      /** If true, conveyor has a security barrier (for user safety) */
+      readonly attribute boolean barrierCapable;
+
+      /** If true, conveyor system can detect intrusions at the front/user side (insertion) */
+      readonly attribute boolean userInterferenceCapable;
+
+      /** If true, conveyor system can detect intrusions behind the front/user side (verification/parking) */
+      readonly attribute boolean safetyIntrusionCapable;
+    };
+
+    /** Conveyor characteristics
+    *  @note This interface definition is deprecated from CUSS 1.3. Application-suppliers
+    * are encouraged to implement the ConveyorSBD characteristics interface
+    * for self-service baggage check-in support.
+    */
+
     interface Conveyor : Location, Manufacturer
     {
         /** Conveyor types */
@@ -554,7 +596,9 @@ module Characteristics
         /** the actual number of bags in the parking position */
         readonly attribute long currentNoOfBagsParked;
     };
+
+
 };
 
-#endif // CHARACTERISTICS 
- 
+#endif // CHARACTERISTICS
+
diff --git a/SelfServiceCommon/Massai/idl/Cuss/codes.idl b/SelfServiceCommon/Massai/idl/Cuss/codes.idl
index 847e5b75..de1ca11c 100644
--- a/SelfServiceCommon/Massai/idl/Cuss/codes.idl
+++ b/SelfServiceCommon/Massai/idl/Cuss/codes.idl
@@ -4,16 +4,15 @@
 //
 //  Purpose:   Definition of CUSS codes
 //
-//  Date:      02.03.2009
+//  Date:      17.06.2013
 //
 //  Version:   1.3
 //
-//  Author:    CUSS Management Group
+//  Author:    IATA Passenger Experience Management Group: CUWG CUSS-TSG
 //
-//  Copyright(c) 2003,2009 International Air Transport Association, All Rights Reserved
+//  Copyright(c) 2003,2009,2013 International Air Transport Association, All Rights Reserved
 //
-//  Note:      This IDL file is backward-compatible with that of CUSS 0.2.1 and CUSS 1.0
-//             Please refer to the CUSS 1.2 Technical Specification for more information
+//  Note:      Please refer to the CUSS 1.3 Technical Specification for more information
 //
 //  Changed:   Added baggage handling status codes (Nicolas Bruns, 29.06.2004)
 //
@@ -21,7 +20,13 @@
 //  @li V1.3
 //  @li Mantis 0025566: WeightScale: support standalone Scale (BaggageScale CUSS1.3)
 //  @li added CUSS1.3 dataStatus and statusCodes
-//---------------------------------------------------------------------------
+//
+//  @date 26.11.2013
+//  @li V1.3.1
+//  @li Mantis 0029957: ConveyorComp: CUSS1.3 Conveyor (without ConveyorAEA)
+//  @li use full CUSS1.3 IDL + Materna extension statuscodes: BAGGAGE_INTRUSION, BAGGAGE_INTRUSION_FRONT, BAGGAGE_INTRUSION_BACK, 
+//                 
+//----------------------------------------------------------------------------
 
 #ifndef CODES_IDL
 #define CODES_IDL
@@ -33,100 +38,105 @@
 module returncodes
 {
     typedef long rc; /**< Type definition for interface return codes */
-    
-    const long RC_OK                             =  0;  /**< Directive accepted */
-    const long RC_REFERENCE                      = -1;  /**< Invalid application reference */
-    const long RC_STATE                          = -2;  /**< Application is not in the correct state to invoke this directive */
-    const long RC_DENIED                         = -3;  /**< Access denied (application is not allowed to use that component) */
-    const long RC_PARAMETER                      = -4;  /**< Error in parameters (e.g. wrong event passed) */
-    const long RC_ANY_PARAMETER                  = -5;  /**< Error in CORBA::any type */
-    const long RC_LISTENER                       = -6;  /**< No listener set */
-    const long RC_SHARE                          = -7;  /**< Request in wrong share mode (component may be blocked by any application) */
-    const long RC_UNAUTHORIZED                   = -8;  /**< Unauthorized command within data stream (SVG or AEA) */
-    const long RC_ERROR                          = -9;  /**< Any error that is not covered by errors defined above */
-    const long RC_NOT_SUPPORTED                  = -10; /**< Directive is not supported (i.e. not implemented) */
+
+    const long RC_OK            =  0;  /**< Directive accepted */
+    const long RC_REFERENCE     = -1;  /**< Invalid application reference */
+    const long RC_STATE         = -2;  /**< Application is not in the correct state to invoke this directive */
+    const long RC_DENIED        = -3;  /**< Access denied (application is not allowed to use that component) */
+    const long RC_PARAMETER     = -4;  /**< Error in parameters (e.g. wrong event passed) */
+    const long RC_ANY_PARAMETER = -5;  /**< Error in CORBA::any type */
+    const long RC_LISTENER      = -6;  /**< No listener set */
+    const long RC_SHARE         = -7;  /**< Request in wrong share mode (component may be blocked by any application) */
+    const long RC_UNAUTHORIZED  = -8;  /**< Unauthorized command within data stream (SVG or AEA) */
+    const long RC_ERROR         = -9;  /**< Any error that is not covered by errors defined above */
+    const long RC_NOT_SUPPORTED = -10; /**< Directive is not supported (i.e. not implemented) */
 };
 
 /** Data related states */
 
 module datastatus
 {
-    const long DS_OK                             = 0; /**< Data is OK */
-    const long DS_CORRUPTED                      = 1; /**< Data is corrupted */
-    const long DS_INCOMPLETE                     = 2; /**< Data is incomplete */
-    const long DS_ZEROLENGTH                     = 3; /**< Data is of length zero */
-
-    const long DS_DOCUMENT_AUTHENTICATION_FAILED = 4; /**< Authentication of document data failed */
-    const long DS_INVALID                        = 5; /**< Document read but a security feature is missing */
-    const long DS_MISMATCH                       = 6; /**< Document read but data inconsistent with security feature */
-
-    const long DS_TYPES_FOID_ISO                 = 100;   /** ISO track data with FOID Data truncation */
-    const long DS_TYPES_PAYMENT_ISO              = 200;   /** ISO track data without truncation */
-    const long DS_TYPES_DISCRETIONARY_ISO        = 300;   /** ISO track data with DISCRETIONARY Data truncation */
-
-    const long DS_TYPES_FOID_JIS2                = 14100; /** JIS-2 track data with FOID Data truncation */
-    const long DS_TYPES_PAYMENT_JIS2             = 14200; /** JIS-2 track data without truncation */
-    const long DS_TYPES_DISCRETIONARY_JIS2       = 14300; /** JIS-2 track data with DISCRETIONARY Data truncation */
-
-    const long DS_TYPES_ISO                      = 0;     /** ISO encoded data */
-    const long DS_TYPES_VING                     = 1000;  /** VING encoded data */
-    const long DS_TYPES_TESSA                    = 2000;  /** TESSA encoded data */
-    const long DS_TYPES_SAFLOK                   = 3000;  /** SAFLOK encoded data */
-    const long DS_TYPES_TIMELOX                  = 4000;  /** TIMELOC encoded data */
-    const long DS_TYPES_KABA_ILCO                = 5000;  /** KABA iLco encoded data */
-    const long DS_TYPES_KABA_ILCO_FOLIO          = 6000;  /** KABA iLco (folio) encoded data */
-
-    const long DS_TYPES_IMAGE_IR                 = 7000;  /* Infrared image */
-    const long DS_TYPES_IMAGE_VIS                = 8000;  /* Visible image */
-    const long DS_TYPES_IMAGE_UV                 = 9000;  /* Ultraviolet image */
-    const long DS_TYPES_IMAGE_PHOTO              = 10000; /* Photo image */
-    const long DS_TYPES_IMAGE_COAX               = 11000; /* Coaxial image */
-    const long DS_TYPES_CODELINE                 = 12000; /* Codeline data */
-    const long DS_TYPES_BARCODE                  = 13000; /* Barcode data */
-    const long DS_TYPES_MIWA                     = 14000; /* Miwa data */
-    const long DS_TYPES_JIS2                     = 14000; /* JIS2 data */
-
-    const long DS_TYPES_SCAN_PDF417              = 15000; /* PDF417 2D barcode */
-    const long DS_TYPES_SCAN_AZTEC               = 15100; /* Aztec 2D barcode */
-    const long DS_TYPES_SCAN_DMATRIX             = 15200; /* Datamatrix 2D barcode */
-    const long DS_TYPES_SCAN_QR                  = 15300; /* QR Code 2D barcode */
-    const long DS_TYPES_SCAN_CODE39              = 15400; /* Code39     1D barcode */
-    const long DS_TYPES_SCAN_CODE128             = 15500; /* Code128    1D barcode */
-    const long DS_TYPES_SCAN_CODE2OF5            = 15600; /* Code2of5   1D barcode */
-
-    const long DS_TYPES_ISO7816                  = 16000; /* communication protocols for PICC/RFID/NFC devices */
-
-    const long DS_TYPES_PRINT_2S_PAGE            = 16100; /* 2-Sided Single-page printing */
-    const long DS_TYPES_PRINT_2S_MULTI           = 16200; /* 2-Sided Multi-page printing */
-    const long DS_TYPES_PRINT_PDF                = 16300; /* Adobe PDF print format */
-
-    const long DS_TYPES_MIFARE                   = 17000; /* communication protocols for PICC/RFID/NFC devices */
-    const long DS_TYPES_SUICA                    = 17010; /* communication protocols for PICC/RFID/NFC devices */
-
-    const long DS_TYPES_ISO15961                 = 18000; /* IATA RFID baggage tag devices */
-    const long DS_TYPES_RP1745                   = 18010; /* IATA Baggage Service Messages Format */
-    const long DS_TYPES_WEIGHT                   = 18020; /* Baggage Weight from Scale or Conveyor */
-
-    const long DS_TYPES_EPASSPORT_DG1            = 20100; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG2            = 20200; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG3            = 20300; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG4            = 20400; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG5            = 20500; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG6            = 20600; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG7            = 20700; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG8            = 20800; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG9            = 20900; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG10           = 21000; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG11           = 21100; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG12           = 21200; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG13           = 21300; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG14           = 21400; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG15           = 21500; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG16           = 21600; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG17           = 21700; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG18           = 21800; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG19           = 21900; /* e-Passport format */
-    const long DS_TYPES_EPASSPORT_DG20           = 22000; /* e-Passport format */
+    const long DS_OK                             = 0;     /**< Data is OK */
+    const long DS_CORRUPTED                      = 1;     /**< Data is corrupted */
+    const long DS_INCOMPLETE                     = 2;     /**< Data is incomplete */
+    const long DS_ZEROLENGTH                     = 3;     /**< Data is of length zero */
+
+    const long DS_DOCUMENT_AUTHENTICATION_FAILED = 4;     /**< Authentication of document data failed */
+    const long DS_INVALID                        = 5;     /**< Document read but a security feature is missing */
+    const long DS_MISMATCH                       = 6;     /**< Document read but data inconsistent with security feature */
+
+    const long DS_TYPES_FOID_ISO                 = 100;   /**< ISO track data with FOID Data truncation */
+    const long DS_TYPES_PAYMENT_ISO              = 200;   /**< ISO track data without truncation */
+    const long DS_TYPES_DISCRETIONARY_ISO        = 300;   /**< ISO track data with DISCRETIONARY Data truncation */
+
+    const long DS_TYPES_FOID_JIS2                = 14100; /**< JIS-2 track data with FOID Data truncation */
+    const long DS_TYPES_PAYMENT_JIS2             = 14200; /**< JIS-2 track data without truncation */
+    const long DS_TYPES_DISCRETIONARY_JIS2       = 14300; /**< JIS-2 track data with DISCRETIONARY Data truncation */
+
+    const long DS_TYPES_ISO                      = 0;     /**< ISO encoded data */
+    const long DS_TYPES_VING                     = 1000;  /**< VING encoded data */
+    const long DS_TYPES_TESSA                    = 2000;  /**< TESSA encoded data */
+    const long DS_TYPES_SAFLOK                   = 3000;  /**< SAFLOK encoded data */
+    const long DS_TYPES_TIMELOX                  = 4000;  /**< TIMELOC encoded data */
+    const long DS_TYPES_KABA_ILCO                = 5000;  /**< KABA iLco encoded data */
+    const long DS_TYPES_KABA_ILCO_FOLIO          = 6000;  /**< KABA iLco (folio) encoded data */
+
+    const long DS_TYPES_IMAGE_IR                 = 7000;  /**< Infrared image */
+    const long DS_TYPES_IMAGE_VIS                = 8000;  /**< Visible image */
+    const long DS_TYPES_IMAGE_UV                 = 9000;  /**< Ultraviolet image */
+    const long DS_TYPES_IMAGE_PHOTO              = 10000; /**< Photo image */
+    const long DS_TYPES_IMAGE_COAX               = 11000; /**< Coaxial image */
+    const long DS_TYPES_CODELINE                 = 12000; /**< Codeline data */
+    const long DS_TYPES_BARCODE                  = 13000; /**< Barcode data */
+    const long DS_TYPES_MIWA                     = 14000; /**< Miwa data */
+    const long DS_TYPES_JIS2                     = 14000; /**< JIS2 data */
+
+    const long DS_TYPES_SCAN_PDF417              = 15000; /**< PDF417     2D barcode */
+    const long DS_TYPES_SCAN_AZTEC               = 15100; /**< Aztec      2D barcode */
+    const long DS_TYPES_SCAN_DMATRIX             = 15200; /**< Datamatrix 2D barcode */
+    const long DS_TYPES_SCAN_QR                  = 15300; /**< QR Code    2D barcode */
+    const long DS_TYPES_SCAN_CODE39              = 15400; /**< Code39     1D barcode */
+    const long DS_TYPES_SCAN_CODE128             = 15500; /**< Code128    1D barcode */
+    const long DS_TYPES_SCAN_CODE2OF5            = 15600; /**< Code2of5   1D barcode */
+
+    const long DS_TYPES_ISO7816                  = 16000; /**< Communication protocols for PICC/RFID/NFC devices */
+
+    const long DS_TYPES_PRINT_2S_PAGE            = 16100; /**< 2-Sided Single-page printing */
+    const long DS_TYPES_PRINT_2S_MULTI           = 16200; /**< 2-Sided Multi-page printing */
+    const long DS_TYPES_PRINT_PDF                = 16300; /**< Adobe PDF print format */
+
+    const long DS_TYPES_MIFARE                   = 17000; /**< Communication protocols for PICC/RFID/NFC devices */
+    const long DS_TYPES_SUICA                    = 17010; /**< Communication protocols for PICC/RFID/NFC devices */
+
+    const long DS_TYPES_ISO15961                 = 18000; /**< IATA RFID baggage tag devices */
+    const long DS_TYPES_RP1745                   = 18010; /**< IATA Baggage Service Messages Format */
+    const long DS_TYPES_WEIGHT                   = 18020; /**< Baggage Weight from Scale or Conveyor */
+    const long DS_TYPES_HEAVYTAG                 = 18030; /**< Special Heavy Tag for baggage */
+    const long DS_TYPES_SBDAEA                   = 18040; /**< AEA-SBD control language */
+    const long DS_TYPES_SBDCUSS                  = 18050; /**< CUSS-SBD control language */
+
+    const long DS_TYPES_EPASSPORT_DG1            = 20100; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG2            = 20200; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG3            = 20300; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG4            = 20400; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG5            = 20500; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG6            = 20600; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG7            = 20700; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG8            = 20800; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG9            = 20900; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG10           = 21000; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG11           = 21100; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG12           = 21200; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG13           = 21300; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG14           = 21400; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG15           = 21500; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG16           = 21600; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG17           = 21700; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG18           = 21800; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG19           = 21900; /**< e-Passport format */
+    const long DS_TYPES_EPASSPORT_DG20           = 22000; /**< e-Passport format */
+
+    const long DS_TYPES_EPAYMENT                 = 23000; /**< E-Payment: CuPaySchema.xsd */
 };
 
 /**
@@ -137,71 +147,76 @@ module datastatus
 module eventcodes
 {
     // virtual component state transition codes
-    
-    const long EC_OK                             = 0;  /**< Used in the returned event for calls to suspendAll, resumeAll or stopAll directives */
-    const long EVENTHANDLING_READY               = 1; /**< Used for soft conditions and Ok only */
-    const long UNAVAILABLE_RELEASED_PLATFORM     = 2; /**< Released by any authorized platform component */
-    const long EVENTHANDLING_UNAVAILABLE         = 3; /**< Caused by a hard condition */
-    const long UNAVAILABLE_RELEASED_APPLICATION  = 4; /**< Component released by the application */
-    const long READY_RELEASED_APPLICATION        = 5; /**< Component released by the application */
-    const long READY_RELEASED_PLATFORM           = 6; /**< Released by any authorized platform component */
-    const long RELEASED_READY                    = 7; /**< State change caused by a call to <i>acquire</i> */
-    const long RELEASED_UNAVAILABLE              = 8; /**< State change caused by a call to <i>acquire</i> */
+
+    const long EC_OK                            = 0; /**< Used in the returned event for calls to suspendAll, resumeAll or stopAll directives */
+    const long EVENTHANDLING_READY              = 1; /**< Used for soft conditions and Ok only */
+    const long UNAVAILABLE_RELEASED_PLATFORM    = 2; /**< Released by any authorized platform component */
+    const long EVENTHANDLING_UNAVAILABLE        = 3; /**< Caused by a hard condition */
+    const long UNAVAILABLE_RELEASED_APPLICATION = 4; /**< Component released by the application */
+    const long READY_RELEASED_APPLICATION       = 5; /**< Component released by the application */
+    const long READY_RELEASED_PLATFORM          = 6; /**< Released by any authorized platform component */
+    const long RELEASED_READY                   = 7; /**< State change caused by a call to <i>acquire</i> */
+    const long RELEASED_UNAVAILABLE             = 8; /**< State change caused by a call to <i>acquire</i> */
 
     // application state transition codes
 
-    const long INITIALIZE_DISABLED               = 101; /**< State transition DISABLE */
-    const long AVAILABLE_DISABLED                = 102; /**< State transition DISABLE */
-    const long ACTIVE_DISABLED                   = 103; /**< State transition DISABLE */
-    const long UNAVAILABLE_AVAILABLE             = 104; /**< State transition WAIT */
-    const long AVAILABLE_ACTIVE                  = 105; /**< State transition ACTIVATE*/
-    const long ACTIVE_AVAILABLE                  = 106; /**< State transition WAIT */
-    const long INITIALIZE_STOPPED_STOP           = 107; /**< State transition STOP */
-    const long AVAILABLE_STOPPED_STOP            = 108; /**< State transition STOP */
-    const long ACTIVE_STOPPED_STOP               = 109; /**< State transition STOP */
-    const long SUSPENDED_STOPPED_STOP            = 110; /**< State transition STOP */
-    const long DISABLED_STOPPED_STOP             = 111; /**< State transition STOP */
-    const long SUSPENDED_AVAILABLE               = 112; /**< State transition RESUME*/
-    const long AVAILABLE_SUSPENDED               = 113; /**< State transition SUSPEND */
-    const long INITIALIZE_STOPPED_RESTART        = 114; /**< State transition RESTART */
-    const long AVAILABLE_STOPPED_RESTART         = 115; /**< State transition RESTART */
-    const long ACTIVE_STOPPED_RESTART            = 116; /**< State transition RESTART */
-    const long DISABLED_STOPPED_RESTART          = 117; /**< Not used in CUSS 1.0. */
-    const long SUSPENDED_STOPPED_RESTART         = 118; /**< State transition RESTART */
-    const long STOPPED_INITIALIZE                = 119; /**< State transition LOAD */
-    const long DISABLED_INITIALIZE               = 120; /**< State transition LOAD */
-    const long UNAVAILABLE_STOPPED_RESTART       = 121; /**< State transition RESTART */
-    const long UNAVAILABLE_DISABLED              = 122; /**< State transition DISABLE */
-    const long UNAVAILABLE_SUSPENDED             = 123; /**< State transition SUSPEND */
-    const long INITIALIZE_SUSPENDED              = 124; /**< Not used in CUSS 1.0 */
-    const long SUSPENDED_DISABLED                = 125; /**< Not used in CUSS 1.0 */
-    const long SUSPENDED_INITIALIZE              = 126; /**< Not used in CUSS 1.0 */
-    const long SUSPENDED_UNAVAILABLE             = 127; /**< State transition RESUME */
-    const long UNAVAILABLE_STOPPED_STOP          = 128; /**< State transition STOP */
-    const long INITIALIZE_UNAVAILABLE            = 129; /**< State transition CHECK */
-    const long AVAILABLE_UNAVAILABLE             = 130; /**< State transition CHECK */
-    const long DISABLED_SUSPENDED                = 131; /**< Not used in CUSS 1.0 */
+    const long INITIALIZE_DISABLED              = 101; /**< State transition DISABLE */
+    const long AVAILABLE_DISABLED               = 102; /**< State transition DISABLE */
+    const long ACTIVE_DISABLED                  = 103; /**< State transition DISABLE */
+    const long UNAVAILABLE_AVAILABLE            = 104; /**< State transition WAIT */
+    const long AVAILABLE_ACTIVE                 = 105; /**< State transition ACTIVATE*/
+    const long ACTIVE_AVAILABLE                 = 106; /**< State transition WAIT */
+    const long INITIALIZE_STOPPED_STOP          = 107; /**< State transition STOP */
+    const long AVAILABLE_STOPPED_STOP           = 108; /**< State transition STOP */
+    const long ACTIVE_STOPPED_STOP              = 109; /**< State transition STOP */
+    const long SUSPENDED_STOPPED_STOP           = 110; /**< State transition STOP */
+    const long DISABLED_STOPPED_STOP            = 111; /**< State transition STOP */
+    const long SUSPENDED_AVAILABLE              = 112; /**< State transition RESUME*/
+    const long AVAILABLE_SUSPENDED              = 113; /**< State transition SUSPEND */
+    const long INITIALIZE_STOPPED_RESTART       = 114; /**< State transition RESTART */
+    const long AVAILABLE_STOPPED_RESTART        = 115; /**< State transition RESTART */
+    const long ACTIVE_STOPPED_RESTART           = 116; /**< State transition RESTART */
+    const long DISABLED_STOPPED_RESTART         = 117; /**< Not used in CUSS 1.0. */
+    const long SUSPENDED_STOPPED_RESTART        = 118; /**< State transition RESTART */
+    const long STOPPED_INITIALIZE               = 119; /**< State transition LOAD */
+    const long DISABLED_INITIALIZE              = 120; /**< State transition LOAD */
+    const long UNAVAILABLE_STOPPED_RESTART      = 121; /**< State transition RESTART */
+    const long UNAVAILABLE_DISABLED             = 122; /**< State transition DISABLE */
+    const long UNAVAILABLE_SUSPENDED            = 123; /**< State transition SUSPEND */
+    const long INITIALIZE_SUSPENDED             = 124; /**< Not used in CUSS 1.0 */
+    const long SUSPENDED_DISABLED               = 125; /**< Not used in CUSS 1.0 */
+    const long SUSPENDED_INITIALIZE             = 126; /**< Not used in CUSS 1.0 */
+    const long SUSPENDED_UNAVAILABLE            = 127; /**< State transition RESUME */
+    const long UNAVAILABLE_STOPPED_STOP         = 128; /**< State transition STOP */
+    const long INITIALIZE_UNAVAILABLE           = 129; /**< State transition CHECK */
+    const long AVAILABLE_UNAVAILABLE            = 130; /**< State transition CHECK */
+    const long DISABLED_SUSPENDED               = 131; /**< Not used in CUSS 1.0 */
 
     // Application/component state codes
 
-    const long RELEASED                          = 201; /**< State RELEASED (peripheral) */
-    const long UNAVAILABLE                       = 202; /**< State UNAVAILABLE (peripheral & application) */
-    const long READY                             = 203; /**< State READY (peripheral) */
-    const long STOPPED                           = 204; /**< State STOPPED (application) */
-    const long SUSPENDED                         = 205; /**< State SUSPENDED (application) */
-    const long DISABLED                          = 206; /**< State DISABLED (application) */
-    const long INITIALIZE                        = 207; /**< State INITIALIZE (application) */
-    const long AVAILABLE                         = 208; /**< State AVAILABLE (application) */
-    const long ACTIVE                            = 209; /**< State ACTIVE (application) */
-    const long BUSY                              = 210; /**< Transient state BUSY (peripheral) */
-
+    const long RELEASED                         = 201; /**< State RELEASED (peripheral) */
+    const long UNAVAILABLE                      = 202; /**< State UNAVAILABLE (peripheral & application) */
+    const long READY                            = 203; /**< State READY (peripheral) */
+    const long STOPPED                          = 204; /**< State STOPPED (application) */
+    const long SUSPENDED                        = 205; /**< State SUSPENDED (application) */
+    const long DISABLED                         = 206; /**< State DISABLED (application) */
+    const long INITIALIZE                       = 207; /**< State INITIALIZE (application) */
+    const long AVAILABLE                        = 208; /**< State AVAILABLE (application) */
+    const long ACTIVE                           = 209; /**< State ACTIVE (application) */
+    const long BUSY                             = 210; /**< Transient state BUSY (peripheral) */
 
     // Additional codes for CUSS 1.2
 
-    const long ACTIVE_ACTIVE                     = 132; /**< State transition ACTIVE (persistent) */
-    const long STATE_EXPLANATION                 = 1000;/**< Tell CLA why application is in current state */
-    const long ACTIVE_TRANSFER                   = 1001;/**< Request CLA transver ACTIVE to new application */
-    const long TRANSACTION_EXPLANATION           = 1002;/**< Tell CLA what happened in most recent transaction*/
+    const long ACTIVE_ACTIVE                    = 132;  /**< State transition ACTIVE (persistent) */
+    const long STATE_EXPLANATION                = 1000; /**< Tell CLA why application is in current state */
+    const long ACTIVE_TRANSFER                  = 1001; /**< Request CLA transfer ACTIVE to new application */
+    const long TRANSACTION_EXPLANATION          = 1002; /**< Tell CLA what happened in most recent transaction */
+    const long VERSION_EXPLANATION              = 1003; /**< Tell CLA the version string for the application */
+
+    // Additional codes for CUSS 1.3
+
+    const long ACTIVE_UNAVAILABLE               = 133;  /**< Go unavailable while active in a transaction */
+    const long UPDATE_REQUEST                   = 1004; /**< Tell CLA the application wishes to update */
 
 };
 
@@ -212,88 +227,95 @@ module eventcodes
 
 module statuscodes
 {
-    const long OK                                =   0; /**< public (private for solicited events) */
-    const long TIMEOUT                           =   1; /**< private (directive related) */
-    const long WRONG_STATE                       =   2; /**< private + platform */
-    const long CANCELLED                         =   3; /**< private */
-    const long SOFTWARE_ERROR                    =   4; /**< private + platform */
-    const long ALMOST_OUT_OF_TIME                =   5; /**< NOT used in CUSS 1.0 */
-    const long OUT_OF_SEQUENCE                   =   6; /**< private */
-
-    const long MEDIA_JAMMED                      = 101; /**< public */
-    const long MEDIA_MISPLACED                   = 102; /**< private + platform (platform only for userless classes) */
-    const long MEDIA_PRESENT                     = 103; /**< private */
-    const long MEDIA_ABSENT                      = 104; /**< private */
-    const long MEDIA_HIGH                        = 105; /**< public */
-    const long MEDIA_FULL                        = 106; /**< public */
-    const long MEDIA_LOW                         = 107; /**< public */
-    const long MEDIA_EMPTY                       = 108; /**< public */
-    const long MEDIA_DAMAGED                     = 109; /**< public */
-    const long MEDIA_INCOMPLETELY_INSERTED       = 110; /**< private */
+    const long OK                          =   0; /**< <b>Scope:</b> public (private for solicited events) */
+    const long TIMEOUT                     =   1; /**< <b>Scope:</b> private (directive related) */
+    const long WRONG_STATE                 =   2; /**< <b>Scope:</b> private + platform */
+    const long CANCELLED                   =   3; /**< <b>Scope:</b> private */
+    const long SOFTWARE_ERROR              =   4; /**< <b>Scope:</b> private + platform */
+    const long ALMOST_OUT_OF_TIME          =   5; /**< @note NOT used in CUSS 1.0 */
+    const long OUT_OF_SEQUENCE             =   6; /**< <b>Scope:</b> private */
+
+    const long MEDIA_JAMMED                = 101; /**< <b>Scope:</b> public */
+    const long MEDIA_MISPLACED             = 102; /**< <b>Scope:</b> private + platform (platform only for userless classes) */
+    const long MEDIA_PRESENT               = 103; /**< <b>Scope:</b> private */
+    const long MEDIA_ABSENT                = 104; /**< <b>Scope:</b> private */
+    const long MEDIA_HIGH                  = 105; /**< <b>Scope:</b> public */
+    const long MEDIA_FULL                  = 106; /**< <b>Scope:</b> public */
+    const long MEDIA_LOW                   = 107; /**< <b>Scope:</b> public */
+    const long MEDIA_EMPTY                 = 108; /**< <b>Scope:</b> public */
+    const long MEDIA_DAMAGED               = 109; /**< <b>Scope:</b> public */
+    const long MEDIA_INCOMPLETELY_INSERTED = 110; /**< <b>Scope:</b> private */
 
     // definitions for baggage belt
-    const long BAGGAGE_FULL                      = 120; /**< public */
-    const long BAGGAGE_UNDETECTED                = 121; /**< private + platform */
-    const long BAGGAGE_PRESENT                   = 122; /**< private */
-    const long BAGGAGE_ABSENT                    = 123; /**< private */
-    const long BAGGAGE_OVERSIZED                 = 124; /**< private + platform */
-    const long BAGGAGE_ILLICIT_WEIGHT_CHANGE     = 125; /**< private */
-    const long BAGGAGE_READY_FOR_TAKE_IN         = 126; /**< public */
-    const long BAGGAGE_TOO_MANY_BAGS             = 127; /**< private + platform */
-    const long BAGGAGE_DELIVER                   = 128; /**< private */
-    const long BAGGAGE_UNEXPECTED_BAG            = 129; /**< private + platform */
-    const long BAGGAGE_TOO_HIGH                  = 130; /**< private + platform */
-    const long BAGGAGE_TOO_LONG                  = 131; /**< private + platform */
-    const long BAGGAGE_TOO_FLAT                  = 132; /**< private + platform */
-    const long BAGGAGE_TOO_SHORT                 = 133; /**< private + platform */
-    const long BAGGAGE_PARKED                    = 134; /**< private */
-    const long BAGGAGE_INVALID_DATA              = 135; /**< private + platform */
-    const long BAGGAGE_TRANSPORT_FAILED          = 136; /**< private + platform */
-    const long BAGGAGE_WEIGHT_OUT_OF_RANGE       = 137; /**< private + platform */
-    const long BAGGAGE_JAMMED                = 138; /**< private + platform  */
-    const long BAGGAGE_EMERGENCY_STOP        = 139; /**< private + platform  */
-    const long BAGGAGE_RESTLESS              = 140; /**< private + platform  */
-    const long BAGGAGE_INTRUSION             = 141; /**< private + platform  */
-    const long BAGGAGE_INTRUSION_FRONT       = 142; /**< private + platform  */
-    const long BAGGAGE_INTRUSION_BACK        = 143; /**< private + platform  */
-    const long BAGGAGE_TRANSPORT_BUSY        = 144; /**< private + platform  */
-
-    const long FORMAT_ERROR                      = 201; /**< private + platform (platform only for output classes) */
-    const long LENGTH_ERROR                      = 202; /**< private + platform (platform only for output classes) */
-    const long DATA_MISSING                      = 203; /**< private + platform (platform only for output classes) */
-    const long PHYSICAL_ERROR                    = 204; /**< NOT used in CUSS 1.0 */
-    const long DATA_PRESENT                      = 205; /**< private */
-
-    const long CONSUMABLES                       = 301; /**< public */
-    const long HARDWARE_ERROR                    = 302; /**< public */
-    const long CRITICAL_SOFTWARE_ERROR           = 303; /**< public */
-    const long NOT_REACHABLE                     = 304; /**< public */
-    const long NOT_RESPONDING                    = 305; /**< public */
-    const long THRESHOLD_ERROR                   = 306; /**< public */
-    const long THRESHOLD_USAGE                   = 307; /**< public */
-    const long CONFIGURATION_ERROR               = 308; /**< public */
-    const long SESSION_TIMEOUT                   = 309; /**< private + platform (application related) */
-    const long KILL_TIMEOUT                      = 310; /**< private + platform (application related) */
-
-    const long CUSS_MANAGER_REQUEST              = 801; /**< private + platform */
-    const long SP_SYSTEM_MANAGER_REQUEST         = 802; /**< private + platform */
-    const long AL_SYSTEM_MANAGER_REQUEST         = 803; /**< private + platform */
-    const long CL_APPLICATION_REQUEST            = 804; /**< private + platform */
-    const long AL_APPLICATION_REQUEST            = 805; /**< private + platform */
-
-    // base definition for application generated events (technical)                                                    
-    const long APPLICATION_TECHNICAL_FIRST       = 400; /**< private */
-    const long APPLICATION_TECHNICAL_LAST        = 499; /**< private */
-
-    // base definition for application generated events (security)                                                    
-    const long APPLICATION_SECURITY_FIRST        = 500; /**< private */
-    const long APPLICATION_SECURITY_LAST         = 599; /**< private */
-
-    // base definition for application generated events (business)                                                   
-    const long APPLICATION_BUSINESS_FIRST        = 900; /**< private */
-    const long APPLICATION_BUSINESS_LAST         = 999; /**< private */
+
+    const long BAGGAGE_FULL                  = 120; /**< <b>Scope:</b> public */
+    const long BAGGAGE_UNDETECTED            = 121; /**< <b>Scope:</b> private + platform */
+    const long BAGGAGE_PRESENT               = 122; /**< <b>Scope:</b> private */
+    const long BAGGAGE_ABSENT                = 123; /**< <b>Scope:</b> private */
+    const long BAGGAGE_OVERSIZED             = 124; /**< <b>Scope:</b> private + platform */
+    const long BAGGAGE_ILLICIT_WEIGHT_CHANGE = 125; /**< <b>Scope:</b> private @note Used only for Conveyor- not for new ConveyorSBD-Component, deprecated for CUSS 1.3 */
+    const long BAGGAGE_READY_FOR_TAKE_IN     = 126; /**< <b>Scope:</b> public @note Used only for Conveyor- not for new ConveyorSBD-Component, deprecated for CUSS 1.3 */
+    const long BAGGAGE_TOO_MANY_BAGS         = 127; /**< <b>Scope:</b> private + platform */
+    const long BAGGAGE_DELIVER               = 128; /**< <b>Scope:</b> private @note Used only for Conveyor- not for new ConveyorSBD-Component, deprecated for CUSS 1.3 */
+    const long BAGGAGE_UNEXPECTED_BAG        = 129; /**< <b>Scope:</b> private + platform */
+    const long BAGGAGE_TOO_HIGH              = 130; /**< <b>Scope:</b> private + platform */
+    const long BAGGAGE_TOO_LONG              = 131; /**< <b>Scope:</b> private + platform */
+    const long BAGGAGE_TOO_FLAT              = 132; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_TOO_SHORT             = 133; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_PARKED                = 134; /**< <b>Scope:</b> private @note Used only for Conveyor- not for new ConveyorSBD-Component, deprecated for CUSS 1.3 */
+    const long BAGGAGE_INVALID_DATA          = 135; /**< <b>Scope:</b> private + platform */
+    const long BAGGAGE_TRANSPORT_FAILED      = 136; /**< <b>Scope:</b> private + platform @note Used only for Conveyor- not for new ConveyorSBD-Component, deprecated for CUSS 1.3 */
+    const long BAGGAGE_WEIGHT_OUT_OF_RANGE   = 137; /**< <b>Scope:</b> private + platform */
+    const long BAGGAGE_JAMMED                = 138; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_EMERGENCY_STOP        = 139; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_RESTLESS              = 140; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_INTRUSION             = 141; /**< <b>Scope:</b> private + platform; materna extension */
+    const long BAGGAGE_INTRUSION_FRONT       = 142; /**< <b>Scope:</b> private + platform; materna extension */
+    const long BAGGAGE_INTRUSION_BACK        = 143; /**< <b>Scope:</b> private + platform; materna extension */
+    const long BAGGAGE_TRANSPORT_BUSY        = 144; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_MISTRACKED            = 145; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_UNEXPECTED_CHANGE     = 146; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_ACCEPTED              = 147; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_DELIVERED             = 148; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_INTERFERENCE_USER     = 149; /**< <b>Scope:</b> private + platform  */
+    const long BAGGAGE_INTRUSION_SAFETY      = 150; /**< <b>Scope:</b> private + platform  */
+
+    const long FORMAT_ERROR                = 201; /**< <b>Scope:</b> private + platform (platform only for output classes) */
+    const long LENGTH_ERROR                = 202; /**< <b>Scope:</b> private + platform (platform only for output classes) */
+    const long DATA_MISSING                = 203; /**< <b>Scope:</b> private + platform (platform only for output classes) */
+    const long PHYSICAL_ERROR              = 204; /**< @note NOT used in CUSS 1.0 */
+    const long DATA_PRESENT                = 205; /**< <b>Scope:</b> private */
+
+    const long CONSUMABLES                 = 301; /**< <b>Scope:</b> public */
+    const long HARDWARE_ERROR              = 302; /**< <b>Scope:</b> public */
+    const long CRITICAL_SOFTWARE_ERROR     = 303; /**< <b>Scope:</b> public */
+    const long NOT_REACHABLE               = 304; /**< <b>Scope:</b> public */
+    const long NOT_RESPONDING              = 305; /**< <b>Scope:</b> public */
+    const long THRESHOLD_ERROR             = 306; /**< <b>Scope:</b> public */
+    const long THRESHOLD_USAGE             = 307; /**< <b>Scope:</b> public */
+    const long CONFIGURATION_ERROR         = 308; /**< <b>Scope:</b> public */
+    const long SESSION_TIMEOUT             = 309; /**< <b>Scope:</b> private + platform (application related) */
+    const long KILL_TIMEOUT                = 310; /**< <b>Scope:</b> private + platform (application related) */
+
+    const long CUSS_MANAGER_REQUEST        = 801; /**< <b>Scope:</b> private + platform */
+    const long SP_SYSTEM_MANAGER_REQUEST   = 802; /**< <b>Scope:</b> private + platform */
+    const long AL_SYSTEM_MANAGER_REQUEST   = 803; /**< <b>Scope:</b> private + platform */
+    const long CL_APPLICATION_REQUEST      = 804; /**< <b>Scope:</b> private + platform */
+    const long AL_APPLICATION_REQUEST      = 805; /**< <b>Scope:</b> private + platform */
+
+    // base definition for application generated events (technical)
+    const long APPLICATION_TECHNICAL_FIRST = 400; /**< <b>Scope:</b> private */
+    const long APPLICATION_TECHNICAL_LAST  = 499; /**< <b>Scope:</b> private */
+
+    // base definition for application generated events (security)
+    const long APPLICATION_SECURITY_FIRST  = 500; /**< <b>Scope:</b> private */
+    const long APPLICATION_SECURITY_LAST   = 599; /**< <b>Scope:</b> private */
+
+    // base definition for application generated events (business)
+    const long APPLICATION_BUSINESS_FIRST  = 900; /**< <b>Scope:</b> private */
+    const long APPLICATION_BUSINESS_LAST   = 999; /**< <b>Scope:</b> private */
 };
 
 #endif // CODES_IDL
 
- 
+
diff --git a/SelfServiceCommon/Massai/idl/Cuss/comps.idl b/SelfServiceCommon/Massai/idl/Cuss/comps.idl
index c1356724..f3aa77d5 100644
--- a/SelfServiceCommon/Massai/idl/Cuss/comps.idl
+++ b/SelfServiceCommon/Massai/idl/Cuss/comps.idl
@@ -4,16 +4,15 @@
 //
 //  Purpose:   Interfaces to CUSS components
 //
-//  Date:      02.03.2009
+//  Date:      17.06.2013
 //
 //  Version:   1.3
 //
-//  Author:    CUSS Management Group
+//  Author:    IATA Passenger Experience Management Group: CUWG CUSS-TSG
 //
-//  Copyright(c) 2003,2009 International Air Transport Association, All Rights Reserved
+//  Copyright(c) 2003,2009,2013 International Air Transport Association, All Rights Reserved
 //
-//  Note:      This IDL file is backward-compatible with that of CUSS 0.2.1 and CUSS 1.0
-//             Please refer to the CUSS 1.2 Technical Specification for more information
+//  Note:      Please refer to the CUSS 1.3 Technical Specification for more information
 //
 //  Changed:   Added baggage handling support (Nicolas Bruns, 29.06.2004)
 //
@@ -21,6 +20,11 @@
 //  @li V1.3
 //  @li Mantis 0025566: WeightScale: support standalone Scale (BaggageScale CUSS1.3)
 //  @li added interface BaggageScale
+//
+//  @date 26.11.2013
+//  @li V1.3.1
+//  @li Mantis 0029957: ConveyorComp: CUSS1.3 Conveyor (without ConveyorAEA)
+//  @li use full CUSS1.3 IDL
 //----------------------------------------------------------------------------
 
 
@@ -32,7 +36,6 @@
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 ****************************************************************/
 
-
 #ifndef COMPS_IDL
 #define COMPS_IDL
 
@@ -42,36 +45,36 @@
 
 #pragma prefix "cuss.iata.org"
 
-/** 
- *  Definition of the interfaces to CUSS Components 
+/**
+ *  Definition of the interfaces to CUSS Components
  *
  * @note  If your version of the IDL compiler treats Component as a CORBA IDL identifier,
  *        you will need to escape it by prepending an underscore (_) to it , that is
  *        replace all occurrences of Component with _Component
  */
- 
+
 module Components
 {
     /**
      *  All components are derived from this interface
      *
-     */     
+     */
     interface Component { };
 
     /**
      *  All interfaces for peripherals are derived from this interface
-     */     
-    interface CUSSCntl : Component 
+     */
+    interface CUSSCntl : Component
     {
 
       /**
        *  Returns the state/status of the virtual component.
        *
        *  @param  to      Timeout value
-       *  @param  appRef  A valid application reference (token) 
+       *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
-       */     
+       *
+       */
       returncodes::rc query (in  types::timeout to,
                              in  types::reference appRef,
                              out types::Event e);
@@ -79,7 +82,7 @@ module Components
 
     /**
      *  Interfaces for virtual components that map to peripheral devices
-     */     
+     */
     interface Peripheral : CUSSCntl
     {
 
@@ -88,32 +91,32 @@ module Components
        *  The application can subscribe a specific listener associated to the acquired component.
        *
        *  @param  to      Timeout value
-       *  @param  appRef  A valid application reference (token) 
+       *  @param  appRef  A valid application reference (token)
        *  @param  ef      Specifies which events to subscribe to (event filter)
        *  @param  el      Specifies the event listener to be set for this component
        *  @param  elud    User data that is submitted with each event sent to the listener
        *  @param  e       Return value
-       *  
-       *  @note   As implementation of event filtering is not required in CUSS 1.0, 
-       *          event listener passed to acquire will be used as the receiver 
-       *          for all events related to this component. 
+       *
+       *  @note   As implementation of event filtering is not required in CUSS 1.0,
+       *          event listener passed to acquire will be used as the receiver
+       *          for all events related to this component.
        *
        */
-      returncodes::rc acquire (in  types::timeout to,          
-                               in  types::reference appRef,    
-                               in  types::evtAcquireFilter ef,  
-                               in  types::evtListener el,      
-                               in  types::correlation elud,                   
-                               out types::Event e);            
+      returncodes::rc acquire (in  types::timeout to,
+                               in  types::reference appRef,
+                               in  types::evtAcquireFilter ef,
+                               in  types::evtListener el,
+                               in  types::correlation elud,
+                               out types::Event e);
 
       /**
-       *  Makes the virtual component unavailable to the application and unsubscribes events 
+       *  Makes the virtual component unavailable to the application and unsubscribes events
        *  relative to the component.
        *
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc release (in  types::timeout to,
                                in  types::reference appRef,
@@ -123,10 +126,10 @@ module Components
        *  Set up the virtual component and its profile for the application.
        *
        *  @param  to      Timeout value
-       *  @param  appRef  A valid application reference (token) 
-       *  @param  ds      datastream for setting the component (e.g. PECTABS)
+       *  @param  appRef  A valid application reference (token)
+       *  @param  ds      Datastream for setting the component (e.g. PECTABS)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc setup (in  types::timeout to,
                              in  types::reference appRef,
@@ -134,13 +137,13 @@ module Components
                              out types::Event e);
 
       /**
-       *  Allows to cancel all pending (previously called in asynchronous mode) 
+       *  Allows to cancel all pending (previously called in asynchronous mode)
        *  directives on this specific component.
        *
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
-       */     
+       *
+       */
       returncodes::rc cancel (in  types::reference appRef,
                               out types::Event e);
 
@@ -151,7 +154,7 @@ module Components
        *
        *  @param  appRef            A valid application reference (token)
        *  @param  e                 Return value
-       *  
+       *
        */
       returncodes::rc test (in  types::timeout to,
                             in  types::reference appRef,
@@ -160,17 +163,17 @@ module Components
 
     /**
      *  Interface for virtual components that provide data to applications
-     */     
+     */
     interface Input
     {
 
       /**
        *  Make the data from the virtual component available to the application.
-       *  
+       *
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc receive (in  types::timeout to,
                                in  types::reference appRef,
@@ -178,18 +181,18 @@ module Components
     };
 
     /**
-     *  Interface for virtual components that are able to receive data from applications 
-     */    
+     *  Interface for virtual components that are able to receive data from applications
+     */
     interface Output
     {
 
       /**
        *  Send data from the application to the virtual component.
-       *  
+       *
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc send (in  types::timeout to,
                             in  types::reference appRef,
@@ -199,7 +202,7 @@ module Components
 
     /**
      *  Interface for virtual components that interact with customers/users
-     */     
+     */
     interface User
     {
 
@@ -210,7 +213,7 @@ module Components
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc enable (in  types::timeout to,
                               in  types::reference appRef,
@@ -223,7 +226,7 @@ module Components
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc disable (in  types::timeout to,
                                in  types::reference appRef,
@@ -232,29 +235,29 @@ module Components
 
     /**
      *  Interface for peripherals that don't interact with users/customers
-     */     
+     */
     interface Userless { };
 
     /**
      *  Interface for virtual components that use a physical media
      *  (e.g. card, coupon, or a paper document)
-     */     
+     */
     interface Media { };
 
     /**
      *  Interface for virtual components that don't use a physical media
      *  (e.g. card, coupon, or a paper document)
-     */     
+     */
     interface Medialess { };
 
     /**
      *  Interface for virtual components that transfer data
-     */     
+     */
     interface Data { };
 
     /**
      *  Interface for virtual components that don't transfer data
-     */     
+     */
     interface Dataless { };
 
     /**
@@ -265,11 +268,11 @@ module Components
 
       /**
        *  Captures the document in the virtual component that is associated to a secured bin.
-       *  
+       *
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc retain (in  types::timeout to,
                               in  types::reference appRef,
@@ -277,8 +280,8 @@ module Components
     };
 
     /**
-     *  Interface for virtual components that receive media from a Peripheral component 
-     *  and offer it to the user or to another Peripheral component 
+     *  Interface for virtual components that receive media from a Peripheral component
+     *  and offer it to the user or to another Peripheral component
      *  (e.g. ejecting an ATB coupon from the printer to the ESCROW)
      */
     interface Dispenser : Peripheral, User, Media, Dataless, Characteristics::Dispenser
@@ -290,7 +293,7 @@ module Components
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc offer (in  types::timeout to,
                              in  types::reference appRef,
@@ -299,10 +302,10 @@ module Components
 
     /**
      *  Interface for virtual components that are holding media (e.g. ATB stocks)
-     *  and supply it to another Peripheral component
+    *  and supply it to another Peripheral component
      */
-    interface Feeder : Peripheral, Userless, Media, Dataless, Characteristics::Feeder 
-    { 
+    interface Feeder : Peripheral, Userless, Media, Dataless, Characteristics::Feeder
+    {
 
       /**
        *  Offer the document from a feeder to another virtual component.
@@ -310,7 +313,7 @@ module Components
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc offer (in  types::timeout to,
                              in  types::reference appRef,
@@ -326,7 +329,7 @@ module Components
      *  Interface for virtual components used for outbound data transfer (e.g. network output)
      */
     interface DataOutput : Peripheral, Userless, Medialess, Data, Output, Characteristics::DataOutput { };
-    
+
     /**
      *  Interface for virtual components used for inbound user data transfer (e.g. sound device)
      *
@@ -334,14 +337,14 @@ module Components
      *           Only acquire, release and query directives should be implemented.
      *           All other inherited methods are not applicable and should return RC_NOT_SUPPORTED
      *
-     */    
+     */
     interface UserInput : Peripheral, User, Medialess, Data, Input, Characteristics::UserInput { };
 
     /**
      *  Interface for virtual components used for outbound user data transfer (e.g. screen)
      */
     interface UserOutput : Peripheral, User, Medialess, Data, Output, Characteristics::UserOutput { };
-    
+
     /**
      *  Interface for virtual components used for reading from media (e.g. mag card reader)
      */
@@ -351,11 +354,11 @@ module Components
      *  Interface for virtual components used for writing to media (e.g. receipt printer)
      */
     interface MediaOutput : Peripheral, User, Media, Data, Output, Characteristics::MediaOutput { };
-    
+
     /**
-     *  Interface for virtual components used for reading/writing from/to storage (e.g. hard disk)
+     *  Interface for virtual components used for reading/writing from/to storage (e.g. harddisk)
      *
-     *  @note    As Storage is a native device, 
+     *  @note    As Storage is a native device,
      *           only acquire, release and query directives should be implemented.
      *           All other inherited methods are not applicable and should return RC_NOT_SUPPORTED
      *
@@ -365,7 +368,7 @@ module Components
     /**
      *  Interface for virtual components handling a display (eg. kiosk computer screen)
      *
-     *  @note    As Display is a native device, 
+     *  @note    As Display is a native device,
      *           only acquire, release and query directives should be implemented.
      *           All other inherited methods are not applicable and should return RC_NOT_SUPPORTED
      *
@@ -375,7 +378,7 @@ module Components
     /**
      *  Interface for virtual components handling network access
      *
-     *  @note    As Network is a native device, 
+     *  @note    As Network is a native device,
      *           only acquire, release and query directives should be implemented.
      *           All other inherited methods are not applicable and should return RC_NOT_SUPPORTED
      *
@@ -383,17 +386,189 @@ module Components
     interface Network : Peripheral, Userless, Medialess, Characteristics::Network { };
 
     /**
-     *  Base definition for virtual components allowing baggage check-in
+     *  Interface for virtual components representing a stand-alone baggage scale
+     */
+
+    interface BaggageScale : UserInput, Characteristics::BaggageScale { };
+
+    /**
+     *  Base definition for virtual components allowing self-service baggage check-in
+    *  @note These are the new definitions for CUSS 1.3. Older definitions are deprecated
+    *  from CUSS version 1.3 and will be completely removed in CUSS 1.5 latest.
+     */
+
+    interface ConveyorSBD : Peripheral, Medialess, Output, Input, Characteristics::ConveyorSBD
+    {
+        /**
+         *  Moves current piece of baggage to next position. The next position can
+         *  be the airports take-away belt (dispatching baggage).
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc forward (in  types::timeout to,
+                                 in  types::reference appRef,
+                                 out types::Event e);
+
+        /**
+         *  Moves current piece of baggage back to the previous postion/user.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc backward (in  types::timeout to,
+                                  in  types::reference appRef,
+                                  out types::Event e);
+
+        /**
+         *  Processes current piece of baggage on the conveyor.
+         *  Allows applications to execute a verification without
+         *  physically moving a bag back and/or forth.
+         *  May return RC_NOT_SUPPORTED, if a component does not support
+         *  or implement that function
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc process  (in  types::timeout to,
+                                  in  types::reference appRef,
+                                  out types::Event e);
+    };
+
+    /**
+     *  Interface for virtual components representing the baggage insertion position of a conveyor system
+    *
+    *  @note To better reflect the process of baggage check-in,
+    *  comprising of insertion and weighing, verification and waiting for a free slot on the carry-off belt
+    *  the definition of the Integrated Baggage System always has three conveyor segments
+    *  InsertionBelt, VerificationBelt and ParkingBelt (...even when there is no physical representation of e.g. a verification belt)
      */
 
-    interface BaggageScale : UserInput, Characteristics::Scale { };
+    interface InsertionBelt : ConveyorSBD, User
+    {
+      /**
+        *  Offer the bag from the virtual component (back) to the user
+        *  (Define own offer() to avoid multiple inheritance)
+        *
+          */
+
+        returncodes::rc offer (in  types::timeout to,
+                         in  types::reference appRef,
+                         out types::Event e);
+   };
+
+    /**
+     *  Interface for virtual components representing the baggage verification position of a conveyor system
+    *
+    *  @note To better reflect the process of baggage check-in,
+    *  comprising of insertion and weighing, verification and waiting for a free slot on the carry-off belt
+    *  the definition of the Integrated Baggage System always has three conveyor segments
+    *  InsertionBelt, VerificationBelt and ParkingBelt (...even when there is no physical representation of e.g. a verification belt)
+    *
+     */
 
+    interface VerificationBelt : ConveyorSBD, Userless
+   {
+   };
+
+    /**
+     *  Interface for virtual components representing the baggage parking position of a conveyor system
+    *
+    *  @note To better reflect the process of baggage check-in,
+    *  comprising of insertion and weighing, verification and waiting for a free slot on the carry-off belt
+    *  the definition of the Integrated Baggage System always has three conveyor segments
+    *  InsertionBelt, VerificationBelt and ParkingBelt (...even when there is no physical representation of e.g. a verification belt)
+    *
+     */
+
+    interface ParkingBelt : ConveyorSBD, Userless
+   {
+   };
+
+    /**
+     *  Interface for virtual components which are able to transport baggage
+    *  @note This interface definition is deprecated from CUSS 1.3. Application-suppliers
+    * are encouraged to implement the interfaces InsertionBelt, VerificationBelt and ParkingBelt
+    * for self-service baggage check-in support.
+     */
+
+    interface Conveyor : Peripheral, User, Medialess, Data, Input, Characteristics::Conveyor
+    {
+        /**
+         *  Moves current piece of baggage to the parking position.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc accept (in  types::timeout to,
+                                in  types::reference appRef,
+                                out types::Event e);
+
+        /**
+         *  Moves current piece of baggage back to the user.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc reject (in  types::timeout to,
+                                in  types::reference appRef,
+                                out types::Event e);
+
+
+        /**
+         *  Moves baggage from the parking position to the airport's baggage system.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc forwardParked (in  types::timeout to,
+                                       in  types::reference appRef,
+                                       out types::Event e);
+
+
+        /**
+         *  Moves all baggage from the parking position back to the user.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc returnParked (in  types::timeout to,
+                                      in  types::reference appRef,
+                                      out types::Event e);
+
+        /**
+         *  Allows the user to take back his baggage.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc waitForRemovedBaggage (in  types::timeout to,
+                                               in  types::reference appRef,
+                                               out types::Event e);
+
+    };
 
     /**
       * This interface is used to query the state and/or characteristics
-      * of a kiosk application that is configured on the platform. 
-      * 
-      */       
+      * of a kiosk application that is configured on the platform.
+      *
+      */
     interface Application : CUSSCntl, Characteristics::Application { };
 
     /**
@@ -403,33 +578,33 @@ module Components
     {
 
       /**
-       *  This is the first directive to be issued by the application 
+       *  This is the first directive to be issued by the application
        *  to get basic information on the specific CUSS Platform implementation
-       *  If the application is known by the platform (via configuration), 
+       *  If the application is known by the platform (via configuration),
        *  the application reference (token) is returned with this call.
-       *  
-       *  @param  appid     Application identifier which must be configured within the platform 
+       *
+       *  @param  appid     Application identifier which must be configured within the platform
        *                    (for minimal security)
-       *  @param  el        Return values 
-       *  
+       *  @param  el        Return values
+       *
        */
       returncodes::rc level (in  types::akID appid,
                              out types::EnvironmentLevel el);
 
       /**
-       *  This is the second directive to be issued by an application 
+       *  This is the second directive to be issued by an application
        *  to get the list of all implemented CUSS components.
-       *  
+       *
        *  @param  appRef  A valid application reference (token)
        *  @param  ec      List of virtual components which contains the CORBA references (IORs)
-       *  
+       *
        */
       returncodes::rc components (in  types::reference appRef,
                                   out types::EnvironmentComponents ec);
 
       /**
        *  Allows applications to wait for an event to occur.
-       *  To wait for an event, the application must have subscribed to it via the acquire or 
+       *  To wait for an event, the application must have subscribed to it via the acquire or
        *  registerEvent directives. The waitEvent-directive will be completed at event occurrence
        *  (any or all in the list) or when the timeout expires.
        *
@@ -438,7 +613,7 @@ module Components
        *  @param  appRef  A valid application reference (token)
        *  @param  ef      Specifies the event(s) to wait for
        *  @param  e       Return value
-       *  
+       *
        *  @note   In CUSS 1.0, implementing event filtering is not mandatory.
        */
       returncodes::rc waitEvent (in  types::timeout to,
@@ -452,11 +627,11 @@ module Components
        *  @param  appRef  A valid application reference (token)
        *  @param  ie      Event to be generated
        *  @param  oe      Return value
-       *  
+       *
        */
       returncodes::rc generateEvent(in  types::reference appRef,
                                     in  types::Event ie,
-                                    out types::Event oe);        
+                                    out types::Event oe);
 
       /**
        *  Returns a description of an event.
@@ -464,19 +639,19 @@ module Components
        *  @param  appRef  A valid application reference (token)
        *  @param  ef      Specifies the event(s) to query
        *  @param  ed      Returned event description(s)
-       *  
+       *
        *  @note   In CUSS 1.0, the implementation of queryEvent is not mandatory.
-       *          In this case, this function should return RC_NOT_SUPPORTED.   
+       *          In this case, this function should return RC_NOT_SUPPORTED.
        */
-      returncodes::rc queryEvent (in  types::reference appRef,   
+      returncodes::rc queryEvent (in  types::reference appRef,
                                   in  types::evtFilter ef,
-                                  out types::evtDescription ed); 
+                                  out types::evtDescription ed);
 
       /**
        *  Subscribe to or discards from receiving any related event notification. The use
        *  of this directive has an additive effect, which means that a call will not supersede
-       *  a previous call but, instead, subscribe for previous event(s) plus the one(s) in the 
-       *  current call. All subscriptions done with this directive will be received, within the 
+       *  a previous call but, instead, subscribe for previous event(s) plus the one(s) in the
+       *  current call. All subscriptions done with this directive will be received, within the
        *  application, via a single listener.
        *
        *  @param  appRef  A valid application reference (token)
@@ -485,9 +660,9 @@ module Components
        *  @param  el      Specifies the event listener to be notified
        *  @param  elud    User data that is submitted to the listener on each invocation
        *  @param  ed      Return value
-       *  
-       *  @note   As implementation of event filtering is not required in CUSS 1.0, 
-       *          event listener passed to registerEvent directive will be used as the 
+       *
+       *  @note   As implementation of event filtering is not required in CUSS 1.0,
+       *          event listener passed to registerEvent directive will be used as the
        *          receiver for all application manager events. To receive component events,
        *          application must register their listener(s) via the acquire directive.
        */
@@ -495,7 +670,7 @@ module Components
                                     in  types::action act,
                                     in  types::evtFilter ef,
                                     in  types::evtListener el,
-                                    in  types::correlation elud,                   
+                                    in  types::correlation elud,
                                     out types::Event e);
 
     };
@@ -510,24 +685,24 @@ module Components
       /**
        *  The application now wants to (re-)initialize. This is a blocking call.
        *  After this directive returns the application is allowed to initialize.
-       *  This handling ensures that initialization is serialized for all applications. 
+       *  This handling ensures that initialization is serialized for all applications.
        */
       returncodes::rc initrequest (in  types::reference appRef,
-                                   out types::Event e);        
-                                                               
+                                   out types::Event e);
+
       /**
-       *  This directive is used by the application to request a state change from 
-       *  CUSS Application Manager, which will change the application state if request is approved.
+       *  This directive is used by the application to request a state change from
+      *  CUSS Application Manager, which will change the application state if request is approved.
        *
        *  @param  appRef  A valid application reference (token)
-       *  @param  ie      Input of application state transition code 
+       *  @param  ie      Input of application state transition code
        *  @param  oe      Return value
-       *  
+       *
        */
       returncodes::rc notify (in  types::reference appRef,
                               in  types::akID   id,
                               in  types::evtCode ec,
-                              out types::Event   e);         
+                              out types::Event   e);
     };
 
     /**
@@ -535,21 +710,21 @@ module Components
      *  A System Manager Application uses this interface for interaction with the platform
      *  To access the platform use: <i>corbaloc:<kiosk-IP address>:20001/ServiceProviderInterface</i>
      *
-     *  @note   In CUSS 1.0, the ServiceProviderInterface is available for both 
+     *  @note   In CUSS 1.0, the ServiceProviderInterface is available for both
      *          Service Provider System Manager and Application Provider System Manager
      */
-    interface ServiceProviderInterface : ManagementInterface 
+    interface ServiceProviderInterface : ManagementInterface
     {
 
       /**
-       *  Ask CUSS application manager to load an application 
-       *  (realize Load state transition in application state diagram). 
+       *  Ask CUSS application manager to load an application
+       *  (realize Load state transition in application state diagram).
        *
        *  @param  to       Timeout value
        *  @param  appRef   A valid application reference (token)
        *  @param  whichApp The identifier of the application to be loaded
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc load (in  types::timeout to,
                             in  types::reference appRef,
@@ -557,185 +732,71 @@ module Components
                             out types::Event e);
 
       /**
-       *  Suspend an application. 
+       *  Suspend an application.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  whichApp The identification of the application to be suspended
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc suspend (in  types::reference appRef,
                                in  types::akID whichApp,
                                out types::Event e);
 
       /**
-       *  Suspend all applications. 
+       *  Suspend all applications.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc suspendAll (in types::reference appRef,
-                                 out types::Event e);         
+                                 out types::Event e);
 
       /**
-       *  Resume a suspended application to its previous state. 
+       *  Resume a suspended application to its previous state.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  whichApp The identifier of the application to be resumed
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc resume (in  types::reference appRef,
                               in  types::akID whichApp,
-                              out types::Event e);           
+                              out types::Event e);
 
       /**
-       *  Resume all suspended applications to their previous state. 
+       *  Resume all suspended applications to their previous state.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc resumeAll (in  types::reference appRef,
                                  out types::Event e);
-      
+
       /**
-       *  Stops (unloads) an application. 
+       *  Stops (unloads) an application.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  whichApp The identifier of the application to be stopped
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc stop (in  types::reference appRef,
                             in  types::akID whichApp,
                             out types::Event e);
-                            
+
       /**
-       *  Stops (unloads) all applications. 
+       *  Stops (unloads) all applications.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc stopAll (in  types::reference appRef,
                                out types::Event e);
     };
-
-    /**
-     *  Interface for virtual components which are able to transport baggage 
-     */
-
-    interface Conveyor : Peripheral, User, Medialess, Data, Input, Characteristics::Conveyor
-    {
-        /**
-         *  Moves current piece of baggage to the parking position.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc accept (in  types::timeout to,
-                                in  types::reference appRef,
-                                out types::Event e);
-
-        /**
-         *  Moves current piece of baggage back to the user.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc reject (in  types::timeout to,
-                                in  types::reference appRef,
-                                out types::Event e);
-
-
-        /**
-         *  Moves baggage from the parking position to the airport's baggage system.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc forwardParked (in  types::timeout to,
-                                       in  types::reference appRef,
-                                       out types::Event e);
-
-
-        /**
-         *  Moves all baggage from the parking position back to the user.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc returnParked (in  types::timeout to,
-                                      in  types::reference appRef,
-                                      out types::Event e);  
-
-        /**
-         *  Allows the user to take back his baggage.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc waitForRemovedBaggage (in  types::timeout to,
-                                               in  types::reference appRef,
-                                               out types::Event e);                                       
-
-    };
 };
-#endif  // COMPS_IDL 
+#endif  // COMPS_IDL
+
diff --git a/SelfServiceCommon/Massai/idl/Cuss/comps.tao140.idl b/SelfServiceCommon/Massai/idl/Cuss/comps.tao140.idl
index 9839d47a..ddc42c84 100644
--- a/SelfServiceCommon/Massai/idl/Cuss/comps.tao140.idl
+++ b/SelfServiceCommon/Massai/idl/Cuss/comps.tao140.idl
@@ -4,16 +4,15 @@
 //
 //  Purpose:   Interfaces to CUSS components
 //
-//  Date:      02.03.2009
+//  Date:      17.06.2013
 //
 //  Version:   1.3
 //
-//  Author:    CUSS Management Group
+//  Author:    IATA Passenger Experience Management Group: CUWG CUSS-TSG
 //
-//  Copyright(c) 2003,2009 International Air Transport Association, All Rights Reserved
+//  Copyright(c) 2003,2009,2013 International Air Transport Association, All Rights Reserved
 //
-//  Note:      This IDL file is backward-compatible with that of CUSS 0.2.1 and CUSS 1.0
-//             Please refer to the CUSS 1.2 Technical Specification for more information
+//  Note:      Please refer to the CUSS 1.3 Technical Specification for more information
 //
 //  Changed:   Added baggage handling support (Nicolas Bruns, 29.06.2004)
 //
@@ -21,6 +20,11 @@
 //  @li V1.3
 //  @li Mantis 0025566: WeightScale: support standalone Scale (BaggageScale CUSS1.3)
 //  @li added interface BaggageScale
+//
+//  @date 26.11.2013
+//  @li V1.3.1
+//  @li Mantis 0029957: ConveyorComp: CUSS1.3 Conveyor (without ConveyorAEA)
+//  @li use full CUSS1.3 IDL
 //----------------------------------------------------------------------------
 
 #ifndef COMPS_IDL
@@ -32,25 +36,25 @@
 
 #pragma prefix "cuss.iata.org"
 
-/** 
- *  Definition of the interfaces to CUSS Components 
+/**
+ *  Definition of the interfaces to CUSS Components
  *
  * @note  If your version of the IDL compiler treats Component as a CORBA IDL identifier,
  *        you will need to escape it by prepending an underscore (_) to it , that is
  *        replace all occurrences of Component with _Component
  */
- 
+
 module Components
 {
     /**
      *  All components are derived from this interface
      *
-     */     
+     */
     interface TAO140Component { };
 
     /**
      *  All interfaces for peripherals are derived from this interface
-     */     
+     */
     interface CUSSCntl : TAO140Component
     {
 
@@ -58,10 +62,10 @@ module Components
        *  Returns the state/status of the virtual component.
        *
        *  @param  to      Timeout value
-       *  @param  appRef  A valid application reference (token) 
+       *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
-       */     
+       *
+       */
       returncodes::rc query (in  types::timeout to,
                              in  types::reference appRef,
                              out types::Event e);
@@ -69,7 +73,7 @@ module Components
 
     /**
      *  Interfaces for virtual components that map to peripheral devices
-     */     
+     */
     interface Peripheral : CUSSCntl
     {
 
@@ -78,32 +82,32 @@ module Components
        *  The application can subscribe a specific listener associated to the acquired component.
        *
        *  @param  to      Timeout value
-       *  @param  appRef  A valid application reference (token) 
+       *  @param  appRef  A valid application reference (token)
        *  @param  ef      Specifies which events to subscribe to (event filter)
        *  @param  el      Specifies the event listener to be set for this component
        *  @param  elud    User data that is submitted with each event sent to the listener
        *  @param  e       Return value
-       *  
-       *  @note   As implementation of event filtering is not required in CUSS 1.0, 
-       *          event listener passed to acquire will be used as the receiver 
-       *          for all events related to this component. 
+       *
+       *  @note   As implementation of event filtering is not required in CUSS 1.0,
+       *          event listener passed to acquire will be used as the receiver
+       *          for all events related to this component.
        *
        */
-      returncodes::rc acquire (in  types::timeout to,          
-                               in  types::reference appRef,    
-                               in  types::evtAcquireFilter ef,  
-                               in  types::evtListener el,      
-                               in  types::correlation elud,                   
-                               out types::Event e);            
+      returncodes::rc acquire (in  types::timeout to,
+                               in  types::reference appRef,
+                               in  types::evtAcquireFilter ef,
+                               in  types::evtListener el,
+                               in  types::correlation elud,
+                               out types::Event e);
 
       /**
-       *  Makes the virtual component unavailable to the application and unsubscribes events 
+       *  Makes the virtual component unavailable to the application and unsubscribes events
        *  relative to the component.
        *
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc release (in  types::timeout to,
                                in  types::reference appRef,
@@ -113,10 +117,10 @@ module Components
        *  Set up the virtual component and its profile for the application.
        *
        *  @param  to      Timeout value
-       *  @param  appRef  A valid application reference (token) 
-       *  @param  ds      datastream for setting the component (e.g. PECTABS)
+       *  @param  appRef  A valid application reference (token)
+       *  @param  ds      Datastream for setting the component (e.g. PECTABS)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc setup (in  types::timeout to,
                              in  types::reference appRef,
@@ -124,13 +128,13 @@ module Components
                              out types::Event e);
 
       /**
-       *  Allows to cancel all pending (previously called in asynchronous mode) 
+       *  Allows to cancel all pending (previously called in asynchronous mode)
        *  directives on this specific component.
        *
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
-       */     
+       *
+       */
       returncodes::rc cancel (in  types::reference appRef,
                               out types::Event e);
 
@@ -141,7 +145,7 @@ module Components
        *
        *  @param  appRef            A valid application reference (token)
        *  @param  e                 Return value
-       *  
+       *
        */
       returncodes::rc test (in  types::timeout to,
                             in  types::reference appRef,
@@ -150,17 +154,17 @@ module Components
 
     /**
      *  Interface for virtual components that provide data to applications
-     */     
+     */
     interface Input
     {
 
       /**
        *  Make the data from the virtual component available to the application.
-       *  
+       *
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc receive (in  types::timeout to,
                                in  types::reference appRef,
@@ -168,18 +172,18 @@ module Components
     };
 
     /**
-     *  Interface for virtual components that are able to receive data from applications 
-     */    
+     *  Interface for virtual components that are able to receive data from applications
+     */
     interface Output
     {
 
       /**
        *  Send data from the application to the virtual component.
-       *  
+       *
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc send (in  types::timeout to,
                             in  types::reference appRef,
@@ -189,7 +193,7 @@ module Components
 
     /**
      *  Interface for virtual components that interact with customers/users
-     */     
+     */
     interface User
     {
 
@@ -200,7 +204,7 @@ module Components
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc enable (in  types::timeout to,
                               in  types::reference appRef,
@@ -213,7 +217,7 @@ module Components
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc disable (in  types::timeout to,
                                in  types::reference appRef,
@@ -222,29 +226,29 @@ module Components
 
     /**
      *  Interface for peripherals that don't interact with users/customers
-     */     
+     */
     interface Userless { };
 
     /**
      *  Interface for virtual components that use a physical media
      *  (e.g. card, coupon, or a paper document)
-     */     
+     */
     interface Media { };
 
     /**
      *  Interface for virtual components that don't use a physical media
      *  (e.g. card, coupon, or a paper document)
-     */     
+     */
     interface Medialess { };
 
     /**
      *  Interface for virtual components that transfer data
-     */     
+     */
     interface Data { };
 
     /**
      *  Interface for virtual components that don't transfer data
-     */     
+     */
     interface Dataless { };
 
     /**
@@ -255,11 +259,11 @@ module Components
 
       /**
        *  Captures the document in the virtual component that is associated to a secured bin.
-       *  
+       *
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc retain (in  types::timeout to,
                               in  types::reference appRef,
@@ -267,8 +271,8 @@ module Components
     };
 
     /**
-     *  Interface for virtual components that receive media from a Peripheral component 
-     *  and offer it to the user or to another Peripheral component 
+     *  Interface for virtual components that receive media from a Peripheral component
+     *  and offer it to the user or to another Peripheral component
      *  (e.g. ejecting an ATB coupon from the printer to the ESCROW)
      */
     interface Dispenser : Peripheral, User, Media, Dataless, Characteristics::Dispenser
@@ -280,7 +284,7 @@ module Components
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc offer (in  types::timeout to,
                              in  types::reference appRef,
@@ -289,10 +293,10 @@ module Components
 
     /**
      *  Interface for virtual components that are holding media (e.g. ATB stocks)
-     *  and supply it to another Peripheral component
+    *  and supply it to another Peripheral component
      */
-    interface Feeder : Peripheral, Userless, Media, Dataless, Characteristics::Feeder 
-    { 
+    interface Feeder : Peripheral, Userless, Media, Dataless, Characteristics::Feeder
+    {
 
       /**
        *  Offer the document from a feeder to another virtual component.
@@ -300,7 +304,7 @@ module Components
        *  @param  to      Timeout value
        *  @param  appRef  A valid application reference (token)
        *  @param  e       Return value
-       *  
+       *
        */
       returncodes::rc offer (in  types::timeout to,
                              in  types::reference appRef,
@@ -316,7 +320,7 @@ module Components
      *  Interface for virtual components used for outbound data transfer (e.g. network output)
      */
     interface DataOutput : Peripheral, Userless, Medialess, Data, Output, Characteristics::DataOutput { };
-    
+
     /**
      *  Interface for virtual components used for inbound user data transfer (e.g. sound device)
      *
@@ -324,14 +328,14 @@ module Components
      *           Only acquire, release and query directives should be implemented.
      *           All other inherited methods are not applicable and should return RC_NOT_SUPPORTED
      *
-     */    
+     */
     interface UserInput : Peripheral, User, Medialess, Data, Input, Characteristics::UserInput { };
 
     /**
      *  Interface for virtual components used for outbound user data transfer (e.g. screen)
      */
     interface UserOutput : Peripheral, User, Medialess, Data, Output, Characteristics::UserOutput { };
-    
+
     /**
      *  Interface for virtual components used for reading from media (e.g. mag card reader)
      */
@@ -341,11 +345,11 @@ module Components
      *  Interface for virtual components used for writing to media (e.g. receipt printer)
      */
     interface MediaOutput : Peripheral, User, Media, Data, Output, Characteristics::MediaOutput { };
-    
+
     /**
-     *  Interface for virtual components used for reading/writing from/to storage (e.g. hard disk)
+     *  Interface for virtual components used for reading/writing from/to storage (e.g. harddisk)
      *
-     *  @note    As Storage is a native device, 
+     *  @note    As Storage is a native device,
      *           only acquire, release and query directives should be implemented.
      *           All other inherited methods are not applicable and should return RC_NOT_SUPPORTED
      *
@@ -355,7 +359,7 @@ module Components
     /**
      *  Interface for virtual components handling a display (eg. kiosk computer screen)
      *
-     *  @note    As Display is a native device, 
+     *  @note    As Display is a native device,
      *           only acquire, release and query directives should be implemented.
      *           All other inherited methods are not applicable and should return RC_NOT_SUPPORTED
      *
@@ -365,7 +369,7 @@ module Components
     /**
      *  Interface for virtual components handling network access
      *
-     *  @note    As Network is a native device, 
+     *  @note    As Network is a native device,
      *           only acquire, release and query directives should be implemented.
      *           All other inherited methods are not applicable and should return RC_NOT_SUPPORTED
      *
@@ -373,17 +377,189 @@ module Components
     interface Network : Peripheral, Userless, Medialess, Characteristics::Network { };
 
     /**
-     *  Base definition for virtual components allowing baggage check-in
+     *  Interface for virtual components representing a stand-alone baggage scale
      */
 
-    interface BaggageScale : UserInput, Characteristics::Scale { };
+    interface BaggageScale : UserInput, Characteristics::BaggageScale { };
+
+    /**
+     *  Base definition for virtual components allowing self-service baggage check-in
+    *  @note These are the new definitions for CUSS 1.3. Older definitions are deprecated
+    *  from CUSS version 1.3 and will be completely removed in CUSS 1.5 latest.
+     */
+
+    interface ConveyorSBD : Peripheral, Medialess, Output, Input, Characteristics::ConveyorSBD
+    {
+        /**
+         *  Moves current piece of baggage to next position. The next position can
+         *  be the airports take-away belt (dispatching baggage).
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc forward (in  types::timeout to,
+                                 in  types::reference appRef,
+                                 out types::Event e);
+
+        /**
+         *  Moves current piece of baggage back to the previous postion/user.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc backward (in  types::timeout to,
+                                  in  types::reference appRef,
+                                  out types::Event e);
+
+        /**
+         *  Processes current piece of baggage on the conveyor.
+         *  Allows applications to execute a verification without
+         *  physically moving a bag back and/or forth.
+         *  May return RC_NOT_SUPPORTED, if a component does not support
+         *  or implement that function
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc process  (in  types::timeout to,
+                                  in  types::reference appRef,
+                                  out types::Event e);
+    };
+
+    /**
+     *  Interface for virtual components representing the baggage insertion position of a conveyor system
+    *
+    *  @note To better reflect the process of baggage check-in,
+    *  comprising of insertion and weighing, verification and waiting for a free slot on the carry-off belt
+    *  the definition of the Integrated Baggage System always has three conveyor segments
+    *  InsertionBelt, VerificationBelt and ParkingBelt (...even when there is no physical representation of e.g. a verification belt)
+     */
+
+    interface InsertionBelt : ConveyorSBD, User
+    {
+      /**
+        *  Offer the bag from the virtual component (back) to the user
+        *  (Define own offer() to avoid multiple inheritance)
+        *
+          */
+
+        returncodes::rc offer (in  types::timeout to,
+                         in  types::reference appRef,
+                         out types::Event e);
+   };
+
+    /**
+     *  Interface for virtual components representing the baggage verification position of a conveyor system
+    *
+    *  @note To better reflect the process of baggage check-in,
+    *  comprising of insertion and weighing, verification and waiting for a free slot on the carry-off belt
+    *  the definition of the Integrated Baggage System always has three conveyor segments
+    *  InsertionBelt, VerificationBelt and ParkingBelt (...even when there is no physical representation of e.g. a verification belt)
+    *
+     */
+
+    interface VerificationBelt : ConveyorSBD, Userless
+   {
+   };
+
+    /**
+     *  Interface for virtual components representing the baggage parking position of a conveyor system
+    *
+    *  @note To better reflect the process of baggage check-in,
+    *  comprising of insertion and weighing, verification and waiting for a free slot on the carry-off belt
+    *  the definition of the Integrated Baggage System always has three conveyor segments
+    *  InsertionBelt, VerificationBelt and ParkingBelt (...even when there is no physical representation of e.g. a verification belt)
+    *
+     */
+
+    interface ParkingBelt : ConveyorSBD, Userless
+   {
+   };
+
+    /**
+     *  Interface for virtual components which are able to transport baggage
+    *  @note This interface definition is deprecated from CUSS 1.3. Application-suppliers
+    * are encouraged to implement the interfaces InsertionBelt, VerificationBelt and ParkingBelt
+    * for self-service baggage check-in support.
+     */
+
+    interface Conveyor : Peripheral, User, Medialess, Data, Input, Characteristics::Conveyor
+    {
+        /**
+         *  Moves current piece of baggage to the parking position.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc accept (in  types::timeout to,
+                                in  types::reference appRef,
+                                out types::Event e);
+
+        /**
+         *  Moves current piece of baggage back to the user.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc reject (in  types::timeout to,
+                                in  types::reference appRef,
+                                out types::Event e);
+
+
+        /**
+         *  Moves baggage from the parking position to the airport's baggage system.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc forwardParked (in  types::timeout to,
+                                       in  types::reference appRef,
+                                       out types::Event e);
+
 
+        /**
+         *  Moves all baggage from the parking position back to the user.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc returnParked (in  types::timeout to,
+                                      in  types::reference appRef,
+                                      out types::Event e);
+
+        /**
+         *  Allows the user to take back his baggage.
+         *
+         *  @param  to      Timeout value
+         *  @param  appRef  A valid active application reference
+         *  @param  e       Return value
+         */
+
+        returncodes::rc waitForRemovedBaggage (in  types::timeout to,
+                                               in  types::reference appRef,
+                                               out types::Event e);
+
+    };
 
     /**
       * This interface is used to query the state and/or characteristics
-      * of a kiosk application that is configured on the platform. 
-      * 
-      */       
+      * of a kiosk application that is configured on the platform.
+      *
+      */
     interface Application : CUSSCntl, Characteristics::Application { };
 
     /**
@@ -393,33 +569,33 @@ module Components
     {
 
       /**
-       *  This is the first directive to be issued by the application 
+       *  This is the first directive to be issued by the application
        *  to get basic information on the specific CUSS Platform implementation
-       *  If the application is known by the platform (via configuration), 
+       *  If the application is known by the platform (via configuration),
        *  the application reference (token) is returned with this call.
-       *  
-       *  @param  appid     Application identifier which must be configured within the platform 
+       *
+       *  @param  appid     Application identifier which must be configured within the platform
        *                    (for minimal security)
-       *  @param  el        Return values 
-       *  
+       *  @param  el        Return values
+       *
        */
       returncodes::rc level (in  types::akID appid,
                              out types::EnvironmentLevel el);
 
       /**
-       *  This is the second directive to be issued by an application 
+       *  This is the second directive to be issued by an application
        *  to get the list of all implemented CUSS components.
-       *  
+       *
        *  @param  appRef  A valid application reference (token)
        *  @param  ec      List of virtual components which contains the CORBA references (IORs)
-       *  
+       *
        */
       returncodes::rc components (in  types::reference appRef,
                                   out types::EnvironmentComponents ec);
 
       /**
        *  Allows applications to wait for an event to occur.
-       *  To wait for an event, the application must have subscribed to it via the acquire or 
+       *  To wait for an event, the application must have subscribed to it via the acquire or
        *  registerEvent directives. The waitEvent-directive will be completed at event occurrence
        *  (any or all in the list) or when the timeout expires.
        *
@@ -428,7 +604,7 @@ module Components
        *  @param  appRef  A valid application reference (token)
        *  @param  ef      Specifies the event(s) to wait for
        *  @param  e       Return value
-       *  
+       *
        *  @note   In CUSS 1.0, implementing event filtering is not mandatory.
        */
       returncodes::rc waitEvent (in  types::timeout to,
@@ -442,11 +618,11 @@ module Components
        *  @param  appRef  A valid application reference (token)
        *  @param  ie      Event to be generated
        *  @param  oe      Return value
-       *  
+       *
        */
       returncodes::rc generateEvent(in  types::reference appRef,
                                     in  types::Event ie,
-                                    out types::Event oe);        
+                                    out types::Event oe);
 
       /**
        *  Returns a description of an event.
@@ -454,19 +630,19 @@ module Components
        *  @param  appRef  A valid application reference (token)
        *  @param  ef      Specifies the event(s) to query
        *  @param  ed      Returned event description(s)
-       *  
+       *
        *  @note   In CUSS 1.0, the implementation of queryEvent is not mandatory.
-       *          In this case, this function should return RC_NOT_SUPPORTED.   
+       *          In this case, this function should return RC_NOT_SUPPORTED.
        */
-      returncodes::rc queryEvent (in  types::reference appRef,   
+      returncodes::rc queryEvent (in  types::reference appRef,
                                   in  types::evtFilter ef,
-                                  out types::evtDescription ed); 
+                                  out types::evtDescription ed);
 
       /**
        *  Subscribe to or discards from receiving any related event notification. The use
        *  of this directive has an additive effect, which means that a call will not supersede
-       *  a previous call but, instead, subscribe for previous event(s) plus the one(s) in the 
-       *  current call. All subscriptions done with this directive will be received, within the 
+       *  a previous call but, instead, subscribe for previous event(s) plus the one(s) in the
+       *  current call. All subscriptions done with this directive will be received, within the
        *  application, via a single listener.
        *
        *  @param  appRef  A valid application reference (token)
@@ -475,9 +651,9 @@ module Components
        *  @param  el      Specifies the event listener to be notified
        *  @param  elud    User data that is submitted to the listener on each invocation
        *  @param  ed      Return value
-       *  
-       *  @note   As implementation of event filtering is not required in CUSS 1.0, 
-       *          event listener passed to registerEvent directive will be used as the 
+       *
+       *  @note   As implementation of event filtering is not required in CUSS 1.0,
+       *          event listener passed to registerEvent directive will be used as the
        *          receiver for all application manager events. To receive component events,
        *          application must register their listener(s) via the acquire directive.
        */
@@ -485,7 +661,7 @@ module Components
                                     in  types::action act,
                                     in  types::evtFilter ef,
                                     in  types::evtListener el,
-                                    in  types::correlation elud,                   
+                                    in  types::correlation elud,
                                     out types::Event e);
 
     };
@@ -500,24 +676,24 @@ module Components
       /**
        *  The application now wants to (re-)initialize. This is a blocking call.
        *  After this directive returns the application is allowed to initialize.
-       *  This handling ensures that initialization is serialized for all applications. 
+       *  This handling ensures that initialization is serialized for all applications.
        */
       returncodes::rc initrequest (in  types::reference appRef,
-                                   out types::Event e);        
-                                                               
+                                   out types::Event e);
+
       /**
-       *  This directive is used by the application to request a state change from 
-       *  CUSS Application Manager, which will change the application state if request is approved.
+       *  This directive is used by the application to request a state change from
+      *  CUSS Application Manager, which will change the application state if request is approved.
        *
        *  @param  appRef  A valid application reference (token)
-       *  @param  ie      Input of application state transition code 
+       *  @param  ie      Input of application state transition code
        *  @param  oe      Return value
-       *  
+       *
        */
       returncodes::rc notify (in  types::reference appRef,
                               in  types::akID   id,
                               in  types::evtCode ec,
-                              out types::Event   e);         
+                              out types::Event   e);
     };
 
     /**
@@ -525,21 +701,21 @@ module Components
      *  A System Manager Application uses this interface for interaction with the platform
      *  To access the platform use: <i>corbaloc:<kiosk-IP address>:20001/ServiceProviderInterface</i>
      *
-     *  @note   In CUSS 1.0, the ServiceProviderInterface is available for both 
+     *  @note   In CUSS 1.0, the ServiceProviderInterface is available for both
      *          Service Provider System Manager and Application Provider System Manager
      */
-    interface ServiceProviderInterface : ManagementInterface 
+    interface ServiceProviderInterface : ManagementInterface
     {
 
       /**
-       *  Ask CUSS application manager to load an application 
-       *  (realize Load state transition in application state diagram). 
+       *  Ask CUSS application manager to load an application
+       *  (realize Load state transition in application state diagram).
        *
        *  @param  to       Timeout value
        *  @param  appRef   A valid application reference (token)
        *  @param  whichApp The identifier of the application to be loaded
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc load (in  types::timeout to,
                             in  types::reference appRef,
@@ -547,185 +723,71 @@ module Components
                             out types::Event e);
 
       /**
-       *  Suspend an application. 
+       *  Suspend an application.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  whichApp The identification of the application to be suspended
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc suspend (in  types::reference appRef,
                                in  types::akID whichApp,
                                out types::Event e);
 
       /**
-       *  Suspend all applications. 
+       *  Suspend all applications.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc suspendAll (in types::reference appRef,
-                                 out types::Event e);         
+                                 out types::Event e);
 
       /**
-       *  Resume a suspended application to its previous state. 
+       *  Resume a suspended application to its previous state.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  whichApp The identifier of the application to be resumed
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc resume (in  types::reference appRef,
                               in  types::akID whichApp,
-                              out types::Event e);           
+                              out types::Event e);
 
       /**
-       *  Resume all suspended applications to their previous state. 
+       *  Resume all suspended applications to their previous state.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc resumeAll (in  types::reference appRef,
                                  out types::Event e);
-      
+
       /**
-       *  Stops (unloads) an application. 
+       *  Stops (unloads) an application.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  whichApp The identifier of the application to be stopped
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc stop (in  types::reference appRef,
                             in  types::akID whichApp,
                             out types::Event e);
-                            
+
       /**
-       *  Stops (unloads) all applications. 
+       *  Stops (unloads) all applications.
        *
        *  @param  appRef   A valid application reference (token)
        *  @param  e        Return value
-       *  
+       *
        */
       returncodes::rc stopAll (in  types::reference appRef,
                                out types::Event e);
     };
-
-    /**
-     *  Interface for virtual components which are able to transport baggage 
-     */
-
-    interface Conveyor : Peripheral, User, Medialess, Data, Input, Characteristics::Conveyor
-    {
-        /**
-         *  Moves current piece of baggage to the parking position.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc accept (in  types::timeout to,
-                                in  types::reference appRef,
-                                out types::Event e);
-
-        /**
-         *  Moves current piece of baggage back to the user.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc reject (in  types::timeout to,
-                                in  types::reference appRef,
-                                out types::Event e);
-
-
-        /**
-         *  Moves baggage from the parking position to the airport's baggage system.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc forwardParked (in  types::timeout to,
-                                       in  types::reference appRef,
-                                       out types::Event e);
-
-
-        /**
-         *  Moves all baggage from the parking position back to the user.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc returnParked (in  types::timeout to,
-                                      in  types::reference appRef,
-                                      out types::Event e);  
-
-        /**
-         *  Allows the user to take back his baggage.
-         *
-         *  @param  to      Timeout value
-         *  @param  appRef  A valid active application reference
-         *  @param  e       Return value
-         *  
-         *  \b Applies \b to: \li All acquired and virtual components of class Conveyor
-         *  
-         *  \b Available:     \li Airline applications in active state
-         *                    \li SP system manager
-         *  
-         *  \b Access:        \li Exclusive
-         *                    \li Local/Remote
-         *                    \li Synchronous/Asynchronous
-         */
-
-        returncodes::rc waitForRemovedBaggage (in  types::timeout to,
-                                               in  types::reference appRef,
-                                               out types::Event e);                                       
-
-    };
 };
-#endif  // COMPS_IDL 
\ No newline at end of file
+#endif  // COMPS_IDL
+
diff --git a/SelfServiceCommon/Massai/idl/Cuss/types.idl b/SelfServiceCommon/Massai/idl/Cuss/types.idl
index fc808360..f7ba95e1 100644
--- a/SelfServiceCommon/Massai/idl/Cuss/types.idl
+++ b/SelfServiceCommon/Massai/idl/Cuss/types.idl
@@ -4,16 +4,15 @@
 //
 //  Purpose:   Type definitions for CUSS idls
 //
-//  Date:      02.03.2009
+//  Date:      17.06.2013
 //
-//  Version:   1.2
+//  Version:   1.3
 //
-//  Author:    CUSS Management Group
+//  Author:    IATA Passenger Experience Management Group: CUWG CUSS-TSG
 //
-//  Copyright(c) 2003,2009 International Air Transport Association, All Rights Reserved
+//  Copyright(c) 2003,2009,2013 International Air Transport Association, All Rights Reserved
 //
-//  Note:      This IDL file is backward-compatible with that of CUSS 0.2.1 and CUSS 1.0
-//             Please refer to the CUSS 1.2 Technical Specification for more information
+//  Note:      Please refer to the CUSS 1.3 Technical Specification for more information
 //
 //----------------------------------------------------------------------------
 
@@ -28,9 +27,9 @@
 
 #pragma prefix "cuss.iata.org"
 
-/** 
- *  Definition of the Data Types 
- * 
+/**
+ *  Definition of the Data Types
+ *
  *  @note  If your version of the IDL compiler treats eventType as a CORBA IDL identifier,
  *         you will need to escape it by prepending an underscore (_) to it, that is
  *         replace all occurrences of eventType with _eventType
@@ -46,29 +45,29 @@ module types
     typedef sequence<ior> iorlist;      /**< List of IORs */
     typedef sequence<octet> bytestream; /**< Definition for data streams */
     typedef any correlation;            /**< Used as a user defined private identification */
-    
-    /** The time out data type. 
+
+    /** The time out data type.
      * A value > 0 specifies a synchronous call with timeout in MilliSeconds.
-     * A value < 0 specifies an asynchronous call with timeout in MilliSeconds 
-     */     
-    typedef long timeout;            
-                                      
+     * A value < 0 specifies an asynchronous call with timeout in MilliSeconds
+     */
+    typedef long timeout;
+
     const timeout BLOCK_  = 0;       /**< Wait forever on synchronous calls */
 
     /**
      *  Application and Kiosk Identification
-     */      
+     */
     struct akID
     {
       name companyCode;     /**< eg 3L- or 2L-code for airlines */
       name applicationName; /**< Name of the application */
-      
+
       name vendorCode;      /**< Vendor specific code (used for SM-Interface) */
-      name kioskName;       /**< Name of the the kiosk (used for SM-Interface) */
+      name kioskName;       /**< Name of the kiosk (used for SM-Interface) */
     };
 
     /**
-     * Kiosk location identification 
+     * Kiosk location identification
      */
     struct location
     {
@@ -83,16 +82,16 @@ module types
      */
     enum orientation
     {
-        north_, 
+        north_,
         south_,
         east_,
         west_,
         undefined_
     };
-    
+
     /**
      * Base definition for GPS coordinates
-     */      
+     */
     struct coordinate
     {
         orientation  direction;   /**< north, south, east, west or undefined */
@@ -101,35 +100,35 @@ module types
         long         seconds;     /**< Subdivision in seconds */
         long         hundreths;   /**< Subdivision in hundredths of a second */
     };
-    
+
     /**
      * CUSS uses GPS coordinates to inform about the exact kiosk location
-     */      
+     */
     struct gps
     {
         coordinate longitude;  /**< Value for longitude coordinate */
         coordinate latitude;   /**< Value for latitude coordinate */
         long       altitude;   /**< Height in meters from sea level */
     };
-    
+
     /**
      * Structure returned with the <i>level-directive</i>
-     */      
+     */
     struct EnvironmentLevel
     {
-        timeout   sessionTimeout; 
+        timeout   sessionTimeout;
         /**< session timeout (in milliseconds) for active applications */
-        
-        timeout   killTimeout;    
+
+        timeout   killTimeout;
         /**< Time (in milliseconds) left before an application is killed */
 
         akID      kioskID;       /**< Identification of the kiosk */
         location  kioskLocation; /**< Location of the kiosk (text form) */
         gps       gpsLocation;   /**< GPS coordinates of the kiosk */
 
-        name      cussVersion;             
+        name      cussVersion;
         /**< contains a comma-separated string for all CUSS versions supported */
-        
+
         name      cussInterfaceVersionMin; /**< This field may be left blank */
         name      cussInterfaceVersionMax; /**< This field may be left blank */
 
@@ -142,39 +141,39 @@ module types
         name      osName;     /**< Name of the installed operating system */
         name      osVersion;  /**< Version of the installed operating system */
 
-        /** Token reference that is passed to applications. 
+        /** Token reference that is passed to applications.
          *  This reference is used as a password for all further directives to the platform */
-         
-        reference applicationToken; 
+
+        reference applicationToken;
     };
 
-    /** 
+    /**
      * Base environment component definition
-     */         
+     */
     struct EnvironmentComponent
     {
         name       virtualComponentName;  /**< refer to section 3.2.2  */
-        ior        virtualComponentRef;   
+        ior        virtualComponentRef;
         /**< CORBA reference to the virtual component (IOR) */
 
-        name       realComponentName;     
+        name       realComponentName;
        /**< This must be unique per peripheral, used for comparison only */
-              
-        indexList  linkedComponents;      
+
+        indexList  linkedComponents;
         /**< This list of indexes indicates, at which position in the component list
              the linked components can be found (Index counting starts at 0). */
-                                                    
+
     };
 
     /**
      * The platform returns a list of all virtual components with this data type
-     */      
+     */
     typedef sequence<EnvironmentComponent> EnvironmentComponents;
 
     /**
-     *  Data-status codes are used to describe the validity of the data records which are 
+     *  Data-status codes are used to describe the validity of the data records which are
      *  transmitted by an event. The data status codes are defined in file <i>codes.idl</i>
-     */      
+     */
     typedef long dataStatus;
 
     /**
@@ -182,8 +181,8 @@ module types
      */
     struct dataRecord
     {
-        dataStatus  status;  /**< Status of the data in this data record */ 
-        bytestream  message; /**< The data itself */ 
+        dataStatus  status;  /**< Status of the data in this data record */
+        bytestream  message; /**< The data itself */
     };
 
     /**
@@ -196,9 +195,9 @@ module types
     };
 
     /**
-     * Type definition for AEA data which is used by ATB2 and BagTag printers 
+     * Type definition for AEA data which is used by ATB2 and BagTag printers
      */
-    typedef bytestream aeaDataType; 
+    typedef bytestream aeaDataType;
 
     /**
      * Type definition for SVG data which is used by a General Purpose Printers (GPP)
@@ -214,10 +213,10 @@ module types
     /**
      * Definition for the <i>registerEvent</i> directive
      */
-    enum action 
-    { 
-      subscribe_,   /**< Used to subscribe/register an event */ 
-      discard_      /**< Used to discard/deregister an event */ 
+    enum action
+    {
+      subscribe_,   /**< Used to subscribe/register an event */
+      discard_      /**< Used to discard/deregister an event */
     };
 
     /**
@@ -225,21 +224,21 @@ module types
      */
     enum evtCategory
     {
-      alarm_,  /**< Manual intervention is required (hard condition) */ 
-      alert_,  /**< Manual intervention is not needed (soft condition)*/ 
-      normal_  /**< Normal event (no error/warning condition) */ 
+      alarm_,  /**< Manual intervention is required (hard condition) */
+      alert_,  /**< Manual intervention is not needed (soft condition)*/
+      normal_  /**< Normal event (no error/warning condition) */
     };
-    
+
     /**
-     * The type of the event that has been sent. 
-     * In CUSS 1.0, if an event is both private and platform, choose platform as the event type
+     * The type of the event that has been sent.
+  * In CUSS 1.0, if an event is both private and platform, choose platform as the event type
      */
     enum evtType
     {
-      invalid_, /**< Invalid event (may be used in the returned event of a directive call */ 
-      private_, /**< Private event (received only by the applicable application) */ 
-      public_,  /**< Public event  (received only by all listening applications)*/ 
-      platform_ /**< Platform event (received only by the applicable application and SP SM) */ 
+      invalid_, /**< Invalid event (may be used in the returned event of a directive call */
+      private_, /**< Private event (received only by the applicable application) */
+      public_,  /**< Public event  (received only by all listening applications)*/
+      platform_ /**< Platform event (received only by the applicable application and SP SM) */
     };
 
     /**
@@ -247,47 +246,47 @@ module types
      */
     enum evtMode
     {
-      solicited_,   /**< Event is related to a previous directive call */ 
-      unsolicited_  /**< Event is NOT related to any previous directive call */ 
+      solicited_,   /**< Event is related to a previous directive call */
+      unsolicited_  /**< Event is NOT related to any previous directive call */
     };
 
     /**
-     * This definition is used to specify which events should be received by 
+     * This definition is used to specify which events should be received by
      * the instance that acquires a component or registers for event(s)
-     *
+  *
      */
     enum evtFilterType
     {
-      all_,       /**<  Receive all events */ 
-      any_,       /**<  Receive any event (used for <i>eventWait</i> only) */ 
-      nil_,       /**<  Receive no event */ 
-      code_,      /**<  Receive event related to specific event code(s) */ 
-      type_,      /**<  Receive related to specific event type(s) */ 
-      component_  /**<  Receive related to specific component(s) */ 
+      all_,       /**<  Receive all events */
+      any_,       /**<  Receive any event (used for <i>eventWait</i> only) */
+      nil_,       /**<  Receive no event */
+      code_,      /**<  Receive event related to specific event code(s) */
+      type_,      /**<  Receive related to specific event type(s) */
+      component_  /**<  Receive related to specific component(s) */
     };
 
-    typedef long evtCode;         /**< Event codes as defined in <i>codes.idl</i> */ 
-    typedef long evtStatusCode;   /**< Status codes as defined in <i>codes.idl</i> */ 
-    
-    /** 
+    typedef long evtCode;         /**< Event codes as defined in <i>codes.idl</i> */
+    typedef long evtStatusCode;   /**< Status codes as defined in <i>codes.idl</i> */
+
+    /**
      *  This definition is more obvious than just the CORBA::any type.
      *  A datastream may consist of: <i>aeaDataType, svgDataType, nilDataType, msgDataType</i>
      *  (Datastreams must always be complete and NOT segmented).
-     *  
+     *
      *  In CUSS 1.0, datastream may also consist of:
      *  string,        used for clock data type, format is (yyyymmddhhmmss) or
      *  const long,    used for switch data type, value is one the following:
      *  (OFF= 0, ON=1, OPEN=2, CLOSED=3, YES = 4, NO=5, UNKNOWN=6)
-     */     
-    typedef any  datastream;      
+     */
+    typedef any  datastream;
 
     /**
      * Predefinition for <i>evtAcquireFilter</i> data type
      */
     union evtCodeFilterUnion switch(evtFilterType)
     {
-      case all_       :                         
-      case any_       : any filterALLorANY;     
+      case all_       :
+      case any_       : any filterALLorANY;
       case component_ : iorlist filterCOMPONENT;
     };
 
@@ -311,9 +310,9 @@ module types
      */
     union evtTypeFilterUnion switch(evtFilterType)
     {
-      case all_       :                           
-      case any_       : any filterALLorANY;       
-      case component_ : iorlist filterCOMPONENT;  
+      case all_       :
+      case any_       : any filterALLorANY;
+      case component_ : iorlist filterCOMPONENT;
     };
 
     /**
@@ -335,10 +334,10 @@ module types
      */
     union evtComponentFilterUnion switch(evtFilterType)
     {
-      case all_  :                                
-      case any_  : any filterALLorANY;            
-      case code_ : sequence<evtCode> filterCODE;  
-      case type_ : sequence<evtType> filterTYPE;  
+      case all_  :
+      case any_  : any filterALLorANY;
+      case code_ : sequence<evtCode> filterCODE;
+      case type_ : sequence<evtType> filterTYPE;
     };
 
     /**
@@ -358,32 +357,32 @@ module types
     /**
      * This data type is passed to the <i>registerEvent</i> directive to specify
      *  which events are received from the platform
-     *
-     * @note:   In CUSS 1.0, implementing event filtering is not mandatory.
-     *
+  *
+  * @note:   In CUSS 1.0, implementing event filtering is not mandatory.
+  *
      */
     union evtFilter switch(evtFilterType)
     {
       case all_       :
-      case any_       : any filterALLorANY;                 
-      case code_      : evtCodeFilter filterCODE;           
-      case type_      : evtTypeFilter filterTYPE;           
-      case component_ : evtComponentFilter filterCOMPONENT; 
+      case any_       : any filterALLorANY;
+      case code_      : evtCodeFilter filterCODE;
+      case type_      : evtTypeFilter filterTYPE;
+      case component_ : evtComponentFilter filterCOMPONENT;
     };
 
     /**
      *  This data type is passed to the <i>component acquire</i> directive to specify
      *  which events are received from this virtual component
-     *
-     * @note:   In CUSS 1.0, implementing event filtering is not mandatory.
-     *
+  *
+  * @note:   In CUSS 1.0, implementing event filtering is not mandatory.
+  *
      */
     union evtAcquireFilter switch(evtFilterType)
     {
-      case all_  :                               
-      case nil_  : any filterALLorNIL;           
-      case code_ : sequence<evtCode> filterCODE;  
-      case type_ : sequence<evtType> filterTYPE; 
+      case all_  :
+      case nil_  : any filterALLorNIL;
+      case code_ : sequence<evtCode> filterCODE;
+      case type_ : sequence<evtType> filterTYPE;
     };
 
     /**
@@ -420,28 +419,28 @@ module types
      */
     union evtDescription switch(evtFilterType)
     {
-      case any_       :                                               
-      case code_      :                                               
+      case any_       :
+      case code_      :
       case type_      : evtDescrANY_CODE_TYPE eventDescrANY_CODE_TYPE;
-      case component_ : evtDescrCOMPONENT eventDescrCOMPONENT;        
-    };                                                                  
-                                                                        
+      case component_ : evtDescrCOMPONENT eventDescrCOMPONENT;
+    };
+
 #ifndef _TIME_BASE_IDL_
 
     /**
      *  Definition of TimeT borrowed from the CORBA Time Service.
-     *  TimeT represents a simple time value, witch is 64 bits in size, 
+     *  TimeT represents a simple time value, which is 64 bits in size,
      *  and holds the number of 100 nanoseconds that have passed since the base time.
      *  For absolute time calculations, the base is <i>15 October 1582 00:00 </i>.
      *
-     *  Note: If your IDL compiler does not yet support the <i>long long</i> data type, 
+     *  Note: If your IDL compiler does not yet support the <i>long long</i> data type,
      *        please compile this module with the preprocessor definition <i>NOLONGLONG</i>.
-     *        
+     *
      */
-     
+
 #ifdef NOLONGLONG
 
-    struct ulonglong 
+    struct ulonglong
     {
         unsigned long low;
         unsigned long high;
@@ -459,7 +458,7 @@ module types
     /**
      *  Event definition.
      *  This definition is used for all events and return values that are used within the platform
-     */ 
+     */
     struct Event
     {
         TimeT           timeStamp;        /**< Time stamp in UTC format */
@@ -467,17 +466,17 @@ module types
         location        kioskLocation;    /**< Location of the kiosk (text form) */
         gps             gpsLocation;      /**< GPS coordinates of the kiosk */
 
-        name            componentRef;        
-        /**< reference of the component if it is the event source */
-        
-        name            functionName;        
-        /**< name of the function/directive which has been executed 
+        name            componentRef;
+  /**< reference of the component if it is the event source */
+
+        name            functionName;
+        /**< name of the function/directive which has been executed
              (this field will be empty for unsolicited events) */
 
-        evtCode         eventCode;           
+        evtCode         eventCode;
         /**< Application or component state transition or the current application
              or component state if no transition applies */
-        
+
         evtMode         eventMode;        /**< solicited, unsolicited */
         evtType         eventType;        /**< invalid, private, public, platform */
         evtCategory     eventCategory;    /**< alarm, alert, normal */
@@ -491,16 +490,16 @@ module types
      *  Event listener definition.
      *  This interface is passed on acquiring virtual components or with the
      *  <i>registerEvent</i> directive
-     */      
+     */
     interface evtListener
     {
         /**
          *  This function is called whenever an event is sent to the application.
          *
          *  @param  e    The event that is passed to the application
-         */     
+         */
         void callback(in Event e);
     };
 };
 #endif // TYPES_IDL
- 
+
-- 
2.41.0.windows.1

