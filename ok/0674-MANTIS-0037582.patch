From f2658e62214a07ec08779da0d06d01ef1a4103cb Mon Sep 17 00:00:00 2001
From: tgeisler <tgeisler@90b65887-3827-0410-9a23-83215b262276>
Date: Mon, 10 Aug 2015 07:59:09 +0000
Subject: [PATCH 0674/1076] MANTIS 0037582 MANTIS 0037657: DoorDevice: add
 extended door information MANTIS 0037656: DoorDevice: reenable pax side a/b
 information for modbus 2.2 and newer MANTIS 0037582: DoorDevice: add pax
 reverse detection and handling (since R10)

git-svn-id: svn://localhost/SelfServiceCommon/trunk@880 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/idl/Massai/doordev.idl             | 52 ++++++++++++-------
 1 file changed, 33 insertions(+), 19 deletions(-)

diff --git a/SelfServiceCommon/Massai/idl/Massai/doordev.idl b/SelfServiceCommon/Massai/idl/Massai/doordev.idl
index 667b65ba..9e6adbad 100644
--- a/SelfServiceCommon/Massai/idl/Massai/doordev.idl
+++ b/SelfServiceCommon/Massai/idl/Massai/doordev.idl
@@ -25,7 +25,6 @@
  */
 module doordev
 {
-
     /** Possible return codes **/
     enum RC
     {
@@ -42,13 +41,13 @@ module doordev
         CMD_DOOR_CLOSE,                 /**< Closes the door */
         CMD_DOOR_LOCK,                  /**< Lock the door */
         CMD_PANIC_OPEN,                 /**< Opens the door for panic situations */
-        CMD_PAX_PASS,                   /**< Passes one passager (opens door
+        CMD_PAX_PASS,                   /**< Passes one passenger (opens door
                                              and closes automatically after pax passed;
                                              Depends on hardware, if supported) */
         CMD_SET_LEDS,                   /**< LED control command, command.commandData contains setLedCommandList in that case */
         CMD_SET_VALUE,                  /**< set device specific values */
         CMD_GET_VALUE,                  /**< read device specific values */
-        CMD_BUZZER,                      /**< trigger a signal of a specified length, command.commandData contains buzzerData*/
+        CMD_BUZZER,                     /**< trigger a signal of a specified length, command.commandData contains buzzerData*/
         CMD_CANCEL                      /**< cancel a PAX PASS command */
     };
 
@@ -66,7 +65,8 @@ module doordev
         IND_SET_VALUE_DONE,             /**< Value set indication */
         IND_GET_VALUE_DONE,             /**< Value get indication */
         IND_BUTTON_INFO,                /**< button state changed, indication.indicationData contains buttonList with button states*/
-        IND_PAX_STATE                   /**< Pax was detected or leaved the gate, indication.indicationData contains paxStateList with pax states*/
+        IND_PAX_STATE,                  /**< Pax was detected or leaved the gate, indication.indicationData contains paxStateList with pax states*/
+        IND_REVERSE_PASS_END           /**< Indication is send when the gate leaves the REVERSE_PASS mode, indication.indicationData contains the count of paxes as VAL_PAX_COUNT that passed from reverse side */  
         // To be continued...
     };
 
@@ -81,27 +81,37 @@ module doordev
 
     enum GATE_STAT
     {
-        STAT_GT_OK,                  /* Gate is OK */
-        STAT_GT_ERROR,               /* Gate is in errored state */
-        STAT_GT_FRAUD,               /* Fraud detected */
-        STAT_GT_PANIC_OPEN,          /* Gate is in panic open/firealarm mode */
-        STAT_GT_DOOR_BLOCKED         /* Door is blocked*/
+        STAT_GT_OK,                     /* Gate is OK */
+        STAT_GT_ERROR,                  /* Gate is in errored state */
+        STAT_GT_FRAUD,                  /* Fraud detected */
+        STAT_GT_PANIC_OPEN,             /* Gate is in panic open/firealarm mode */
+        STAT_GT_DOOR_BLOCKED,           /* Door is blocked*/
+        STAT_GT_REVERSE_PASS            /* Door is handling a reverse pass that was automatically or by button triggered*/
     };
     
     enum DOOR_STAT
     {
-        DOOR_UNKNOWN,             /* door state is unknown */
-        DOOR_OPEN,                /* door is open */
-        DOOR_CLOSE                /* door is closed */
+        DOOR_UNKNOWN,                   /* door state is unknown */
+        DOOR_OPEN,                      /* door is open */
+        DOOR_CLOSE                      /* door is closed */
+    };
+
+    enum DOOR_INFO
+    {
+        DOOR_INFO_NONE,                  /* special door information is not available */
+        DOOR_INFO_OPEN_NORMAL,           /* door is open in direction a->b. a is the entry side, b the exit side */
+        DOOR_INFO_OPEN_REVERSE,          /* door is open in reverse direction b->a. a is the entry side, b the exit side */
+        DOOR_INFO_SAFETY_STOPPED,        /* door movement is stopped because of safety */
+        DOOR_INFO_OBSTACLE_STOPPED       /* door movement is stopped because of an obstacle */
     };
     
     enum ERROR_TYPE
     {
-        ERROR_NONE,               /* no error */
-        ERROR_DISCONNECTED,       /* disconnected */
-        ERROR_HW,                 /* general hardware failure */
-        ERROR_OOS,                /* out of service */
-        ERROR_PWR                 /* power failure */
+        ERROR_NONE,                     /* no error */
+        ERROR_DISCONNECTED,             /* disconnected */
+        ERROR_HW,                       /* general hardware failure */
+        ERROR_OOS,                      /* out of service */
+        ERROR_PWR                       /* power failure */
     };
     
     enum FRAUD_TYPE
@@ -114,7 +124,8 @@ module doordev
         FRAUD_INTRUSION_LONG_TRANSIT,   /* A person took too much time to end the transit */
         FRAUD_TAIL_GATING,              /* Tail gating has been detected */
         FRAUD_WRONG_WAY,                /* Wrong Way has been detected */
-        FRAUD_CRAWL_UNDER               /* A person crawled under the flaps */
+        FRAUD_CRAWL_UNDER,              /* A person crawled under the flaps */
+        FRAUD_TAMPER_DETECTED           /* Any cabinet door is opened */
     };
     
     enum BUTTON_TYPE
@@ -136,6 +147,7 @@ module doordev
         ERROR_TYPE     error;
         DOOR_STAT      door_state;
         FRAUD_TYPE     fraud;
+        DOOR_INFO      door_information;
     };
     
     /**< Door device capabilities */
@@ -208,6 +220,9 @@ module doordev
         long            tone;         /**< frequency or tone type (device dependent, not used with Gunnebo Gate) */
         long            repetition;   /**< repeat signal n times (device dependent, not used with Gunnebo Gate) */
     };
+
+    /**< Used as counter type in the indication.indicationData field of IND_REVERSE_PASS_DONE indication from the door device */
+    typedef long VAL_PAX_COUNT;
     
     /**< Command to door device */
     struct command
@@ -232,7 +247,6 @@ module doordev
    interface Handler : DeviceComponents::Generic
    {
    };
-
 };
 
 #endif // DOORDEV_IDL
-- 
2.41.0.windows.1

