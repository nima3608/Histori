From 2575954a6018f9a018405c4586a374f01e1410d3 Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 24 Nov 2020 20:41:11 +0000
Subject: [PATCH 1037/1077] MANTIS 0059165 initial: Call CUSS 1.5 Shortcuts
 without extension from platform config

CUSS_BROWSER_CHROME.exe, CUSS_BROWSER_FIREFOX.exe, CUSS_BROWSER_IE.exe
V1.0.0.0



git-svn-id: svn://localhost/SelfServiceCommon/trunk@1611 90b65887-3827-0410-9a23-83215b262276
---
 SelfServiceCommon/Massai/cpp/CallCmd/call.cmd |   1 +
 .../Massai/cpp/CallCmd/inc/local_def.h        |  25 ++++
 .../Massai/cpp/CallCmd/makefile.mak           |  59 ++++++++
 .../Massai/cpp/CallCmd/res/fileDescription.rc |  35 +++++
 .../Massai/cpp/CallCmd/src/CallCmd.cpp        | 138 ++++++++++++++++++
 5 files changed, 258 insertions(+)
 create mode 100644 SelfServiceCommon/Massai/cpp/CallCmd/call.cmd
 create mode 100644 SelfServiceCommon/Massai/cpp/CallCmd/inc/local_def.h
 create mode 100644 SelfServiceCommon/Massai/cpp/CallCmd/makefile.mak
 create mode 100644 SelfServiceCommon/Massai/cpp/CallCmd/res/fileDescription.rc
 create mode 100644 SelfServiceCommon/Massai/cpp/CallCmd/src/CallCmd.cpp

diff --git a/SelfServiceCommon/Massai/cpp/CallCmd/call.cmd b/SelfServiceCommon/Massai/cpp/CallCmd/call.cmd
new file mode 100644
index 00000000..ff7837b0
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CallCmd/call.cmd
@@ -0,0 +1 @@
+pause 
diff --git a/SelfServiceCommon/Massai/cpp/CallCmd/inc/local_def.h b/SelfServiceCommon/Massai/cpp/CallCmd/inc/local_def.h
new file mode 100644
index 00000000..1ce1e525
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CallCmd/inc/local_def.h
@@ -0,0 +1,25 @@
+#define FILE_VER_BIN     1,0,0,0
+#define FILE_VER_STR     "FileVersion", "1.0.0.0"
+
+/*!
+\file
+\brief Release Notes - CUSS_BROWSER_CHROME.exe, CUSS_BROWSER_FIREFOX.exe, CUSS_BROWSER_IE.exe
+
+\page CUSS_BROWSER_CHROME.exe, CUSS_BROWSER_FIREFOX.exe, CUSS_BROWSER_IE.exe Release Notes - CUSS_BROWSER_CHROME.exe, CUSS_BROWSER_FIREFOX.exe, CUSS_BROWSER_IE.exe - Program executing an cmd batch
+
+@version 1.0.0.0
+
+\section changehistory Change history
+
+CUSS_BROWSER_CHROME.exe, CUSS_BROWSER_FIREFOX.exe, CUSS_BROWSER_IE.exe
+
+\version 1.0.0.0
+\li 12.11.2020
+\li initial - SteT Mantis 0059165: Call CUSS 1.5 Shortcuts without extension from platform config
+
+*/
+
+#define FILEDESCRIPTION  "FileDescription",  "execute cmd batch"
+#define INTERNALNAME     "InternalName",     "CallCmd.exe"
+#define ORIGINALFILENAME "OriginalFilename", "CallCmd.exe"
+#define LEGALTRADEMARKS  "LegalTrademarks",  ""
diff --git a/SelfServiceCommon/Massai/cpp/CallCmd/makefile.mak b/SelfServiceCommon/Massai/cpp/CallCmd/makefile.mak
new file mode 100644
index 00000000..c51bfee2
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CallCmd/makefile.mak
@@ -0,0 +1,59 @@
+!include $(BUILDROOT)\Build\cpp\makefile.common.mak
+
+###
+
+MY_CFLAGS = \
+  $(INC_BOOST) \
+  $(INC_INTERFACES) \
+
+MY_BIN_RES = $(_OBJ)\fileDescription.res
+
+MY_BIN_OBJS = $(_OBJ)\CallCmd.obj
+    
+MY_BIN_USER_LIBS = \
+  $(LIB_TRACE) \
+  $(LIB_SYSTOOLS) \
+  $(LIB_TOOLS) \
+
+MY_BIN_LINKLIBS = \
+  $(LIB_BOOST) \
+
+###
+
+MY_BIN1 = $(_BIN)\CUSS_BROWSER_CHROME.exe
+
+MY_BIN1_RES = $(MY_BIN_RES)
+
+MY_BIN1_OBJS = $(MY_BIN_OBJS)
+    
+MY_BIN1_USER_LIBS = $(MY_BIN_USER_LIBS)
+
+MY_BIN1_LINKLIBS = $(MY_BIN_LINKLIBS)
+
+###
+
+MY_BIN2 = $(_BIN)\CUSS_BROWSER_FIREFOX.exe
+
+MY_BIN2_RES = $(MY_BIN_RES)
+
+MY_BIN2_OBJS = $(MY_BIN_OBJS)
+    
+MY_BIN2_USER_LIBS = $(MY_BIN_USER_LIBS)
+
+MY_BIN2_LINKLIBS = $(MY_BIN_LINKLIBS)
+
+###
+
+MY_BIN3 = $(_BIN)\CUSS_BROWSER_IE.exe
+
+MY_BIN3_RES = $(MY_BIN_RES)
+
+MY_BIN3_OBJS = $(MY_BIN_OBJS)
+    
+MY_BIN3_USER_LIBS = $(MY_BIN_USER_LIBS)
+
+MY_BIN3_LINKLIBS = $(MY_BIN_LINKLIBS)
+
+###
+
+!include $(BUILDROOT)\Build\cpp\makefile.rules.mak
diff --git a/SelfServiceCommon/Massai/cpp/CallCmd/res/fileDescription.rc b/SelfServiceCommon/Massai/cpp/CallCmd/res/fileDescription.rc
new file mode 100644
index 00000000..b00e382a
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CallCmd/res/fileDescription.rc
@@ -0,0 +1,35 @@
+#include "local_def.h"
+#include "resource/appVersionInfoResource.h"
+
+VS_VERSION_INFO VERSIONINFO
+  FILEVERSION    FILE_VER_BIN
+  PRODUCTVERSION PRODUCT_VER_BIN
+  FILEFLAGSMASK  VS_FFI_FILEFLAGSMASK
+#ifdef _DEBUG
+  FILEFLAGS      VS_FF_DEBUG
+#else
+  FILEFLAGS      0x0L
+#endif
+  FILEOS         (VOS_NT | VOS__WINDOWS32)
+  FILETYPE       VFT_APP
+  BEGIN
+    BLOCK "StringFileInfo"
+    BEGIN
+      BLOCK GERMAN_UNICODE
+      BEGIN
+        VALUE COMPANY
+        VALUE FILEDESCRIPTION
+        VALUE FILE_VER_STR
+        VALUE INTERNALNAME
+        VALUE COPYRIGHT
+        VALUE LEGALTRADEMARKS
+        VALUE ORIGINALFILENAME
+        VALUE PRODUCT
+        VALUE PRODUCT_VER_STR
+      END
+    END
+    BLOCK "VarFileInfo"
+    BEGIN
+      VALUE "Translation", GERMAN_LANG, UNICODE_CHARSET
+    END
+  END
diff --git a/SelfServiceCommon/Massai/cpp/CallCmd/src/CallCmd.cpp b/SelfServiceCommon/Massai/cpp/CallCmd/src/CallCmd.cpp
new file mode 100644
index 00000000..1af2f5ec
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CallCmd/src/CallCmd.cpp
@@ -0,0 +1,138 @@
+#include <memory>
+#include "boost/filesystem.hpp"
+#include "boost/thread.hpp"
+#include "boost/bind.hpp"
+#include "sysTools/mSysProcess.hpp"
+#include "systools/mSysProcessTerminate.h"
+#include "tools/TraceClient.h"
+#include "trc/trace.h"
+#include "local_def.h"
+#include "global_def.h"
+
+namespace
+{
+  using MASSAI::trace::TraceClient;
+  using MASSAI::trace::TraceInterface;
+  using Materna::MSSD::eventSemaphore;
+  using Materna::MSSD::eventSemaphore_Exception;
+  typedef std::shared_ptr<mSysProcess::child> ProcessPtr;
+  const std::string SPACE = " ";
+  const std::string QUOTE = "\"";
+  const std::string CMD_EXTENSION = ".cmd";
+  const unsigned int PROCESS_WAIT_S = 2;
+
+  class StreamHandler: public mSysProcess::callBack
+  {
+    public:
+      StreamHandler(const std::string& streamId, TraceInterface& trc);
+      void lineOut(const char* line) const;
+
+    private:
+      const std::string streamId;
+      TraceInterface& trc;
+  };
+
+  class ProcessFactory
+  {
+    public:
+      ProcessFactory(TraceInterface& trc);
+      ProcessPtr createProcess(const std::string& cmdLine);
+
+    private:
+      TraceInterface& trc;
+      StreamHandler stdOut;
+      StreamHandler stdErr;
+      StreamHandler logging;
+  };
+
+
+  StreamHandler::StreamHandler(const std::string& streamId, TraceInterface& trc):
+    streamId(streamId),
+    trc(trc)
+  {}
+
+  void StreamHandler::lineOut(const char* line) const
+  {
+    trc.writeTrace(BasicRuntime_HERE, "%s %.2000s", streamId.c_str(), line);
+  }
+
+
+  ProcessFactory::ProcessFactory(TraceInterface& trc):
+    trc(trc),
+    stdOut("STDOUT", trc),
+    stdErr("STDERR", trc),
+    logging("LOGGING", trc)
+  {}
+
+  ProcessPtr ProcessFactory::createProcess(const std::string& cmdLine)
+  {
+    trc.writeTrace(BasicRuntime_HERE, "Start (%.2000s)", cmdLine.c_str());
+    mSysProcess::parent processFactory;
+    processFactory.setStdOut(stdOut);
+    processFactory.setStdErr(stdErr);
+    processFactory.setReuseConsole();
+    processFactory.setCommandline(cmdLine.c_str());
+    processFactory.setLogging(logging);
+    return ProcessPtr(processFactory.newChild());
+  }
+
+
+  std::string createCommandLine(int argc, char* argv[])
+  {
+    std::string cmdLine = "cmd.exe /c";
+    boost::filesystem::path cmd(argv[0]);
+    cmdLine += SPACE + QUOTE;
+    cmdLine += QUOTE + cmd.stem().string() + CMD_EXTENSION + QUOTE;
+    for(int i = 1; i < argc; i++)
+    {
+      cmdLine += SPACE + QUOTE + argv[i] + QUOTE;
+    }
+    cmdLine += QUOTE;
+    return cmdLine;
+  }
+
+  void waitForProcess(ProcessPtr process, eventSemaphore& terminate)
+  {
+    process->waitForTermination();
+    terminate.post();
+  }
+}
+
+int main(int argc, char* argv[])
+{
+  int result = 3;
+  TraceClient trc(argv[0]);
+  try
+  {
+    eventSemaphore terminate;
+    mSysProcessTerminate::setShutdownHook(mSysProcessTerminate::SHUTDOWN_NORMAL, &terminate, &trc);
+    trc.writeTrace(BasicRuntime_HERE, "Start %s (%s: %s / %s: %s / %s; %s)", argv[0], PRODUCT_VER_STR, FILE_VER_STR, __DATE__, __TIME__);
+    ProcessFactory factory(trc);
+    ProcessPtr process = factory.createProcess(createCommandLine(argc, argv));
+    if(process->getStatus() != mSysProcess::STATUS_FAILED)
+    {
+      trc.writeTraceText(BasicRuntime_HERE, process->getProcessInformation().c_str());
+      boost::thread waitForProcess(boost::bind(waitForProcess, process, boost::ref(terminate)));
+      trc.writeTraceText(BasicRuntime_HERE, "wait for termination");
+      terminate.wait();
+      trc.writeTraceText(BasicRuntime_HERE, "terminating...");
+      if(process->getStatus() == mSysProcess::STATUS_RUNNING)
+      {
+        trc.writeTraceText(MajorError_HERE, "process still running; wait for process");
+        process->waitForTermination(PROCESS_WAIT_S);
+      }
+    }
+    trc.writeTraceText(BasicRuntime_HERE, process->getProcessInformation().c_str());
+    result = process->getExitCode();
+  }
+  catch(const eventSemaphore_Exception&)
+  {
+    trc.writeTraceText(MajorError_HERE, "open semaphore failed");
+  }
+  catch(...)
+  {
+    trc.writeTraceText(MajorError_HERE, "unknown exception");
+  }
+  mSysProcessTerminate::resetShutdownHook();
+  return result;
+}
-- 
2.41.0.windows.1

