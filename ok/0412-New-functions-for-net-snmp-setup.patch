From 83e10e37f7374965343d62cbd3de065c2c83b693 Mon Sep 17 00:00:00 2001
From: vjudin <vjudin@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 4 Jun 2013 15:10:22 +0000
Subject: [PATCH 0412/1077] New functions for net-snmp setup.

git-svn-id: svn://localhost/SelfServiceCommon/trunk@505 90b65887-3827-0410-9a23-83215b262276
---
 .../src/MConfig_CustomAction.cpp              | 314 ++++++++++++++++++
 1 file changed, 314 insertions(+)

diff --git a/SelfServiceCommon/Massai/cpp/Installer_CustomAction/src/MConfig_CustomAction.cpp b/SelfServiceCommon/Massai/cpp/Installer_CustomAction/src/MConfig_CustomAction.cpp
index e792b5ff..924e4f75 100644
--- a/SelfServiceCommon/Massai/cpp/Installer_CustomAction/src/MConfig_CustomAction.cpp
+++ b/SelfServiceCommon/Massai/cpp/Installer_CustomAction/src/MConfig_CustomAction.cpp
@@ -20,6 +20,7 @@
 #include <strsafe.h>
 #include "wcautil.h"
 
+#include <iosfwd>
 #include <iostream>
 #include <fstream>
 #include <sstream>
@@ -28,6 +29,12 @@
 #include <vector>
 #include <regex>
 
+
+
+
+
+
+
 #include "strutil.h"
 
 #include "MConfig_CA_Log.h"
@@ -37,6 +44,8 @@ typedef std::set<std::wstring> TUNIQUESET;
 #define MAX_NUM_DIALOGS 100
 #define CFGVALUES_TIMEOUT_MS 10*1000
 
+#pragma comment(linker, "/EXPORT:WriteSNMPConfigFile=_WriteSNMPConfigFile@4")
+#pragma comment(linker, "/EXPORT:PrepareAddressValues=_PrepareAddressValues@4")
 
 #define DEL_CFG_FILE_NAME "del_cfg.txt"
 #define	SETINITIAL_FILE_NAME "setinitial_cfg.txt"
@@ -89,6 +98,311 @@ int checkInstalled(MSIHANDLE hInstall, std::wstring& wstrFeature)
 	return ret;
 }
 
+extern "C" UINT __stdcall PrepareAddressValues(MSIHANDLE hInstall)
+{
+    HRESULT hResult = WcaInitialize (hInstall, "PrepareAddressValues");
+    std::wstringstream wostr;
+    const std::wstring wsFunction = ToWiden( __FUNCTION__ ) ;
+    if (FAILED (hResult))
+    {        
+        
+        wostr << wsFunction << L" initially failed hResult " << std::hex <<  hResult ;     
+        Log_Str( wostr );
+        return ERROR_INSTALL_FAILURE;
+    }
+    //-----------------------//    
+    wostr << wsFunction << " initialized OK" ;
+    Log_Str( wostr );
+    wchar_t* wszAgents = NULL;
+    hResult = WcaGetProperty( L"SNMPAGENTS", &wszAgents );
+    wostr << wsFunction ;
+    if( wszAgents != NULL )
+    {
+        wostr << L"\tGetProperty SNMPAGENTS OK hResult = " << hResult << L"; SNMPAGENTS property value is: " << wszAgents;
+        Log_Str( wostr );
+        ReleaseStr( wszAgents );
+    }
+    else
+    {
+        wostr << L"\tSNMPAGENTS property not set still" ;
+    }
+    
+#ifndef MAXHOSTNAMELEN 
+#define MAXHOSTNAMELEN 512
+#endif
+    static const size_t namelen (MAXHOSTNAMELEN );
+    char szHostName[ MAXHOSTNAMELEN ];
+    int rc = ::gethostname( szHostName, MAXHOSTNAMELEN );
+    if(( rc != 0 ) &&  WSAGetLastError() == WSANOTINITIALISED )
+    {
+        WSADATA wsaData;
+        rc = WSAStartup(MAKEWORD(2, 2), &wsaData);
+        if( rc == 0 )
+            rc = ::gethostname( szHostName, MAXHOSTNAMELEN );
+        else
+        {
+            wostr << wsFunction << L"\tWSAStartup() failed rc = " << rc << "; WSAGetLastError() = " << WSAGetLastError();
+            Log_Str( wostr );
+        }
+    }
+    if( rc == 0 )
+    {
+        wostr << wsFunction << L"\tLocal host is " << ToWiden( szHostName );
+        Log_Str( wostr );
+        static const u_short uSnmpAgentPort = 161;
+        hostent* hptr = ::gethostbyname( szHostName );
+        char** pptr = hptr->h_aliases;
+        in_addr inAddr;
+        const char* szAddr = NULL;
+
+        if( hptr->h_addrtype == AF_INET )
+        {
+            inAddr.s_addr = *(u_long*) hptr->h_addr_list[0];
+            szAddr = inet_ntoa( inAddr );
+        }
+        //--------------------------------------------//
+        wostr << wsFunction;
+        if( szAddr != NULL )
+        {
+            hResult = WcaSetProperty( L"SNMPAGENTS", ToWiden( szAddr ).c_str() );
+            wostr << L"\tSNMPAGENTS Property values set: " << ToWiden( szAddr ).c_str() ;
+        }
+        else
+        {
+            wostr << L"\tSNMPAGENTS szAddr = NULL";
+        }
+        Log_Str( wostr );
+    
+    //-----------------------//
+    }
+    else
+    {
+        wostr << wsFunction << "\tgethostname() failed: rc = " << rc << " WSAGetLastError() = " << WSAGetLastError();
+        Log_Str( wostr );
+    }
+    UINT er = SUCCEEDED(hResult) ? ERROR_SUCCESS : ERROR_INSTALL_FAILURE;
+    return WcaFinalize(er);
+}
+
+extern "C" UINT __stdcall WriteSNMPConfigFile (MSIHANDLE hInstall)
+{
+    
+    HRESULT hResult = WcaInitialize (hInstall, "WriteSNMPConfigFile");
+    
+    std::wstringstream wostr;
+    const std::wstring wsFunction = ToWiden( __FUNCTION__ );
+    if (FAILED (hResult))
+    {
+        wostr << wsFunction << L"\tWcaInitialize() failed " << std::hex << hResult ;
+        Log_Str( wostr );
+        return ERROR_INSTALL_FAILURE;
+    }
+    wostr << ToWiden( __FUNCTION__ ) << L"\tWcaInitialize() OK" ;
+    Log_Str( wostr );
+    wchar_t* wszConfDir = NULL;
+    std::string strConfDir ;
+    hResult = WcaGetProperty( L"SNMPCONFIGDIR", &wszConfDir );
+    if( wszConfDir != NULL )
+    {
+        wostr << L"install directory for config files is " << wszConfDir;
+        Log_Str( wostr );
+        strConfDir = ToNarrow(wszConfDir) ;
+        ReleaseStr( wszConfDir );
+    }
+    else
+    {
+        wostr << L"could not get install directory for config files " ;
+        Log_Str( wostr );
+    }
+    // write file C:\usr\share\snmp\snmpd.conf
+    std::string strConfigFileName = strConfDir + "\\snmpd.conf";
+    std::ostringstream ostr;
+    std::ofstream oSnmpdConf( strConfigFileName );
+    if( oSnmpdConf.bad())
+    {
+        wostr << L"!!!CONFIG FILE " << ToWiden( strConfigFileName.c_str() ) << L" IS BAD ON OPEN!!!";
+    }
+    else
+    {
+        wostr << L"!!!CONFIG FILE " << ToWiden( strConfigFileName.c_str() ) << L" IS GOOD ON OPEN!!!";
+    }
+    oSnmpdConf << "##----------START------------------##" << std::endl;
+    oSnmpdConf << "###########################################################################" << std::endl <<
+                  "#" << std::endl <<
+                  "# snmpd.conf" << std::endl << 
+                  "#" << std::endl <<
+                  "#" << std::endl << std::endl <<
+                  "###########################################################################" << std::endl <<
+                  "# SECTION: Access Control Setup" << std::endl <<
+                  "#" << std::endl <<
+                  "#   This section defines who is allowed to talk to your running" << std::endl << 
+                  "#   snmp agent." << std::endl << std::endl <<
+                  "# rocommunity: a SNMPv1/SNMPv2c read-only access community name" << std::endl << 
+                  "#   arguments:  community [default|hostname|network/bits] [oid]" << std::endl << 
+                  "rocommunity public" << std::endl;
+    if( oSnmpdConf.bad())
+    {
+        wostr << wsFunction <<  L"!!!CONFIG FILE " << ToWiden( strConfigFileName.c_str() ) << L" IS BAD ON WRITE!!!";
+    }
+    else
+    {
+        wostr << wsFunction << L"!!!CONFIG FILE " << ToWiden( strConfigFileName.c_str() ) << L" IS good ON WRITE!!!";
+    }
+    //WcaSetProperty(L"SNMPAGENTS",L"1.2.34.56");
+    wchar_t *wszTrapSink = NULL,       // arguments: community-string
+            *wszAgents = NULL;   // arguments: [transport:]port[@interface/address],... 
+    //--------------------------------------------//
+    hResult = WcaGetProperty( L"SNMPAGENTS", &wszAgents );
+    if( wszAgents != NULL )
+    {
+        /* Examples        
+        agentaddress  139.2.249.135
+        agentaddress  udp:10000
+        agentaddress tcp:139.2.249.135:1700
+        */
+        wostr << wsFunction << L"\tGetProperty SNMPAGENTS OK hResult = " << hResult << L"; SNMPAGENTS property value is: " << wszAgents;
+        Log_Str( wostr );
+        //--------------------------------------------//
+        std::wstring wstrAgents( wszAgents );
+        oSnmpdConf << "###########################################################################" << std::endl 
+                   << "# SECTION: Agent Operating Mode"  << std::endl 
+                   << "#" << std::endl 
+                   << "#   This section defines how the agent will operate when it" << std::endl 
+                   << "#   is running.2 " << std::endl 
+                   << std::endl 
+                   << "# agentaddress: The IP address and port number that the agent will listen on." << std::endl 
+                   << "#   By default the agent listens to any and all traffic from any" << std::endl 
+                   << "#   interface on the default SNMP port (161).  This allows you to" << std::endl 
+                   << "#   specify which address, interface, transport type and port(s) that you" << std::endl 
+                   << "#   want the agent to listen on.  Multiple definitions of this token" << std::endl 
+                   << "#   are concatenated together (using ':'s)." << std::endl 
+                   << "#   arguments: [transport:][interface/address][:]port,..." << std::endl ;
+        /* Original description [transport:]port[@interface/address],... IS WRONG */
+
+                   //<< "#agentaddress  139.2.249.135" << std::endl ;
+        wostr << wsFunction << L"\tWrote before AGENT section" << std::endl << L"Input string: " << wszAgents  ;
+        Log_Str( wostr );
+        // wregex wrg( L"((udp|tcp)[:])?(\\d+)(@[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3})?");    
+        unsigned i = 0;
+#if 0  
+        wregex wrg( L"((udp|tcp)[:])?(\\d+)?([[:alnum:]_-]*|([[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}))?(^[:][[:digit:]]{1,5})?");    
+    
+        std::regex_iterator<std::wstring::iterator> rit( wstrAgents.begin(), wstrAgents.end(), wrg);
+        std::regex_iterator<std::wstring::iterator> rend;
+    
+
+        while (rit!=rend) 
+        {
+            if( i++ == 0 )
+                oSnmpdConf << "agentaddress " ;
+            if( rit->str().length() > 0 )
+                oSnmpdConf << ToNarrow( rit->str().c_str()) ;
+            wostr << wsFunction << " AgentAddress: " << rit->str().c_str() ;
+            Log_Str( wostr );
+            ++rit; 
+        }
+        if( i )
+            oSnmpdConf << std::endl;
+#else
+        std::tr1::wregex r2(L"((\\w)*:)?((\\d){1,3}\\.)((\\d){1,3}\\.)((\\d){1,3}\\.)(\\d){1,3}(:(\\d){1,5})?" );
+        std::tr1::wregex r3(L"(((\\w)*:)?)?((\\w)*)?(:(\\d){1,5})?" );    
+         
+         std::wsmatch res2, res3;
+         bool b2 = false, b3 = false;
+         if(( b2 = std::tr1::regex_match( wstrAgents, res2, r2 )) ||
+            ( b3 = std::tr1::regex_match( wstrAgents, res3, r3 )))
+         {
+             oSnmpdConf << "agentaddress " << ToNarrow(( b2? res2[ 0 ]:res3[ 0 ]).str().c_str()) << std::endl;
+         }
+         else
+         {
+             wostr << wsFunction << L" agentaddress invalid " << wstrAgents << std::endl;
+             Log_Str( wostr );
+         }
+
+#endif
+        
+        ReleaseStr( wszAgents );
+    }
+    else
+    {
+        wostr << wsFunction << L" Failed to GetpPoperty SNMPAGENTS" ;
+        Log_Str ( wostr );        
+    }
+
+    //--------------------------------------------//
+    hResult = WcaGetProperty( L"TRAPRECEIVERS", &wszTrapSink  );
+    if( wszTrapSink != NULL )
+    {
+        /**
+         trap2sink: 
+            You can send SNMPv2 traps using the trapsink token. A non-standard port can be specified by adding the port 
+            after the host name or IP address.
+            trap2sink 192.168.1.99:1199 trapComm
+
+        informsink:
+            You can send SNMPv2 informs, which the remote side should confirm, using the informsink token. A non-standard 
+            port can be specified by adding the port after the host name or IP address.
+            informsink 192.1.68.88:1188 trapComm
+        */
+        /*
+        ###########################################################################
+        # SECTION: Trap Destinations
+        #
+        #   Here we define who the agent will send traps to.
+
+        # trapcommunity: Default trap sink community to use
+        #   arguments: community-string
+        trap2sink  traprecv.materna.de:1162  public
+        trap2sink  buc-pc055:1162  public
+        trap2sink buc-pc026
+        trapsess  buc-pc026
+        informsink buc-pc026
+        trapcommunity  public
+        */
+        wostr << wsFunction <<  L" GetProperty( TRAPRECEIVERS ) OK; hResult = " <<  hResult << L" value= \"" << wszTrapSink << L"\"";
+        Log_Str( wostr );
+        oSnmpdConf << "##########################################################################" << std::endl
+                  << "# SECTION: Trap Destinations" << std::endl
+                  << "#" << std::endl
+                  << "#   Here we define who the agent will send traps to." << std::endl
+                  << "# trapcommunity: Default trap sink community to use" << std::endl
+                  << "#   arguments:community-string" << std::endl;                 
+        
+#if 0
+        std::wstring wstrTrapSink( wszTrapSink );
+        wregex wrTrap(L"[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}(:(\\d){1,5})?");
+        std::regex_iterator<std::wstring::iterator> riT( wstrTrapSink.begin(), wstrTrapSink.end(), wrTrap );
+        std::regex_iterator<std::wstring::iterator> rEnd;
+        wostr << ToWiden( __FUNCTION__ ) << L"Input string(trap): " <<  wszTrapSink ;
+        Log_Str ( wostr );
+        while (riT!=rEnd) 
+        {
+            oSnmpdConf << "\ttrap2sink " << ToNarrow( riT->str().c_str()) << std::endl;
+            wostr << "\ttrap2sink " << riT->str().c_str() ;
+            Log_Str ( wostr );
+            ++riT;
+        }
+#else
+        oSnmpdConf << "trap2sink " << ToNarrow( wszTrapSink ) << std::endl;
+#endif
+        
+        //--------------------------------------------//
+        ReleaseStr( wszTrapSink );
+    }
+    else
+    {
+        wostr << wsFunction << L"\tFailed to GetProperty( TRAPRECEIVERS )" ;
+        Log_Str ( wostr );
+    }
+    
+    UINT er = SUCCEEDED(hResult) ? ERROR_SUCCESS : ERROR_INSTALL_FAILURE;
+
+    return WcaFinalize(er);
+
+}
+
+
 extern "C" _declspec(dllexport) UINT __stdcall CA_MutuallyExclusive(MSIHANDLE hInstall)
 {
 	std::wstring wstrPropertyValue;
-- 
2.41.0.windows.1

