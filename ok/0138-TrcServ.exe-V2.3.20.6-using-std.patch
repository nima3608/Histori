From c91d365a1841511ff3a5296816d8dcc9b133f513 Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 23 Nov 2011 12:57:51 +0000
Subject: [PATCH 0138/1000] TrcServ.exe; V2.3.20.6; using std::

git-svn-id: svn://localhost/SelfServiceCommon/trunk@257 90b65887-3827-0410-9a23-83215b262276
---
 .../Services/cpp/TrcServ/inc/TrcServ_def.h    |   7 +-
 .../Services/cpp/TrcServ/src/TrcPrtcl.cpp     | 202 +++++++++---------
 2 files changed, 105 insertions(+), 104 deletions(-)

diff --git a/SelfServiceCommon/Services/cpp/TrcServ/inc/TrcServ_def.h b/SelfServiceCommon/Services/cpp/TrcServ/inc/TrcServ_def.h
index c761c20c..87fa06b4 100644
--- a/SelfServiceCommon/Services/cpp/TrcServ/inc/TrcServ_def.h
+++ b/SelfServiceCommon/Services/cpp/TrcServ/inc/TrcServ_def.h
@@ -12,10 +12,11 @@
 
 /*! \page TrcServ.exe - Trace Service
  *
- *  @version V 2.3.20.5
+ *  @version V 2.3.20.6
  *
  *  \section change1 Change history
  *
+ *  \date 23.11.2011 \li V 2.3.20.6 SteT added std:: in trcprtcl.cpp for cout
  *
  *  \date 29.06.2011 \li V 2.3.20.5 SteT write less traces
  *
@@ -57,8 +58,8 @@
  *
  */
 
-#define FILE_VER_BIN     2,3,20,5
-#define FILE_VER_STR     "FileVersion", "2.3.20.5\0"
+#define FILE_VER_BIN     2,3,20,6
+#define FILE_VER_STR     "FileVersion", "2.3.20.6\0"
 
 #define FILEDESCRIPTION  "FileDescription"  ,"Trace Service\0"
 #define INTERNALNAME     "InternalName"     ,"TrcServ.exe\0"
diff --git a/SelfServiceCommon/Services/cpp/TrcServ/src/TrcPrtcl.cpp b/SelfServiceCommon/Services/cpp/TrcServ/src/TrcPrtcl.cpp
index 05b27406..65496b60 100644
--- a/SelfServiceCommon/Services/cpp/TrcServ/src/TrcPrtcl.cpp
+++ b/SelfServiceCommon/Services/cpp/TrcServ/src/TrcPrtcl.cpp
@@ -215,12 +215,12 @@ long cxBuffer::sendNextEntry()
   if(!isEmpty())
   {
     #ifdef DEBUGOUT
-    cout << "-> cxWrite (Own=" << pEntries[iFirst].lOwnHandle <<", Partner=" << pEntries[iFirst].lPartnerHandle << ", Size=" << pEntries[iFirst].lSize << ")" << endl;
+    std::cout << "-> cxWrite (Own=" << pEntries[iFirst].lOwnHandle <<", Partner=" << pEntries[iFirst].lPartnerHandle << ", Size=" << pEntries[iFirst].lSize << ")" << std::endl;
     dump((char*)pEntries[iFirst].pData, pEntries[iFirst].lSize);
     #endif
     result= cxWrite(pEntries[iFirst].lOwnHandle, pEntries[iFirst].lPartnerHandle, pEntries[iFirst].pData, &(pEntries[iFirst].lSize));
     #ifdef DEBUGOUT
-    cout << "<- cxWrite (Size=" << pEntries[iFirst].lSize << ")=" << result << endl;
+    std::cout << "<- cxWrite (Size=" << pEntries[iFirst].lSize << ")=" << result << std::endl;
     #endif
 
     if(result == CXRC_OK)
@@ -269,12 +269,12 @@ long cxBuffer::Write(long lOwnHandle, long lPartnerHandle, const char* pData, lo
   if (result == CXRC_OK)
   {
     #ifdef DEBUGOUT
-    cout << "-> cxWrite (Own=" << lOwnHandle <<", Partner=" << lPartnerHandle << ", Size=" << *plSize << ")" << endl;
+    std::cout << "-> cxWrite (Own=" << lOwnHandle <<", Partner=" << lPartnerHandle << ", Size=" << *plSize << ")" << std::endl;
     dump(pData, *plSize);
     #endif
       result= cxWrite(lOwnHandle, lPartnerHandle, pData, plSize);
     #ifdef DEBUGOUT
-    cout << "<- cxWrite (Size=" << *plSize << ")=" << result << endl;
+    std::cout << "<- cxWrite (Size=" << *plSize << ")=" << result << std::endl;
     #endif
   }
   if (result != CXRC_OK)
@@ -285,15 +285,15 @@ long cxBuffer::Write(long lOwnHandle, long lPartnerHandle, const char* pData, lo
 void dump(const char* pData, int iLen)
 {
   int i;
-  cout << hex;
+  std::cout << std::hex;
   for(i= 0; i < iLen; i++)
   {
     if ((int)((unsigned char*)pData)[i] < 16)
-      cout << "0";
-    cout << (int)((unsigned char*)pData)[i] << " ";
+      std::cout << "0";
+    std::cout << (int)((unsigned char*)pData)[i] << " ";
   }
-  cout << dec;
-  cout << endl;
+  std::cout << std::dec;
+  std::cout << std::endl;
 }
 
 /*---------------------------------------------------------------------------
@@ -603,7 +603,7 @@ long writeCmdStop01(long OwnHandle, long PartnerHandle, cxBuffer* cxBuf)
   lWritten = lSize;
 
   #ifdef DEBUGOUT
-  cout << "writeCmdStop01" << endl;
+  std::cout << "writeCmdStop01" << std::endl;
   #endif
 
 
@@ -620,12 +620,12 @@ long writeCmdStop01(long OwnHandle, long PartnerHandle, cxBuffer* cxBuf)
   else
   {
     #ifdef DEBUGOUT
-    cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+    std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
     dump((char*)&lType, lWritten);
     #endif
       result= cxWrite(OwnHandle, PartnerHandle, (char*)&lType, &lWritten);
     #ifdef DEBUGOUT
-    cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+    std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
     #endif
   }
   if (lWritten != lSize  && result == CXRC_OK)
@@ -660,7 +660,7 @@ long writeCmdShutdown01(long OwnHandle, long PartnerHandle, cxBuffer* cxBuf)
   lWritten = lSize;
 
   #ifdef DEBUGOUT
-  cout << "writeCmdShutdown01" << endl;
+  std::cout << "writeCmdShutdown01" << std::endl;
   #endif
 
 
@@ -669,12 +669,12 @@ long writeCmdShutdown01(long OwnHandle, long PartnerHandle, cxBuffer* cxBuf)
   else
   {
     #ifdef DEBUGOUT
-    cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+    std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
     dump((char*)&lType, lWritten);
     #endif
     result= cxWrite(OwnHandle, PartnerHandle, (char*)&lType, &lWritten);
     #ifdef DEBUGOUT
-    cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+    std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
     #endif
     if (lWritten != lSize  && result == CXRC_OK)
       result= CXRC_ERROR;
@@ -702,7 +702,7 @@ long writeCmdNewFile01(long OwnHandle, long PartnerHandle, long lTraceLevel, cxB
   long lSize, lWritten;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdNewFile01: " << lTraceLevel << endl;
+    std::cout << "writeCmdNewFile01: " << lTraceLevel << std::endl;
   #endif
 
   char *pBuffer, *pPos;
@@ -725,12 +725,12 @@ long writeCmdNewFile01(long OwnHandle, long PartnerHandle, long lTraceLevel, cxB
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
 
@@ -773,7 +773,7 @@ static long readCmdNewFile01(aMap &Data, char *pCopyBuffer, const char *pBuffer,
     memcpy(&lTraceLevel, pPos, sizeof(long));
     Data.set(DN_LTRACELEVEL, lTraceLevel);
     #ifdef DEBUGOUT
-      cout << "readCmdNewFile01: " << lTraceLevel << endl;
+      std::cout << "readCmdNewFile01: " << lTraceLevel << std::endl;
     #endif
     result= CXRC_OK;
   }
@@ -805,7 +805,7 @@ long writeText01(long OwnHandle, long PartnerHandle, long lTraceLevel, const cha
 
 
   #ifdef DEBUGOUT
-    cout << "writeText01: " << lTraceLevel << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << non_null(pszText) << endl;
+    std::cout << "writeText01: " << lTraceLevel << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << non_null(pszText) << std::endl;
   #endif
 
 
@@ -874,12 +874,12 @@ long writeText01(long OwnHandle, long PartnerHandle, long lTraceLevel, const cha
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -954,7 +954,7 @@ static long readText01(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
         {
           Data.set(DN_STEXT, pCopyBuffer);
           #ifdef DEBUGOUT
-            cout << "readText01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << Data.get(DN_SFUNCTION).strObject() << "," << non_null(Data.get(DN_STEXT).strObject()) << endl;
+            std::cout << "readText01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << Data.get(DN_SFUNCTION).strObject() << "," << non_null(Data.get(DN_STEXT).strObject()) << std::endl;
           #endif
           result= CXRC_OK;
         }
@@ -987,7 +987,7 @@ long writeDump01(long OwnHandle, long PartnerHandle, long lTraceLevel, const cha
   long lType = TT_DUMP01;
 
   #ifdef DEBUGOUT
-    cout << "writeDump01: " << lTraceLevel << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << lDumpSize << endl;
+    std::cout << "writeDump01: " << lTraceLevel << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << lDumpSize << std::endl;
   #endif
 
   osGetDateTime (&(FixedData.timestamp));
@@ -1050,12 +1050,12 @@ long writeDump01(long OwnHandle, long PartnerHandle, long lTraceLevel, const cha
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -1120,7 +1120,7 @@ static long readDump01(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
         {
           Data.set(DN_BDUMP, aObject(pPos, lCopy));
           #ifdef DEBUGOUT
-            cout << "readDump01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << endl;
+            std::cout << "readDump01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << std::endl;
           #endif
           result= CXRC_OK;
         }
@@ -1128,7 +1128,7 @@ static long readDump01(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
         {
           Data.set(DN_BDUMP, "<null>");
           #ifdef DEBUGOUT
-            cout << "readDump01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << endl;
+            std::cout << "readDump01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << std::endl;
           #endif
           result= CXRC_OK;
         }
@@ -1160,7 +1160,7 @@ long writeCmdInit01(long OwnHandle, long PartnerHandle, long lInstance, const ch
   long lType = TT_CMDINIT01;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdInit01: " << lInstance << "," << non_null(pszApplication) << endl;
+    std::cout << "writeCmdInit01: " << lInstance << "," << non_null(pszApplication) << std::endl;
   #endif
 
 
@@ -1191,12 +1191,12 @@ long writeCmdInit01(long OwnHandle, long PartnerHandle, long lInstance, const ch
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -1242,7 +1242,7 @@ static long readCmdInit01(aMap &Data, char *pCopyBuffer, const char *pBuffer, lo
     {
       Data.set(DN_SAPPLICATION, pCopyBuffer);
       #ifdef DEBUGOUT
-        cout << "readCmdInit01: " << lInstance << "," << non_null(Data.get(DN_SAPPLICATION).strObject()) << endl;
+        std::cout << "readCmdInit01: " << lInstance << "," << non_null(Data.get(DN_SAPPLICATION).strObject()) << std::endl;
       #endif
       result= CXRC_OK;
     }
@@ -1272,7 +1272,7 @@ long writeCmdInit02(long OwnHandle, long PartnerHandle, long lInstance, const ch
   long lType = TT_CMDINIT02;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdInit02: " << lInstance << "," << non_null(pszApplication) << ", " << non_null(pszModule) << endl;
+    std::cout << "writeCmdInit02: " << lInstance << "," << non_null(pszApplication) << ", " << non_null(pszModule) << std::endl;
   #endif
 
 
@@ -1315,12 +1315,12 @@ long writeCmdInit02(long OwnHandle, long PartnerHandle, long lInstance, const ch
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -1357,7 +1357,7 @@ long writeCmdInit03(long OwnHandle, long PartnerHandle, long lInstance, const ch
   long lType = TT_CMDINIT03;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdInit03: " << lInstance << "," << non_null(pszApplication) << ", " << non_null(pszModule) << endl;
+    std::cout << "writeCmdInit03: " << lInstance << "," << non_null(pszApplication) << ", " << non_null(pszModule) << std::endl;
   #endif
 
 
@@ -1400,12 +1400,12 @@ long writeCmdInit03(long OwnHandle, long PartnerHandle, long lInstance, const ch
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -1455,7 +1455,7 @@ static long readCmdInit02(aMap &Data, char *pCopyBuffer, const char *pBuffer, lo
       {
         Data.set(DN_SMODULE, pCopyBuffer);
         #ifdef DEBUGOUT
-          cout << "readCmdInit02: " << lInstance << ", " << non_null(Data.get(DN_SAPPLICATION).strObject()) << ", " << non_null(Data.get(DN_SMODULE).strObject()) << endl;
+          std::cout << "readCmdInit02: " << lInstance << ", " << non_null(Data.get(DN_SAPPLICATION).strObject()) << ", " << non_null(Data.get(DN_SMODULE).strObject()) << std::endl;
         #endif
         result= CXRC_OK;
        }
@@ -1502,7 +1502,7 @@ static long readCmdInit03(aMap &Data, char *pCopyBuffer, const char *pBuffer, lo
       {
         Data.set(DN_SMODULE, pCopyBuffer);
         #ifdef DEBUGOUT
-          cout << "readCmdInit03: " << lInstance << ", " << non_null(Data.get(DN_SAPPLICATION).strObject()) << ", " << non_null(Data.get(DN_SMODULE).strObject()) << endl;
+          std::cout << "readCmdInit03: " << lInstance << ", " << non_null(Data.get(DN_SAPPLICATION).strObject()) << ", " << non_null(Data.get(DN_SMODULE).strObject()) << std::endl;
         #endif
         result= CXRC_OK;
        }
@@ -1533,7 +1533,7 @@ long writeCmdParameter01(long OwnHandle, long PartnerHandle, long lTraceLevel, l
   long lType = TT_CMDPARAMETER01;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdParameter01: " << lTraceLevel << "," << lTraceMask << "," << lLevelAsMask << endl;
+    std::cout << "writeCmdParameter01: " << lTraceLevel << "," << lTraceMask << "," << lLevelAsMask << std::endl;
   #endif
 
   lSize = sizeof(long) + sizeof(CmdParameter01);
@@ -1557,12 +1557,12 @@ long writeCmdParameter01(long OwnHandle, long PartnerHandle, long lTraceLevel, l
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -1602,7 +1602,7 @@ static long readCmdParameter01(aMap &Data, char *pCopyBuffer, const char *pBuffe
     Data.set(DN_LLEVELASMASK, FixedData.lLevelAsMask);
     Data.set(DN_LTRACEMASK, FixedData.lTraceMask);
     #ifdef DEBUGOUT
-      cout << "readCmdParameter01: " << FixedData.lTraceLevel << ", "  << FixedData.lLevelAsMask << ", "  << FixedData.lTraceMask << endl;
+      std::cout << "readCmdParameter01: " << FixedData.lTraceLevel << ", "  << FixedData.lLevelAsMask << ", "  << FixedData.lTraceMask << std::endl;
     #endif
     result= CXRC_OK;
   }
@@ -1634,7 +1634,7 @@ long writeCmdNewFile02(long OwnHandle, long PartnerHandle, const char* pszTopic,
   long lType = TT_CMDNEWFILE02;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdNewFile02: " << non_null(pszTopic) << endl;
+    std::cout << "writeCmdNewFile02: " << non_null(pszTopic) << std::endl;
   #endif
 
   if (pszTopic)
@@ -1665,12 +1665,12 @@ long writeCmdNewFile02(long OwnHandle, long PartnerHandle, const char* pszTopic,
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -1710,7 +1710,7 @@ static long readCmdNewFile02(aMap &Data, char *pCopyBuffer, const char *pBuffer,
   {
     Data.set(DN_STOPIC, pCopyBuffer);
     #ifdef DEBUGOUT
-      cout << "readCmdNewFile02: " << pCopyBuffer << endl;
+      std::cout << "readCmdNewFile02: " << pCopyBuffer << std::endl;
     #endif
 
     result= CXRC_OK;
@@ -1742,7 +1742,7 @@ long writeText02(long OwnHandle, long PartnerHandle, const char* pszTopic, const
   long lType = TT_TEXT02;
 
   #ifdef DEBUGOUT
-    cout << "writeText02: " << non_null(pszTopic) << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << non_null(pszText) << endl;
+    std::cout << "writeText02: " << non_null(pszTopic) << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << non_null(pszText) << std::endl;
   #endif
 
 
@@ -1825,12 +1825,12 @@ long writeText02(long OwnHandle, long PartnerHandle, const char* pszTopic, const
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -1908,7 +1908,7 @@ static long readText02(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
           {
             Data.set(DN_STOPIC, pCopyBuffer);
             #ifdef DEBUGOUT
-              cout << "readText02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << non_null(Data.get(DN_STEXT).strObject()) << endl;
+              std::cout << "readText02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << non_null(Data.get(DN_STEXT).strObject()) << std::endl;
             #endif
 
             result= CXRC_OK;
@@ -1943,7 +1943,7 @@ long writeDump02(long OwnHandle, long PartnerHandle, const char* pszTopic, const
   long lType = TT_DUMP02;
 
   #ifdef DEBUGOUT
-    cout << "writeDump02: " << non_null(pszTopic) << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << lDumpSize << endl;
+    std::cout << "writeDump02: " << non_null(pszTopic) << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << lDumpSize << std::endl;
   #endif
 
 
@@ -2018,12 +2018,12 @@ long writeDump02(long OwnHandle, long PartnerHandle, const char* pszTopic, const
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -2092,7 +2092,7 @@ static long readDump02(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
           {
             Data.set(DN_BDUMP, aObject(pPos, lCopy));
             #ifdef DEBUGOUT
-              cout << "readDump02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << endl;
+              std::cout << "readDump02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << std::endl;
             #endif
             result= CXRC_OK;
           }
@@ -2100,7 +2100,7 @@ static long readDump02(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
           {
             Data.set(DN_BDUMP, "<null>");
             #ifdef DEBUGOUT
-              cout << "readDump02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << endl;
+              std::cout << "readDump02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << std::endl;
             #endif
             result= CXRC_OK;
           }
@@ -2135,7 +2135,7 @@ long writeCmdTopicState01(long OwnHandle, long PartnerHandle, const char* pszTop
   long lType = TT_CMDTOPICSTATE01;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdTopicState01: " << non_null(pszTopic) << "," << lState << endl;
+    std::cout << "writeCmdTopicState01: " << non_null(pszTopic) << "," << lState << std::endl;
   #endif
 
 
@@ -2169,12 +2169,12 @@ long writeCmdTopicState01(long OwnHandle, long PartnerHandle, const char* pszTop
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -2221,7 +2221,7 @@ static long readCmdTopicState01(aMap &Data, char *pCopyBuffer, const char *pBuff
     {
       Data.set(DN_STOPIC, pCopyBuffer);
       #ifdef DEBUGOUT
-        cout << "readCmdTopicState01: " << non_null(Data.get(DN_STOPIC).strObject()) << ", " << lTopicState << endl;
+        std::cout << "readCmdTopicState01: " << non_null(Data.get(DN_STOPIC).strObject()) << ", " << lTopicState << std::endl;
       #endif
 
       result= CXRC_OK;
@@ -2259,7 +2259,7 @@ long writeCmdInitListen01(long OwnHandle, long PartnerHandle, cxBuffer* cxBuf)
   lWritten = lSize;
 
   #ifdef DEBUGOUT
-  cout << "writeCmdInitListen01" << endl;
+  std::cout << "writeCmdInitListen01" << std::endl;
   #endif
 
 
@@ -2268,12 +2268,12 @@ long writeCmdInitListen01(long OwnHandle, long PartnerHandle, cxBuffer* cxBuf)
   else
   {
     #ifdef DEBUGOUT
-    cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+    std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
     dump((char*)&lType, lWritten);
     #endif
     result= cxWrite(OwnHandle, PartnerHandle, (char*)&lType, &lWritten);
     #ifdef DEBUGOUT
-    cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+    std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
     #endif
   }
   if (lWritten != lSize  && result == CXRC_OK)
@@ -2304,8 +2304,8 @@ long writeCmdData01(long OwnHandle, long PartnerHandle, aMap Data, cxBuffer* cxB
   long lType = TT_CMDDATA01;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdData01: " << endl;
-    dumpMap(&cout, Data);
+    std::cout << "writeCmdData01: " << std::endl;
+    dumpMap(&std::cout, Data);
   #endif
 
   lSize= sizeof(long) + assoFlatSize(Data);
@@ -2326,12 +2326,12 @@ long writeCmdData01(long OwnHandle, long PartnerHandle, aMap Data, cxBuffer* cxB
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -2374,8 +2374,8 @@ static long readCmdData01(aMap &Data, char *pCopyBuffer, const char *pBuffer, lo
     {
       Data= pData->mapObject();
       #ifdef DEBUGOUT
-        cout << "readCmdData01: " << endl;
-        dumpMap(&cout, Data);
+        std::cout << "readCmdData01: " << std::endl;
+        dumpMap(&std::cout, Data);
       #endif
       result= CXRC_OK;
     }
@@ -2415,13 +2415,13 @@ long ReadTrace(long OwnHandle, long *PartnerHandle, long *lType, aMap& Data, lon
   {
     lSize = MAXLINESIZE;
     #ifdef DEBUGOUT
-    cout << "-> cxRead (Own=" << OwnHandle << ", Size=" << lSize << ")" << endl;
+    std::cout << "-> cxRead (Own=" << OwnHandle << ", Size=" << lSize << ")" << std::endl;
     #endif
     rc = cxRead(OwnHandle, PartnerHandle, Buffer, &lSize);
     rcError= rc;
     #ifdef DEBUGOUT
     dump(Buffer, lSize);
-    cout << "<- cxRead (Partner=" << *PartnerHandle << ", Size=" << lSize << ") =" << rc << endl;
+    std::cout << "<- cxRead (Partner=" << *PartnerHandle << ", Size=" << lSize << ") =" << rc << std::endl;
     #endif
     if (rc != CXRC_MORE_DATA && rc != CXRC_OK && rc != CXRC_BUFFER_TOO_SMALL)
       break;
@@ -2499,7 +2499,7 @@ long ReadTrace(long OwnHandle, long *PartnerHandle, long *lType, aMap& Data, lon
     {
       case TT_CMDSTOP01:
         #ifdef DEBUGOUT
-        cout << "readCmdStop01" << endl;
+        std::cout << "readCmdStop01" << std::endl;
         #endif
         break;
       case TT_TEXT01:
@@ -2534,12 +2534,12 @@ long ReadTrace(long OwnHandle, long *PartnerHandle, long *lType, aMap& Data, lon
         break;
       case TT_CMDSHUTDOWN01:
         #ifdef DEBUGOUT
-        cout << "readCmdShutdown01" << endl;
+        std::cout << "readCmdShutdown01" << std::endl;
         #endif
         break;
       case TT_CMDINITLISTEN01:
         #ifdef DEBUGOUT
-        cout << "readCmdInitListen01" << endl;
+        std::cout << "readCmdInitListen01" << std::endl;
         #endif
         break;
       case TT_CMDINIT03:
@@ -2611,7 +2611,7 @@ long writeCrypt01(long OwnHandle, long PartnerHandle, long lTraceLevel, const ch
   long lType = TT_CRYPT01;
 
   #ifdef DEBUGOUT
-    cout << "writeCrypt01: " << lTraceLevel << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << lDumpSize << endl;
+    std::cout << "writeCrypt01: " << lTraceLevel << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << lDumpSize << std::endl;
   #endif
 
   osGetDateTime (&(FixedData.timestamp));
@@ -2674,12 +2674,12 @@ long writeCrypt01(long OwnHandle, long PartnerHandle, long lTraceLevel, const ch
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -2744,7 +2744,7 @@ static long readCrypt01(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
         {
           Data.set(DN_BDUMP, aObject(pPos, lCopy));
           #ifdef DEBUGOUT
-            cout << "readCrypt01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << endl;
+            std::cout << "readCrypt01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << std::endl;
           #endif
           result= CXRC_OK;
         }
@@ -2752,7 +2752,7 @@ static long readCrypt01(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
         {
           Data.set(DN_BDUMP, "<null>");
           #ifdef DEBUGOUT
-            cout << "readCrypt01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << endl;
+            std::cout << "readCrypt01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << std::endl;
           #endif
           result= CXRC_OK;
         }
@@ -2786,7 +2786,7 @@ long writeCrypt02(long OwnHandle, long PartnerHandle, const char* pszTopic, cons
   long lType = TT_CRYPT02;
 
   #ifdef DEBUGOUT
-    cout << "writeCrypt02: " << non_null(pszTopic) << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << lDumpSize << endl;
+    std::cout << "writeCrypt02: " << non_null(pszTopic) << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << lDumpSize << std::endl;
   #endif
 
 
@@ -2861,12 +2861,12 @@ long writeCrypt02(long OwnHandle, long PartnerHandle, const char* pszTopic, cons
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -2934,7 +2934,7 @@ static long readCrypt02(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
           {
             Data.set(DN_BDUMP, aObject(pPos, lCopy));
             #ifdef DEBUGOUT
-              cout << "readCrypt02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << endl;
+              std::cout << "readCrypt02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << std::endl;
             #endif
             result= CXRC_OK;
           }
@@ -2942,7 +2942,7 @@ static long readCrypt02(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
           {
             Data.set(DN_BDUMP, "<null>");
             #ifdef DEBUGOUT
-              cout << "readCrypt02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << endl;
+              std::cout << "readCrypt02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_BDUMP).count() << std::endl;
             #endif
             result= CXRC_OK;
           }
@@ -2978,7 +2978,7 @@ long writeCmdMove01(long OwnHandle, long PartnerHandle, const char *pszPath, cxB
   long lType = TT_CMDMOVE01;
 
   #ifdef DEBUGOUT
-    cout << "writeCmdMove01: " << non_null(pszPath) << endl;
+    std::cout << "writeCmdMove01: " << non_null(pszPath) << std::endl;
   #endif
 
   if (pszPath)
@@ -3006,12 +3006,12 @@ long writeCmdMove01(long OwnHandle, long PartnerHandle, const char *pszPath, cxB
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -3050,7 +3050,7 @@ static long readCmdMove01(aMap &Data, char *pCopyBuffer, const char *pBuffer, lo
     {
       Data.set(DN_SPATH, pCopyBuffer);
       #ifdef DEBUGOUT
-        cout << "readCmdMove01: " << non_null(Data.get(DN_SPATH).strObject()) << endl;
+        std::cout << "readCmdMove01: " << non_null(Data.get(DN_SPATH).strObject()) << std::endl;
       #endif
 
       result= CXRC_OK;
@@ -3085,7 +3085,7 @@ long writeTrack01(long OwnHandle, long PartnerHandle, long lTraceLevel, const ch
 
 
   #ifdef DEBUGOUT
-    cout << "writeTrack01: " << lTraceLevel << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << trackId << endl;
+    std::cout << "writeTrack01: " << lTraceLevel << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << trackId << std::endl;
   #endif
 
 
@@ -3157,12 +3157,12 @@ long writeTrack01(long OwnHandle, long PartnerHandle, long lTraceLevel, const ch
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -3239,7 +3239,7 @@ static long readTrack01(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
           {
             Data.set(DN_STEXT, pCopyBuffer);
             #ifdef DEBUGOUT
-              cout << "readTrack01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << Data.get(DN_SFUNCTION).strObject() << "," << Data.get(DN_LTRACKID).numObject() << endl;
+              std::cout << "readTrack01: " << FixedData.lTraceLevel << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << Data.get(DN_SFUNCTION).strObject() << "," << Data.get(DN_LTRACKID).numObject() << std::endl;
             #endif
             result= CXRC_OK;
           }
@@ -3273,7 +3273,7 @@ long writeTrack02(long OwnHandle, long PartnerHandle, const char *pszTopic, cons
   long lType = TT_TRACK02;
 
   #ifdef DEBUGOUT
-    cout << "writeTrack02: " << non_null(pszTopic) << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << trackId << endl;
+    std::cout << "writeTrack02: " << non_null(pszTopic) << "," << non_null(pszFile) << "," << sLine << "," << non_null(pszFunction) << "," << trackId << std::endl;
   #endif
 
 
@@ -3359,12 +3359,12 @@ long writeTrack02(long OwnHandle, long PartnerHandle, const char *pszTopic, cons
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -3401,7 +3401,7 @@ long writeCooked01(long OwnHandle, long PartnerHandle, const char *pszText, cxBu
   long lType = TT_COOKED01;
 
   #ifdef DEBUGOUT
-    cout << "writeCooked01: " << non_null(pszText) << endl;
+    std::cout << "writeCooked01: " << non_null(pszText) << std::endl;
   #endif
 
   if (pszText)
@@ -3429,12 +3429,12 @@ long writeCooked01(long OwnHandle, long PartnerHandle, const char *pszText, cxBu
     else
     {
       #ifdef DEBUGOUT
-      cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << endl;
+      std::cout << "-> cxWrite (Own=" << OwnHandle <<", Partner=" << PartnerHandle << ", Size=" << lWritten << ")" << std::endl;
       dump(pBuffer, lWritten);
       #endif
       result= cxWrite(OwnHandle, PartnerHandle, pBuffer, &lWritten);
       #ifdef DEBUGOUT
-      cout << "<- cxWrite (Size=" << lWritten << ")=" << result << endl;
+      std::cout << "<- cxWrite (Size=" << lWritten << ")=" << result << std::endl;
       #endif
     }
     if (lWritten != lSize  && result == CXRC_OK)
@@ -3515,7 +3515,7 @@ static long readTrack02(aMap &Data, char *pCopyBuffer, const char *pBuffer, long
             {
               Data.set(DN_STOPIC, pCopyBuffer);
               #ifdef DEBUGOUT
-                cout << "readTrack02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_LTRACKID).numObject() << endl;
+                std::cout << "readTrack02: " << non_null(Data.get(DN_STOPIC).strObject()) << "," << non_null(Data.get(DN_SFILE).strObject()) << "," << FixedData.sLine << "," << non_null(Data.get(DN_SFUNCTION).strObject()) << "," << Data.get(DN_LTRACKID).numObject() << std::endl;
               #endif
 
               result= CXRC_OK;
@@ -3556,7 +3556,7 @@ static long readCooked01(aMap &Data, char *pCopyBuffer, const char *pBuffer, lon
     {
       Data.set(DN_SCOOKED, pCopyBuffer);
       #ifdef DEBUGOUT
-        cout << "readCooked01: " << non_null(Data.get(DN_SCOOKED).strObject()) << endl;
+        std::cout << "readCooked01: " << non_null(Data.get(DN_SCOOKED).strObject()) << std::endl;
       #endif
 
       result= CXRC_OK;
-- 
2.41.0.windows.1

