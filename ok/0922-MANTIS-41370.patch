From f3e42bf11fdde8da9d29fb1eb74e60f02dd9e9ac Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 11 Sep 2018 14:39:44 +0000
Subject: [PATCH 0922/1076] MANTIS 41370 extension: Enhancement of Resolution
 Settings

textidl.lib
V1.0.0.15
- added text conversion for resolutionEx, resolutionExList for new types
- added text conversion for indicationType, data, applicationId, strings


git-svn-id: svn://localhost/SelfServiceCommon/trunk@1376 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/textIDL/textAppControl.h   |  13 ++
 .../Massai/cpp/textIDL/src/local_def.cpp      |  10 +-
 .../Massai/cpp/textIDL/src/textappcontrol.cpp | 116 ++++++++++++++++--
 3 files changed, 127 insertions(+), 12 deletions(-)

diff --git a/SelfServiceCommon/Interfaces/inc/textIDL/textAppControl.h b/SelfServiceCommon/Interfaces/inc/textIDL/textAppControl.h
index 38385bb9..d473230e 100644
--- a/SelfServiceCommon/Interfaces/inc/textIDL/textAppControl.h
+++ b/SelfServiceCommon/Interfaces/inc/textIDL/textAppControl.h
@@ -17,6 +17,12 @@ namespace MASSAI
     std::string applicationText(const appControl::application& code);
     std::string commandTypeText(const appControl::commandType& code);
     std::string applicationStartText(const appControl::applicationStart& code);
+    std::string indicationTypeText(const appControl::indicationType& code);
+    std::string resolutionText(const appControl::resolutionEx& code);
+    std::string resourceDataText(const appControl::data& code);
+    std::string applicationIdText(const appControl::applicationId& code);
+    std::string resolutionListText(const appControl::resolutionExList& code);
+    std::string stringsText(const appControl::strings& code);
   }
 }
 
@@ -24,5 +30,12 @@ std::ostream& operator<<(std::ostream& out, const appControl::resolutions& code)
 std::ostream& operator<<(std::ostream& out, const appControl::application& code);
 std::ostream& operator<<(std::ostream& out, const appControl::commandType& code);
 std::ostream& operator<<(std::ostream& out, const appControl::applicationStart& code);
+std::ostream& operator<<(std::ostream& out, const appControl::indicationType& code);
+std::ostream& operator<<(std::ostream& out, const appControl::resolutionEx& code);
+std::ostream& operator<<(std::ostream& out, const appControl::data& code);
+std::ostream& operator<<(std::ostream& out, const appControl::applicationId& code);
+std::ostream& operator<<(std::ostream& out, const appControl::resolutionExList& code);
+std::ostream& operator<<(std::ostream& out, const appControl::displayState& code);
+std::ostream& operator<<(std::ostream& out, const appControl::strings& code);
 
 #endif
diff --git a/SelfServiceCommon/Massai/cpp/textIDL/src/local_def.cpp b/SelfServiceCommon/Massai/cpp/textIDL/src/local_def.cpp
index 3e11e140..8c0cfe75 100644
--- a/SelfServiceCommon/Massai/cpp/textIDL/src/local_def.cpp
+++ b/SelfServiceCommon/Massai/cpp/textIDL/src/local_def.cpp
@@ -1,6 +1,6 @@
 #include "tools/versionlib.h"
 
-VERSION_ID_DT(textIDL, 1, 0, 0, 14);
+VERSION_ID_DT(textIDL, 1, 0, 0, 15);
 
 /*!
 \file
@@ -8,12 +8,18 @@ VERSION_ID_DT(textIDL, 1, 0, 0, 14);
 
 \page textidl.lib Release Notes - textidl.lib
 
-\version 1.0.0.14
+\version 1.0.0.15
 
 \section changehistory Change history
 
 textidl.lib
 
+\version 1.0.0.15
+\li 11.09.2018
+\li SteT extension Mantis 41370: Enhancement of Resolution Settings
+- added text conversion for resolutionEx, resolutionExList for new types
+- added text conversion for indicationType, data, applicationId, strings
+
 \version 1.0.0.14
 \li 05.05.2017
 \li SteT Mantis 40176: extension: Components for enabling/disabling TouchScreen and Display
diff --git a/SelfServiceCommon/Massai/cpp/textIDL/src/textappcontrol.cpp b/SelfServiceCommon/Massai/cpp/textIDL/src/textappcontrol.cpp
index ee928f7f..6aa8b4a6 100644
--- a/SelfServiceCommon/Massai/cpp/textIDL/src/textappcontrol.cpp
+++ b/SelfServiceCommon/Massai/cpp/textIDL/src/textappcontrol.cpp
@@ -29,7 +29,7 @@ namespace MASSAI
       {
         case appControl::DISPLAY_ON:   return "DISPLAY_ON";
         case appControl::DISPLAY_OFF:  return "DISPLAY_OFF";
-        default:                        return unknown("displayState", state);
+        default:                       return unknown("displayState", state);
       }
     }
 
@@ -37,15 +37,16 @@ namespace MASSAI
     {
       switch(code)
       {
-        case appControl::CMD_START:          return "start";
-        case appControl::CMD_SWITCH:         return "switch";
-        case appControl::CMD_KILL:           return "kill";
-        case appControl::CMD_KILLALL:        return "killall";
-        case appControl::CMD_SWITCHMAIN:     return "switchmain";
-        case appControl::CMD_SHOW:           return "show";
-        case appControl::CMD_SET_RESOLUTION: return "set_resolution";
-        case appControl::CMD_SWITCH_DISPLAY: return "switch display";
-        default:                             return unknown("commandType", code);
+        case appControl::CMD_START:                     return "start";
+        case appControl::CMD_SWITCH:                    return "switch";
+        case appControl::CMD_KILL:                      return "kill";
+        case appControl::CMD_KILLALL:                   return "killall";
+        case appControl::CMD_SWITCHMAIN:                return "switchmain";
+        case appControl::CMD_SHOW:                      return "show";
+        case appControl::CMD_SET_RESOLUTION:            return "set_resolution";
+        case appControl::CMD_SWITCH_DISPLAY:            return "switch display";
+        case appControl::CMD_SET_RESOLUTION_EX:         return "set resolution ex";
+        default:                                        return unknown("commandType", code);
       }
     }
 
@@ -62,6 +63,50 @@ namespace MASSAI
       out << data;
       return out.str();
     }
+    std::string indicationTypeText(const appControl::indicationType& code)
+    {
+      switch(code)
+      {
+        case appControl::IND_RESOURCE_USAGE:        return "resource usage";
+        case appControl::IND_UNDEFINED:             return "undefined";
+        default:                                    return unknown("indicationType", code);
+      }
+    }
+
+    std::string resolutionText(const appControl::resolutionEx& data)
+    {
+      std::ostringstream out;
+      out << data;
+      return out.str();
+    }
+
+    std::string resourceDataText(const appControl::data& code)
+    {
+      std::ostringstream out;
+      out << code;
+      return out.str();
+    }
+
+    std::string applicationIdText(const appControl::applicationId& code)
+    {
+      std::ostringstream out;
+      out << code;
+      return out.str();
+    }
+
+    std::string resolutionListText(const appControl::resolutionExList& code)
+    {
+      std::ostringstream out;
+      out << code;
+      return out.str();
+    }
+
+    std::string stringsText(const appControl::strings& code)
+    {
+      std::ostringstream out;
+      out << code;
+      return out.str();
+    }
   }
 }
 
@@ -94,3 +139,54 @@ std::ostream& operator<<(std::ostream& out, const appControl::applicationStart&
   out << "defaultResolution: (" << app.defaultResolution << ")\n";
   return out;
 }
+
+std::ostream& operator<<(std::ostream& out, const appControl::indicationType& code)
+{
+  out << indicationTypeText(code);
+  return out;
+}
+
+std::ostream& operator<<(std::ostream& out, const appControl::resolutionEx& res)
+{
+  out << "(" << res.width << "x" << res.height << ")";
+  return out;
+}
+
+std::ostream& operator<<(std::ostream& out, const appControl::data& code)
+{
+  out << "appName: ("     << code.applicationName.in()  << ")\n";
+  out << "IoUsage: ("     << code.applicationIoUsage << ")\n";
+  out << "TimeUsage: ("   << code.applicationTimeUsage << ")\n";
+  out << "MemoryUsage: (" << code.applicationMemoryUsage << ")\n";
+  return out;
+}
+
+std::ostream& operator<<(std::ostream& out, const appControl::applicationId& code)
+{
+  out << "appName: (" << code.appName.in()  << ")\n";
+  return out;
+}
+
+std::ostream& operator<<(std::ostream& out, const appControl::resolutionExList& code)
+{
+  for(unsigned int i= 0; i < code.length(); i++)
+  {
+    out << "resolution: (" << i << "): (" << code[i] << ")\n";
+  }
+  return out;
+}
+
+std::ostream& operator<<(std::ostream& out, const appControl::displayState& code)
+{
+  out << displayStateText(code);
+  return out;
+}
+
+std::ostream& operator<<(std::ostream& out, const appControl::strings& code)
+{
+  for(unsigned int i= 0; i < code.length(); i++)
+  {
+    out << "string: (" << i << "): (" << code[i] << ")\n";
+  }
+  return out;
+}
-- 
2.41.0.windows.1

