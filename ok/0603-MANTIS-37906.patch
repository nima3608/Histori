From 7a97770ed580b31b6d279b0873335c11c8772e15 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Thu, 10 Sep 2015 11:26:33 +0000
Subject: [PATCH 0603/1000] MANTIS 37906 CfgxMgrB*.exe, massaiCfgXB*.exe 1.5.1
 MANTIS 37906: Configuration of passwords - Re-allow 'c' rights with
 pre-configured value.

git-svn-id: svn://localhost/SelfServiceCommon/trunk@889 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/CfgXMgrB/inc/CfgXMgrB_def.h    | 13 +++-
 .../Massai/cpp/CfgXMgrB/inc/massaiCfgXB_def.h | 13 +++-
 .../Massai/cpp/CfgXMgrB/src/cfgFromXML.cpp    | 26 ++++++-
 .../cpp/CfgXMgrB/src/cfgFromXML_Xerces3.cpp   | 75 ++++++++++++++++---
 .../Massai/cpp/CfgXMgrB/src/cfgMetaText.cpp   | 13 ++--
 5 files changed, 116 insertions(+), 24 deletions(-)

diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/CfgXMgrB_def.h b/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/CfgXMgrB_def.h
index ecde1897..f3c960cf 100644
--- a/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/CfgXMgrB_def.h
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/CfgXMgrB_def.h
@@ -436,8 +436,17 @@
 //!   which have the "read right" not set in the common (not user-specific)
 //!   rights string.
 //! - Rights string management is now in "cfgRightsMan.cpp".
-#define FILE_VER_BIN 1,5,0,0
-#define FILE_VER_DTS "1.5.0.0"
+// #define FILE_VER_BIN 1,5,0,0
+// #define FILE_VER_DTS "1.5.0.0"
+//
+//! @version 1.5.1
+//! @date    10.09.2015
+//! @author  JK
+//! @par     Change:
+//! - MANTIS 37906: Configuration of passwords
+//! - Re-allow 'c' rights with pre-configured value.
+#define FILE_VER_BIN 1,5,1,0
+#define FILE_VER_DTS "1.5.1.0"
 
 
 //-------------------------------------------------------------------------
diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/massaiCfgXB_def.h b/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/massaiCfgXB_def.h
index ea18f178..510371c1 100644
--- a/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/massaiCfgXB_def.h
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/inc/massaiCfgXB_def.h
@@ -427,8 +427,17 @@
 //!   which have the "read right" not set in the common (not user-specific)
 //!   rights string.
 //! - Rights string management is now in "cfgRightsMan.cpp".
-#define FILE_VER_BIN 1,5,0,0
-#define FILE_VER_DTS "1.5.0.0"
+// #define FILE_VER_BIN 1,5,0,0
+// #define FILE_VER_DTS "1.5.0.0"
+//
+//! @version 1.5.1
+//! @date    10.09.2015
+//! @author  JK
+//! @par     Change:
+//! - MANTIS 37906: Configuration of passwords
+//! - Re-allow 'c' rights with pre-configured value.
+#define FILE_VER_BIN 1,5,1,0
+#define FILE_VER_DTS "1.5.1.0"
 
 //-------------------------------------------------------------------------
 
diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgFromXML.cpp b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgFromXML.cpp
index 31ea5c31..e6f87584 100644
--- a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgFromXML.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgFromXML.cpp
@@ -7,7 +7,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2002-2008 MATERNA Information & Communications
+ * Copyright (c) 2002-2015 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -237,10 +237,34 @@ void document2Value
                      );
                      Dst.itemCreate( *Meta, XPath.c_str(), Value, false );
                   }
+                  else
+                  {
+                     writeTrace
+                     (
+                        BasicRuntime_HERE,
+                        "cfgFromXML: no value - ignored(%s)",
+                        XPath.c_str()
+                     );
+                  }
+               }
+               else
+               {
+                  writeTrace
+                  (
+                     BasicRuntime_HERE,
+                     "cfgFromXML: no meta - ignored(%s)",
+                     XPath.c_str()
+                  );
                }
             }
             catch( ... )
             {
+               writeTrace
+               (
+                  BasicRuntime_HERE,
+                  "cfgFromXML: exception - ignored(%s)",
+                  XPath.c_str()
+               );
             }
          }
 
diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgFromXML_Xerces3.cpp b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgFromXML_Xerces3.cpp
index 3d1a13dd..d9c64541 100644
--- a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgFromXML_Xerces3.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgFromXML_Xerces3.cpp
@@ -7,7 +7,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2002-2008 MATERNA Information & Communications
+ * Copyright (c) 2002-2015 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -37,7 +37,7 @@
 #include <sstream>
 
 using namespace xercesc;
- 
+
 #if 0
 
 
@@ -75,11 +75,17 @@ void getAttribute
 )
 {
    DOMNode const * Node
-      = Attribs->getNamedItem( XMLString::transcode( AttribName.c_str() ) );
+      = Attribs->getNamedItem
+         (
+            XMLString::transcode( AttribName.c_str() )
+         );
    if( !Node )
       AttribDest.erase();
    else
-      AttribDest.assign( XMLString::transcode( Node->getNodeValue() ) );
+      AttribDest.assign
+         (
+            XMLString::transcode( Node->getNodeValue() )
+         );
 }
 
 
@@ -104,7 +110,11 @@ void document2Meta
       if
       (
          ( Node->getNodeType() == DOMNode::ELEMENT_NODE ) &&
-         !strcmp( XMLString::transcode( Node->getNodeName() ), CFGTOKEN_META )
+         !strcmp
+            (
+               XMLString::transcode( Node->getNodeName() ),
+               CFGTOKEN_META
+            )
       )
       {
          DOMNamedNodeMap const * Attribs = Node->getAttributes();
@@ -211,7 +221,11 @@ void document2Value
       if
       (
          ( Node->getNodeType() == DOMNode::ELEMENT_NODE ) &&
-         !strcmp( XMLString::transcode( Node->getNodeName() ), CFGTOKEN_VALUE )
+         !strcmp
+            (
+               XMLString::transcode( Node->getNodeName() ),
+               CFGTOKEN_VALUE
+            )
       )
       {
          DOMNamedNodeMap const * Attribs = Node->getAttributes();
@@ -238,7 +252,10 @@ void document2Value
                cfgFlatZ Flat;
                if( SubNode )
                {
-                  Flat.setAndOwn( XMLString::transcode( SubNode->getNodeValue() ) );
+                  Flat.setAndOwn
+                     (
+                        XMLString::transcode( SubNode->getNodeValue() )
+                     );
                }
                cfgMeta const * const Meta
                   = Dst.getMeta( "", cfgEntity::PURP_TYPEGET, Ref );
@@ -255,10 +272,34 @@ void document2Value
                      );
                      Dst.itemCreate( *Meta, XPath.c_str(), Value, false );
                   }
+                  else
+                  {
+                     writeTrace
+                     (
+                        BasicRuntime_HERE,
+                        "cfgFromXML: no value - ignored(%s)",
+                        XPath.c_str()
+                     );
+                  }
+               }
+               else
+               {
+                  writeTrace
+                  (
+                     BasicRuntime_HERE,
+                     "cfgFromXML: no meta - ignored(%s)",
+                     XPath.c_str()
+                  );
                }
             }
             catch( ... )
             {
+               writeTrace
+               (
+                  BasicRuntime_HERE,
+                  "cfgFromXML: exception - ignored(%s)",
+                  XPath.c_str()
+               );
             }
          }
 
@@ -286,14 +327,24 @@ void document2Map( DOMNode const * Node, cfgEntity & Dst )
    {
       if( Node->getNodeType() == DOMNode::ELEMENT_NODE )
       {
-         if( !strcmp( XMLString::transcode( Node->getNodeName() ), CFGTOKEN_META ) )
+         if (
+               !strcmp
+                  (
+                     XMLString::transcode( Node->getNodeName() ),
+                     CFGTOKEN_META
+                  )
+            )
          {
             document2Meta( Node, Dst );
          }
          else if
-         (
-            !strcmp( XMLString::transcode( Node->getNodeName() ), CFGTOKEN_VALUE )
-         )
+            (
+               !strcmp
+                  (
+                     XMLString::transcode( Node->getNodeName() ),
+                     CFGTOKEN_VALUE
+                  )
+            )
          {
             std::string Path( "" );
             document2Value( Node, Dst, Path, 1 );
@@ -427,7 +478,7 @@ void cfgFromXML_readMap( cfgEntity & Dst, std::string const & Src )
    }
 
    cfgFileErrorHandler ErrHdl;
-   
+
    XercesDOMParser * parser = new XercesDOMParser();
    parser->setErrorHandler( &ErrHdl );
 
diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgMetaText.cpp b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgMetaText.cpp
index ec172687..f7ef05c1 100644
--- a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgMetaText.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/cfgMetaText.cpp
@@ -235,20 +235,19 @@ cfgValue * cfgMetaText::valueFactory
    cfgFlatZ const & Src
 ) const
 {
+   std::string const dr = cfgRightsMan::getDefault( getRights() );
    if (
-         cfgRightsMan::mayRead
-            (
-               cfgRightsMan::getDefault
-                  (
-                     getRights()
-                  )
-            )
+         cfgRightsMan::mayRead( dr ) ||
+         cfgRightsMan::mayCreate( dr )
       )
    {
+      // Normal processing
       return new cfgValueText( false, "", Src );
    }
    else
    {
+      // Default rights is no-read
+      // -> Crypt-extract value.
       return new cfgValueText( true, getExplanation(), Src );
    }
 }
-- 
2.41.0.windows.1

