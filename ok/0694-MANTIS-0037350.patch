From 59a572630ff7016db91c35ddb03b5131fb85f2b7 Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Thu, 5 Nov 2015 18:12:20 +0000
Subject: [PATCH 0694/1077] MANTIS 0037350 extension: integration of EZ-Access
 device for KIS kiosk

keyboard.idl
V1.0
- removed extension0, extension1  (include in keyScanCode)

textidl.lib
V1.0.0.12
- added keyscanCodes



git-svn-id: svn://localhost/SelfServiceCommon/trunk@921 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/textIDL/textkeyboard.h     | 121 ++++++++
 .../Massai/cpp/textIDL/src/textKeyboard.cpp   | 261 ++++++++----------
 .../Massai/idl/Massai/keyboard.idl            |   2 -
 3 files changed, 239 insertions(+), 145 deletions(-)

diff --git a/SelfServiceCommon/Interfaces/inc/textIDL/textkeyboard.h b/SelfServiceCommon/Interfaces/inc/textIDL/textkeyboard.h
index e24561b5..c9123594 100644
--- a/SelfServiceCommon/Interfaces/inc/textIDL/textkeyboard.h
+++ b/SelfServiceCommon/Interfaces/inc/textIDL/textkeyboard.h
@@ -6,6 +6,127 @@
 
 namespace ipsKeyboard
 {
+  enum keyScanCodes
+  {
+    KEY_ESC =            0x01,
+    KEY_1 =              0x02,
+    KEY_2 =              0x03,
+    KEY_3 =              0x04,
+    KEY_4 =              0x05,
+    KEY_5 =              0x06,
+    KEY_6 =              0x07,
+    KEY_7 =              0x08,
+    KEY_8 =              0x09,
+    KEY_9 =              0x0A,
+    KEY_0 =              0x0B,
+    KEY_MINUS =          0x0C,
+    KEY_EQUAL =          0x0D,
+    KEY_BACKKSPACE =     0x0E,
+    KEY_TAB =            0x0F,
+    KEY_Q =              0x10,
+    KEY_W =              0x11,
+    KEY_E =              0x12,
+    KEY_R =              0x13,
+    KEY_T =              0x14,
+    KEY_Y =              0x15,
+    KEY_U =              0x16,
+    KEY_I =              0x17,
+    KEY_O =              0x18,
+    KEY_P =              0x19,
+    KEY_OPEN_SQUARE =    0x1A,
+    KEY_CLOSE_SQUARE =   0x1B,
+    KEY_ENTER =          0x1C,
+    KEY_LEFT_CTRL =      0x1D,
+    KEY_A =              0x1E,
+    KEY_S =              0x1F,
+    KEY_D =              0x20,
+    KEY_F =              0x21,
+    KEY_G =              0x22,
+    KEY_H =              0x23,
+    KEY_J =              0x24,
+    KEY_K =              0x25,
+    KEY_L =              0x26,
+    KEY_SEMICOLON =      0x27,
+    KEY_APOSTROPH =      0x28,
+    KEY_ACCENT =         0x29,
+    KEY_LEFT_SHFT =      0x2A,
+    KEY_BACKSLASH =      0x2B,
+    KEY_Z =              0x2C,
+    KEY_X =              0x2D,
+    KEY_C =              0x2E,
+    KEY_V =              0x2F,
+    KEY_B =              0x30,
+    KEY_N =              0x31,
+    KEY_M =              0x32,
+    KEY_COMMA =          0x33,
+    KEY_PERIOD =         0x34,
+    KEY_SLASH =          0x35,
+    KEY_RIGHT_SHIFT =    0x36,
+    KEY_KP_STAR =        0x37,
+    KEY_LEFT_ALT =       0x38,
+    KEY_SPACE =          0x39,
+    KEY_CAPS =           0x3A,
+    KEY_F1 =             0x3B,
+    KEY_F2 =             0x3C,
+    KEY_F3 =             0x3D,
+    KEY_F4 =             0x3E,
+    KEY_F5 =             0x3F,
+    KEY_F6 =             0x40,
+    KEY_F7 =             0x41,
+    KEY_F8 =             0x42,
+    KEY_F9 =             0x43,
+    KEY_F10 =            0x44,
+    KEY_NUM =            0x45,
+    KEY_SCROLL =         0x46,
+    KEY_KP_7 =           0x47,
+    KEY_KP_8 =           0x48,
+    KEY_KP_9 =           0x49,
+    KEY_KP_MINUS =       0x4A,
+    KEY_KP_4 =           0x4B,
+    KEY_KP_5 =           0x4C,
+    KEY_KP_6 =           0x4D,
+    KEY_KP_PLUS =        0x4E,
+    KEY_KP_1 =           0x4F,
+    KEY_KP_2 =           0x50,
+    KEY_KP_3 =           0x51,
+    KEY_KP_0 =           0x52,
+    KEY_KP_PERIOD =      0x53,
+    KEY_F11 =            0x57,
+    KEY_F12 =            0x58,
+    KEY_F13 =            0x59,
+    KEY_F14 =            0x5a,
+    KEY_F15 =            0x5b,
+    KEY_F16 =            0x5c,
+    KEY_F17 =            0x68,
+    KEY_F18 =            0x69,
+    KEY_F19 =            0x6a,
+    KEY_F20 =            0x6b,
+    KEY_F21 =            0x6c,
+    KEY_F22 =            0x6d,
+    KEY_F23 =            0x6e,
+    KEY_F24 =            0x76,
+    KEY_KP_ENTER =       0x02001C,
+    KEY_RIGHT_CTRL =     0x02001D,
+    KEY_PRNT =           0x02002A,
+    KEY_KP_SLASH =       0x020035,
+    KEY_SCRN =           0x020037,
+    KEY_RIGHT_ALT =      0x020038,
+    KEY_HOME =           0x020047,
+    KEY_UP_ARROW =       0x020048,
+    KEY_PAGEUP =         0x020049,
+    KEY_LEFT_ARROW =     0x02004B,
+    KEY_RIGHT_ARROW =    0x02004D,
+    KEY_END =            0x02004F,
+    KEY_DOWN_ARROW =     0x020050,
+    KEY_PAGEDOWN =       0x020051,
+    KEY_INSERT =         0x020052,
+    KEY_DELETE =         0x020053,
+    KEY_LEFT_GUI =       0x02005B,
+    KEY_RIGHT_GUI =      0x02005C,
+    KEY_APPS =           0x02005D,
+    KEY_PAUSE =          0x04001D,
+  };
+
   std::string keyScanCodeText (const ipsKeyboardIDL::keyScanCode& data);
   std::string resultCodeText  (const ipsKeyboardIDL::resultCode& data);
   std::string statusCodeText  (const ipsKeyboardIDL::statusCode& data);
diff --git a/SelfServiceCommon/Massai/cpp/textIDL/src/textKeyboard.cpp b/SelfServiceCommon/Massai/cpp/textIDL/src/textKeyboard.cpp
index fd8754de..0bf33651 100644
--- a/SelfServiceCommon/Massai/cpp/textIDL/src/textKeyboard.cpp
+++ b/SelfServiceCommon/Massai/cpp/textIDL/src/textKeyboard.cpp
@@ -11,141 +11,124 @@ namespace ipsKeyboard
   {
     switch(data)
     {
-      case VK_LBUTTON:             return "LBUTTON";
-      case VK_RBUTTON:             return "RBUTTON";
-      case VK_CANCEL:              return "CANCEL";
-      case VK_MBUTTON:             return "MBUTTON";
-      case VK_XBUTTON1:            return "XBUTTON1";
-      case VK_XBUTTON2:            return "XBUTTON2";
-      case VK_BACK:                return "BACK";
-      case VK_TAB:                 return "TAB";
-      case VK_CLEAR:               return "CLEAR";
-      case VK_RETURN:              return "RETURN";
-      case VK_SHIFT:               return "SHIFT";
-      case VK_CONTROL:             return "CONTROL";
-      case VK_MENU:                return "MENU";
-      case VK_PAUSE:               return "PAUSE";
-      case VK_CAPITAL:             return "CAPITAL";
-      case VK_KANA:                return "KANA";
-      case VK_JUNJA:               return "JUNJA";
-      case VK_FINAL:               return "FINAL";
-      case VK_HANJA:               return "HANJA";
-      case VK_ESCAPE:              return "ESCAPE";
-      case VK_CONVERT:             return "CONVERT";
-      case VK_NONCONVERT:          return "NONCONVERT";
-      case VK_ACCEPT:              return "ACCEPT";
-      case VK_MODECHANGE:          return "MODECHANGE";
-      case VK_SPACE:               return "SPACE";
-      case VK_PRIOR:               return "PRIOR";
-      case VK_NEXT:                return "NEXT";
-      case VK_END:                 return "END";
-      case VK_HOME:                return "HOME";
-      case VK_LEFT:                return "LEFT";
-      case VK_UP:                  return "UP";
-      case VK_RIGHT:               return "RIGHT";
-      case VK_DOWN:                return "DOWN";
-      case VK_SELECT:              return "SELECT";
-      case VK_PRINT:               return "PRINT";
-      case VK_EXECUTE:             return "EXECUTE";
-      case VK_SNAPSHOT:            return "SNAPSHOT";
-      case VK_INSERT:              return "INSERT";
-      case VK_DELETE:              return "DELETE";
-      case VK_HELP:                return "HELP";
-      case VK_LWIN:                return "LWIN";
-      case VK_RWIN:                return "RWIN";
-      case VK_APPS:                return "APPS";
-      case VK_SLEEP:               return "SLEEP";
-      case VK_NUMPAD0:             return "NUMPAD0";
-      case VK_NUMPAD1:             return "NUMPAD1";
-      case VK_NUMPAD2:             return "NUMPAD2";
-      case VK_NUMPAD3:             return "NUMPAD3";
-      case VK_NUMPAD4:             return "NUMPAD4";
-      case VK_NUMPAD5:             return "NUMPAD5";
-      case VK_NUMPAD6:             return "NUMPAD6";
-      case VK_NUMPAD7:             return "NUMPAD7";
-      case VK_NUMPAD8:             return "NUMPAD8";
-      case VK_NUMPAD9:             return "NUMPAD9";
-      case VK_MULTIPLY:            return "MULTIPLY";
-      case VK_ADD:                 return "ADD";
-      case VK_SEPARATOR:           return "SEPARATOR";
-      case VK_SUBTRACT:            return "SUBTRACT";
-      case VK_DECIMAL:             return "DECIMAL";
-      case VK_DIVIDE:              return "DIVIDE";
-      case VK_F1:                  return "F1";
-      case VK_F2:                  return "F2";
-      case VK_F3:                  return "F3";
-      case VK_F4:                  return "F4";
-      case VK_F5:                  return "F5";
-      case VK_F6:                  return "F6";
-      case VK_F7:                  return "F7";
-      case VK_F8:                  return "F8";
-      case VK_F9:                  return "F9";
-      case VK_F10:                 return "F10";
-      case VK_F11:                 return "F11";
-      case VK_F12:                 return "F12";
-      case VK_F13:                 return "F13";
-      case VK_F14:                 return "F14";
-      case VK_F15:                 return "F15";
-      case VK_F16:                 return "F16";
-      case VK_F17:                 return "F17";
-      case VK_F18:                 return "F18";
-      case VK_F19:                 return "F19";
-      case VK_F20:                 return "F20";
-      case VK_F21:                 return "F21";
-      case VK_F22:                 return "F22";
-      case VK_F23:                 return "F23";
-      case VK_F24:                 return "F24";
-      case VK_NUMLOCK:             return "NUMLOCK";
-      case VK_SCROLL:              return "SCROLL";
-      case VK_LSHIFT:              return "LSHIFT";
-      case VK_RSHIFT:              return "RSHIFT";
-      case VK_LCONTROL:            return "LCONTROL";
-      case VK_RCONTROL:            return "RCONTROL";
-      case VK_LMENU:               return "LMENU";
-      case VK_RMENU:               return "RMENU";
-      case VK_BROWSER_BACK:        return "BROWSER_BACK";
-      case VK_BROWSER_FORWARD:     return "BROWSER_FORWARD";
-      case VK_BROWSER_REFRESH:     return "BROWSER_REFRESH";
-      case VK_BROWSER_STOP:        return "BROWSER_STOP";
-      case VK_BROWSER_SEARCH:      return "BROWSER_SEARCH";
-      case VK_BROWSER_FAVORITES:   return "BROWSER_FAVORITES";
-      case VK_BROWSER_HOME:        return "BROWSER_HOME";
-      case VK_VOLUME_MUTE:         return "VOLUME_MUTE";
-      case VK_VOLUME_DOWN:         return "VOLUME_DOWN";
-      case VK_VOLUME_UP:           return "VOLUME_UP";
-      case VK_MEDIA_NEXT_TRACK:    return "MEDIA_NEXT_TRACK";
-      case VK_MEDIA_PREV_TRACK:    return "MEDIA_PREV_TRACK";
-      case VK_MEDIA_STOP:          return "MEDIA_STOP";
-      case VK_MEDIA_PLAY_PAUSE:    return "MEDIA_PLAY_PAUSE";
-      case VK_LAUNCH_MAIL:         return "LAUNCH_MAIL";
-      case VK_LAUNCH_MEDIA_SELECT: return "LAUNCH_MEDIA_SELECT";
-      case VK_LAUNCH_APP1:         return "LAUNCH_APP1";
-      case VK_LAUNCH_APP2:         return "LAUNCH_APP2";
-      case VK_OEM_1:               return "OEM_1";
-      case VK_OEM_PLUS:            return "OEM_PLUS";
-      case VK_OEM_COMMA:           return "OEM_COMMA";
-      case VK_OEM_MINUS:           return "OEM_MINUS";
-      case VK_OEM_PERIOD:          return "OEM_PERIOD";
-      case VK_OEM_2:               return "OEM_2";
-      case VK_OEM_3:               return "OEM_3";
-      case VK_OEM_4:               return "OEM_4";
-      case VK_OEM_5:               return "OEM_5";
-      case VK_OEM_6:               return "OEM_6";
-      case VK_OEM_7:               return "OEM_7";
-      case VK_OEM_8:               return "OEM_8";
-      case VK_OEM_102:             return "OEM_102";
-      case VK_PROCESSKEY:          return "PROCESSKEY";
-      case VK_PACKET:              return "PACKET";
-      case VK_ATTN:                return "ATTN";
-      case VK_CRSEL:               return "CRSEL";
-      case VK_EXSEL:               return "EXSEL";
-      case VK_EREOF:               return "EREOF";
-      case VK_PLAY:                return "PLAY";
-      case VK_ZOOM:                return "ZOOM";
-      case VK_NONAME:              return "NONAME";
-      case VK_PA1:                 return "PA1";
-      case VK_OEM_CLEAR:           return "OEM_CLEAR";
-      default:                     return unknown("keyScanCode", data);
+      case KEY_ESC:            return "ESC";
+      case KEY_1:              return "1";
+      case KEY_2:              return "2";
+      case KEY_3:              return "3";
+      case KEY_4:              return "4";
+      case KEY_5:              return "5";
+      case KEY_6:              return "6";
+      case KEY_7:              return "7";
+      case KEY_8:              return "8";
+      case KEY_9:              return "9";
+      case KEY_0:              return "0";
+      case KEY_MINUS:          return "MINUS";
+      case KEY_EQUAL:          return "EQUAL";
+      case KEY_BACKKSPACE:     return "BACKKSPACE";
+      case KEY_TAB:            return "TAB";
+      case KEY_Q:              return "Q";
+      case KEY_W:              return "W";
+      case KEY_E:              return "E";
+      case KEY_R:              return "R";
+      case KEY_T:              return "T";
+      case KEY_Y:              return "Y";
+      case KEY_U:              return "U";
+      case KEY_I:              return "I";
+      case KEY_O:              return "O";
+      case KEY_P:              return "P";
+      case KEY_OPEN_SQUARE:    return "OPEN_SQUARE";
+      case KEY_CLOSE_SQUARE:   return "CLOSE_SQUARE";
+      case KEY_ENTER:          return "ENTER";
+      case KEY_LEFT_CTRL:      return "LEFT_CTRL";
+      case KEY_A:              return "A";
+      case KEY_S:              return "S";
+      case KEY_D:              return "D";
+      case KEY_F:              return "F";
+      case KEY_G:              return "G";
+      case KEY_H:              return "H";
+      case KEY_J:              return "J";
+      case KEY_K:              return "K";
+      case KEY_L:              return "L";
+      case KEY_SEMICOLON:      return "SEMICOLON";
+      case KEY_APOSTROPH:      return "APOSTROPH";
+      case KEY_ACCENT:         return "ACCENT";
+      case KEY_LEFT_SHFT:      return "LEFT_SHFT";
+      case KEY_BACKSLASH:      return "BACKSLASH";
+      case KEY_Z:              return "Z";
+      case KEY_X:              return "X";
+      case KEY_C:              return "C";
+      case KEY_V:              return "V";
+      case KEY_B:              return "B";
+      case KEY_N:              return "N";
+      case KEY_M:              return "M";
+      case KEY_COMMA:          return "COMMA";
+      case KEY_PERIOD:         return "PERIOD";
+      case KEY_SLASH:          return "SLASH";
+      case KEY_RIGHT_SHIFT:    return "RIGHT_SHIFT";
+      case KEY_KP_STAR:        return "KP_STAR";
+      case KEY_LEFT_ALT:       return "LEFT_ALT";
+      case KEY_SPACE:          return "SPACE";
+      case KEY_CAPS:           return "CAPS";
+      case KEY_F1:             return "F1";
+      case KEY_F2:             return "F2";
+      case KEY_F3:             return "F3";
+      case KEY_F4:             return "F4";
+      case KEY_F5:             return "F5";
+      case KEY_F6:             return "F6";
+      case KEY_F7:             return "F7";
+      case KEY_F8:             return "F8";
+      case KEY_F9:             return "F9";
+      case KEY_F10:            return "F10";
+      case KEY_NUM:            return "NUM";
+      case KEY_SCROLL:         return "SCROLL";
+      case KEY_KP_7:           return "KP_7";
+      case KEY_KP_8:           return "KP_8";
+      case KEY_KP_9:           return "KP_9";
+      case KEY_KP_MINUS:       return "KP_MINUS";
+      case KEY_KP_4:           return "KP_4";
+      case KEY_KP_5:           return "KP_5";
+      case KEY_KP_6:           return "KP_6";
+      case KEY_KP_PLUS:        return "KP_PLUS";
+      case KEY_KP_1:           return "KP_1";
+      case KEY_KP_2:           return "KP_2";
+      case KEY_KP_3:           return "KP_3";
+      case KEY_KP_0:           return "KP_0";
+      case KEY_KP_PERIOD:      return "KP_PERIOD";
+      case KEY_F11:            return "F11";
+      case KEY_F12:            return "F12";
+      case KEY_F13:            return "F13";
+      case KEY_F14:            return "F14";
+      case KEY_F15:            return "F15";
+      case KEY_F16:            return "F16";
+      case KEY_F17:            return "F17";
+      case KEY_F18:            return "F18";
+      case KEY_F19:            return "F19";
+      case KEY_F20:            return "F20";
+      case KEY_F21:            return "F21";
+      case KEY_F22:            return "F22";
+      case KEY_F23:            return "F23";
+      case KEY_F24:            return "F24";
+      case KEY_KP_ENTER:       return "KP_ENTER";
+      case KEY_RIGHT_CTRL:     return "RIGHT_CTRL";
+      case KEY_PRNT:           return "PRNT";
+      case KEY_KP_SLASH:       return "KP_SLASH";
+      case KEY_SCRN:           return "SCRN";
+      case KEY_RIGHT_ALT:      return "RIGHT_ALT";
+      case KEY_HOME:           return "HOME";
+      case KEY_UP_ARROW:       return "UP_ARROW";
+      case KEY_PAGEUP:         return "PAGEUP";
+      case KEY_LEFT_ARROW:     return "LEFT_ARROW";
+      case KEY_RIGHT_ARROW:    return "RIGHT_ARROW";
+      case KEY_END:            return "END";
+      case KEY_DOWN_ARROW:     return "DOWN_ARROW";
+      case KEY_PAGEDOWN:       return "PAGEDOWN";
+      case KEY_INSERT:         return "INSERT";
+      case KEY_DELETE:         return "DELETE";
+      case KEY_LEFT_GUI:       return "LEFT_GUI";
+      case KEY_RIGHT_GUI:      return "RIGHT_GUI";
+      case KEY_APPS:           return "APPS";
+      case KEY_PAUSE:          return "PAUSE";
+      default:                 return unknown("keyScanCode", data);
     }
   }
 
@@ -220,14 +203,6 @@ namespace ipsKeyboard
     {
       out << " released";
     }
-    if(data.extension0)
-    {
-      out << " extension 0";
-    }
-    if(data.extension1)
-    {
-      out << " extension 1";
-    }
     return out;
   }
 
diff --git a/SelfServiceCommon/Massai/idl/Massai/keyboard.idl b/SelfServiceCommon/Massai/idl/Massai/keyboard.idl
index 7389275b..19008b75 100644
--- a/SelfServiceCommon/Massai/idl/Massai/keyboard.idl
+++ b/SelfServiceCommon/Massai/idl/Massai/keyboard.idl
@@ -27,8 +27,6 @@ module ipsKeyboardIDL
     keyScanCode scanCode;
     boolean keyUp;
     boolean keyDown;
-    boolean extension0;
-    boolean extension1;
   };
   
   typedef sequence<keyScanCode> scanCodeList;
-- 
2.41.0.windows.1

