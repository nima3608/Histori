From 8195fad6bbe7363dd1bb001d247c0fd527bd1e11 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Thu, 6 Jan 2011 12:37:03 +0000
Subject: [PATCH 0085/1077] Add tracesToFile

git-svn-id: svn://localhost/SelfServiceCommon/trunk@107 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/Tools/tracesToFile.hpp     |  79 ++++++++++++++
 .../Massai/cpp/Tools/makefile.mak             |   1 +
 .../Massai/cpp/Tools/src/tracesToFile.cpp     | 102 ++++++++++++++++++
 .../Massai/cpp/Tools/src/tracesToTrc.cpp      |   2 -
 4 files changed, 182 insertions(+), 2 deletions(-)
 create mode 100644 SelfServiceCommon/Interfaces/inc/Tools/tracesToFile.hpp
 create mode 100644 SelfServiceCommon/Massai/cpp/Tools/src/tracesToFile.cpp

diff --git a/SelfServiceCommon/Interfaces/inc/Tools/tracesToFile.hpp b/SelfServiceCommon/Interfaces/inc/Tools/tracesToFile.hpp
new file mode 100644
index 00000000..391478d5
--- /dev/null
+++ b/SelfServiceCommon/Interfaces/inc/Tools/tracesToFile.hpp
@@ -0,0 +1,79 @@
+/**
+ **************************************************************************
+ *
+ * @file tracesToFile.hpp
+ *
+ * Class tracesToFile::writer definition.
+ *
+ * Purpose of that class is to write trace statements generated by
+ * the trace stream macros as defined in "tracesMac.hpp" and the stream
+ * class as defined in "traces.hpp" to a file.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2011 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+#ifndef TRACESTOFILE_HPP
+#define TRACESTOFILE_HPP
+
+#include "traces.hpp"
+
+
+namespace tracesToFile
+{
+
+   /**
+    *
+    * Trace writer implementation. By overloading the "writer" interface
+    * class it defines and implements the write() and currentLevel()
+    * methods.
+    *
+   **/
+   class writer : public traces::writer
+   {
+
+      //! Implementation class.
+      class impl;
+
+      //! Implementation object reference.
+      impl * const      M_Impl;
+
+   public:
+
+      explicit writer( char const * File );
+
+      virtual ~writer() throw();
+
+      /**
+       *
+       * Implements virtual base class method.
+       *
+      **/
+      void write( traces::meta const & Meta, char const * Text );
+
+   private:
+
+      //! Default constructor - intentionally not implemented.
+      writer();
+
+      //! Copy constructor - intentionally not implemented.
+      writer( writer const & Src );
+
+      //! Assignment - intentionally not implemented.
+      writer& operator=( writer const & Src );
+
+   };
+
+} // namespace tracesToTrc
+
+
+#endif // #ifndef TRACESTOFILE_HPP
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
diff --git a/SelfServiceCommon/Massai/cpp/Tools/makefile.mak b/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
index 0bddd68d..9234852a 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
@@ -28,6 +28,7 @@ MY_LIB1_OBJS =          $(_OBJ)\mHRTimerW32.obj \
                         $(_OBJ)\TraceHandle.obj \
                         $(_OBJ)\tracesFiler.obj \
                         $(_OBJ)\tracesMetaLFL.obj \
+                        $(_OBJ)\tracesToFile.obj \
                         $(_OBJ)\tracesToLocal.obj \
                         $(_OBJ)\tracesToTrc.obj
 
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/tracesToFile.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/tracesToFile.cpp
new file mode 100644
index 00000000..e3c1e129
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/tracesToFile.cpp
@@ -0,0 +1,102 @@
+/**
+ **************************************************************************
+ *
+ * @file tracesToFile.cpp
+ *
+ * Implements class tracesToTrc::writer.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2011 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+
+#include "Tools/tracesToFile.hpp"
+
+#include "mMutexSem.hpp"
+
+#include <fstream>
+#include <windows.h>
+
+
+
+class tracesToFile::writer::impl
+{
+
+   Materna::MSSD::mutexSemaphore        M_Mutex;
+
+   std::ofstream                        M_Out;
+
+public:
+
+   explicit impl( char const * File ) :
+      M_Mutex(),
+      M_Out( File, std::ios::app )
+   {
+   }
+
+   void write( traces::meta const & Meta, char const * Text )
+   {
+      SYSTEMTIME T;
+      GetLocalTime( &T );
+      char Buffer[20];
+      sprintf
+         (
+            Buffer, "%02d:%02d:%02d.%1d",
+            T.wHour, T.wMinute, T.wSecond, T.wMilliseconds / 100
+         );
+      M_Mutex.request();
+      M_Out
+         << "L" << (int)Meta.getLevel() << " " << Buffer << ": "
+         << Text << std::endl;
+      M_Mutex.release();
+   }
+
+private:
+
+   impl();
+
+};
+
+
+
+tracesToFile::writer::writer( char const * File ) :
+   traces::writer(),
+   M_Impl( new tracesToFile::writer::impl( File ) )
+{
+}
+
+
+
+tracesToFile::writer::~writer() throw()
+{
+   try
+   {
+      delete M_Impl;
+   }
+   catch( ... )
+   {
+   }
+}
+
+
+
+void tracesToFile::writer::write
+   (
+      traces::meta const & Meta,
+      char const * Text
+   )
+{
+   M_Impl->write( Meta, Text );
+}
+
+
+
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTrc.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTrc.cpp
index 98c422c3..20b771fc 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTrc.cpp
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTrc.cpp
@@ -498,8 +498,6 @@ tracesToTrc::writer::~writer() throw()
 
 
 
-
-
 /**
  **************************************************************************
  *
-- 
2.41.0.windows.1

