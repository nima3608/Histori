From a564e34c6024695b1ec35c7702baf53393d50828 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 14 Oct 2020 10:08:37 +0000
Subject: [PATCH 1031/1077] MANTIS 59133 Mantis 59133: Label barcode mapping
 Extend nConfigWrapMap by a new get() method to also return comments.

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1596 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/cfgclnt/nConfigWrapMap.hpp |  57 +++++--
 .../Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp | 145 ++++++++++++++----
 2 files changed, 154 insertions(+), 48 deletions(-)

diff --git a/SelfServiceCommon/Interfaces/inc/cfgclnt/nConfigWrapMap.hpp b/SelfServiceCommon/Interfaces/inc/cfgclnt/nConfigWrapMap.hpp
index e5e62f92..8770072d 100644
--- a/SelfServiceCommon/Interfaces/inc/cfgclnt/nConfigWrapMap.hpp
+++ b/SelfServiceCommon/Interfaces/inc/cfgclnt/nConfigWrapMap.hpp
@@ -7,7 +7,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2012 MATERNA Information & Communications
+ * Copyright (c) 2012-2020 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -44,7 +44,7 @@ namespace nConfig
     *
     *         ...
     *
-    *         std::string Second = MyCfgMap.get( First );
+    *         std::string second = MyCfgMap.get( first );
     *
    **/
    class wrapMap
@@ -62,19 +62,19 @@ namespace nConfig
        *
        * Constructor.
        *
-       * @param Client:            Configuration client (application) name.
+       * @param client:            Configuration client (application) name.
        *
-       * @param Item:              The configuration item.
+       * @param item:              The configuration item.
        *
-       * @param Explanation:       Configuration explanation for
+       * @param explanation:       Configuration explanation for
        *                           the configuration UI.
        *
       **/
       wrapMap
          (
-            char const * Client,
-            char const * Item,
-            char const * Explanation
+            char const * client,
+            char const * item,
+            char const * explanation
          );
 
       /**
@@ -88,23 +88,50 @@ namespace nConfig
        *
        * Map read access.
        *
-       * @param First:             The first string to match.
+       * @param first:             The first string to match.
        *
        * @return:                  The associated second string.
+       *                           An empty value could mean, that
+       *                           there is no mapping for "first", or
+       *                           the second string is explicitly empty.
        *
       **/
-      std::string get( char const * First );
+      std::string get( char const * first );
+
+      /**
+       *
+       * Map read access.
+       *
+       * @param first:             The first string to match.
+       *
+       * @param found:             This is a return value to tell, if
+       *                           the "first" argument has a mapping.
+       *
+       * @param comment:           This is a return value with the
+       *                           configured comment (if present).
+       *
+       * @return:                  The associated second string.
+       *                           An empty value could mean, that
+       *                           there is no mapping for "first", or
+       *                           the second string is explicitly empty.
+       *
+      **/
+      std::string get
+         (
+            std::string const & first,
+            bool & found, std::string & comment
+         );
 
       /**
        *
        * Map write access.
        *
-       * @param First:             The first string.
+       * @param first:             The first string.
        *
-       * @param Second:            The second string.
+       * @param second:            The second string.
        *
       **/
-      void set( char const * First, char const * Second );
+      void set( char const * first, char const * second );
 
    private:
 
@@ -112,10 +139,10 @@ namespace nConfig
       wrapMap();
 
       //! Copy constructor - intentionally not implemented.
-      wrapMap( wrapMap const & Src );
+      wrapMap( wrapMap const & src );
 
       //! Assignment - intentionally not implemented.
-      wrapMap & operator=( wrapMap const & Src );
+      wrapMap & operator=( wrapMap const & src );
 
    };
 
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp
index 8341defe..4f40f501 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp
@@ -7,7 +7,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2012-2013 MATERNA Information & Communications
+ * Copyright (c) 2012-2020 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -42,15 +42,15 @@ namespace
     *
     * Extract the first part of a tuple.
     *
-    * @param Str:       The tuple stored in a string.
+    * @param tup:       The tuple stored in a string.
     *
     * @return:          The tuple.first.
     *
    **/
-   std::string tupFirst( std::string const & Str )
+   std::string tupFirst( std::string const & tup )
    {
-      unsigned Off = Str.find( C_Sep );
-      return Str.substr( 0, Off );
+      unsigned Off = tup.find( C_Sep );
+      return tup.substr( 0, Off );
    }
 
 
@@ -58,31 +58,31 @@ namespace
     *
     * Extract the second part of a tuple.
     *
-    * @param Str:       The tuple stored in a string.
+    * @param tup:       The tuple stored in a string.
     *
     * @return:          The tuple.second.
     *
    **/
-   std::string tupSecond( std::string const & Str )
+   std::string tupSecond( std::string const & tup )
    {
-      unsigned const Off1 = Str.find( C_Sep );
+      unsigned const Off1 = tup.find( C_Sep );
       if( Off1 == std::string::npos )
       {
          return std::string();
       }
       else
       {
-         unsigned const Off2 = Str.find( C_Sep, Off1 + 1 );
+         unsigned const Off2 = tup.find( C_Sep, Off1 + 1 );
          if( Off2 == std::string::npos )
          {
-            return Str.substr
+            return tup.substr
                (
                   Off1 + 1              // Use all after the separator
                );
          }
          else
          {
-            return Str.substr
+            return tup.substr
                (
                   Off1 + 1,             // Start after the 1st separator
                   ( Off2 - Off1 ) - 1   // Length of text between
@@ -92,7 +92,53 @@ namespace
    }
 
 
-}
+   /**
+    *
+    * Extract the third part of a tuple.
+    *
+    * @param tup:       The tuple stored in a string.
+    *
+    * @return:          The tuple.second.
+    *
+   **/
+   std::string tupThird( std::string const & tup )
+   {
+      unsigned const Off1 = tup.find( C_Sep );
+      if( Off1 == std::string::npos )
+      {
+         return std::string();
+      }
+      else
+      {
+         unsigned const Off2 = tup.find( C_Sep, Off1 + 1 );
+         if( Off2 == std::string::npos )
+         {
+            return std::string();
+         }
+         else
+         {
+            unsigned const Off3 = tup.find( C_Sep, Off2 + 1 );
+            if( Off3 == std::string::npos )
+            {
+               return tup.substr
+                  (
+                     Off2 + 1              // Use all after the separator
+                  );
+            }
+            else
+            {
+               return tup.substr
+                  (
+                     Off2 + 1,             // Start after the separator
+                     ( Off3 - Off2 ) - 1   // Length of text between
+                  );
+            }
+         }
+      }
+   }
+
+
+} // namespace
 
 
 
@@ -139,16 +185,16 @@ public:
    **/
    impl
       (
-         char const * Client,
-         char const * Item,
-         char const * Explanation
+         char const * client,
+         char const * item,
+         char const * explanation
       ) :
          nConfig::cache<std::list<std::string>,nConfig::gclTextList>
             (
-               Item,
-               Client
+               item,
+               client
             ),
-         M_Explanation( Explanation )
+         M_Explanation( explanation )
    {
    }
 
@@ -184,11 +230,11 @@ private:
  */
 nConfig::wrapMap::wrapMap
    (
-      char const * Client,
-      char const * Item,
-      char const * Explanation
+      char const * client,
+      char const * item,
+      char const * explanation
    ) :
-      M_Impl( new impl( Client, Item, Explanation ) )
+      M_Impl( new impl( client, item, explanation ) )
 {
 }
 
@@ -217,10 +263,10 @@ nConfig::wrapMap::~wrapMap() throw()
  * Class nConfig::wrapMap method - see "nConfigWrapMap.hpp".
  *
  */
-std::string nConfig::wrapMap::get( char const * First )
+std::string nConfig::wrapMap::get( char const * first )
 {
    stringList const List = M_Impl->cached();
-   if( First )
+   if( first )
    {
       for(
             stringList::const_iterator It = List.begin();
@@ -228,10 +274,10 @@ std::string nConfig::wrapMap::get( char const * First )
             ++It
          )
       {
-         std::string const Str = *It;
-         if( tupFirst( Str ) == First )
+         std::string const tup = *It;
+         if( tupFirst( tup ) == first )
          {
-            return tupSecond( Str ).c_str();
+            return tupSecond( tup ).c_str();
          }
       }
    }
@@ -245,14 +291,47 @@ std::string nConfig::wrapMap::get( char const * First )
  * Class nConfig::wrapMap method - see "nConfigWrapMap.hpp".
  *
  */
-void nConfig::wrapMap::set( char const * First, char const * Second )
+std::string nConfig::wrapMap::get
+   (
+      std::string const &       first,
+      bool &                    found,
+      std::string &             comment
+   )
+{
+   stringList const List = M_Impl->cached();
+   found = false;
+   for(
+         stringList::const_iterator It = List.begin();
+         It != List.end();
+         ++It
+      )
+   {
+      std::string const tup = *It;
+      if( tupFirst( tup ) == first )
+      {
+         found = true;
+         comment = tupThird( tup );
+         return tupSecond( tup );
+      }
+   }
+   return std::string();
+}
+
+
+
+/*
+ *
+ * Class nConfig::wrapMap method - see "nConfigWrapMap.hpp".
+ *
+ */
+void nConfig::wrapMap::set( char const * first, char const * second )
 {
    stringList List = M_Impl->cached();
    stringList::iterator It = List.begin();
    bool Found = false;
    while( !Found && It != List.end() )
    {
-      if( tupFirst( *It ) == First )
+      if( tupFirst( *It ) == first )
       {
          It = List.erase( It );
          Found = true;
@@ -262,10 +341,10 @@ void nConfig::wrapMap::set( char const * First, char const * Second )
          ++It;
       }
    }
-   std::string NewStr = First;
-   NewStr += C_Sep;
-   NewStr += Second;
-   List.insert( It, NewStr );
+   std::string new_str = first;
+   new_str += C_Sep;
+   new_str += second;
+   List.insert( It, new_str );
    M_Impl->set( List );
    M_Impl->valueChanged();
 }
-- 
2.41.0.windows.1

