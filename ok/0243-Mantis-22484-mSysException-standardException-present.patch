From 28db934f4ce0b1109fef11ae08546a6e1ee0adca Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 21 Feb 2012 14:50:38 +0000
Subject: [PATCH 0243/1076] - Mantis 22484, mSysException::standardException
 present in thread only with handler supplied - Provide a name attribute for
 child threads

git-svn-id: svn://localhost/SelfServiceCommon/trunk@296 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/systools/mSysThread.hpp    |   4 +
 .../Massai/cpp/Systools/src/mSysThreadW32.cpp | 145 +++++++++++-------
 2 files changed, 93 insertions(+), 56 deletions(-)

diff --git a/SelfServiceCommon/Interfaces/inc/systools/mSysThread.hpp b/SelfServiceCommon/Interfaces/inc/systools/mSysThread.hpp
index c3e0c1d2..c7d39419 100644
--- a/SelfServiceCommon/Interfaces/inc/systools/mSysThread.hpp
+++ b/SelfServiceCommon/Interfaces/inc/systools/mSysThread.hpp
@@ -144,6 +144,9 @@ namespace mSysThread
        *
        * @param TraceWriter:    The object to be used for trace events.
        *
+       * @param TraceName:      Give this object a name, which could then
+       *                        appear in traces generated by mSysThread.
+       *
        * @param Stacksize:      The minimum size (in bytes) for the thread
        *                        stack. Use the default to leave it to the
        *                        implementation.
@@ -153,6 +156,7 @@ namespace mSysThread
          (
             threadException const *     ThreadExeption,
             traces::writer *            TraceWriter,
+            char const *                TraceName = 0,
             long                        Stacksize = 0
          );
 
diff --git a/SelfServiceCommon/Massai/cpp/Systools/src/mSysThreadW32.cpp b/SelfServiceCommon/Massai/cpp/Systools/src/mSysThreadW32.cpp
index e14458f9..c7063754 100644
--- a/SelfServiceCommon/Massai/cpp/Systools/src/mSysThreadW32.cpp
+++ b/SelfServiceCommon/Massai/cpp/Systools/src/mSysThreadW32.cpp
@@ -170,6 +170,9 @@ class mSysThread::mSysThread_Impl
    //! Client trace function.
    traces::writer *                     MH_TraceWriter;
 
+   //! Object name for traces.
+   std::string const                    MH_TraceName;
+
    //! Buffer for child thread traces (may contain stack trace).
    char                                 MH_TraceChild[0x4000];
 
@@ -191,7 +194,8 @@ class mSysThread::mSysThread_Impl
       V_SNPRINTF
          (
             MH_TraceChild, sizeof(MH_TraceChild),
-            "child[%d]: %s",
+            "mSysThread%s:function [%d] %s",
+            MH_TraceName.c_str(),
             mSysThread::id(),
             Src
          );
@@ -214,8 +218,8 @@ class mSysThread::mSysThread_Impl
       V_SNPRINTF
          (
             MH_TraceParent, sizeof(MH_TraceParent),
-            "parent[%d]: %s",
-            mSysThread::id(),
+            "mSysThread%s:%s",
+            MH_TraceName.c_str(),
             Src
          );
       MH_TraceParent[sizeof(MH_TraceParent) - 1] = 0;
@@ -272,9 +276,9 @@ public:
          char TBuffer[256];
          V_SNPRINTF
             (
-               TBuffer, sizeof(TBuffer), "%s error %d",
-               Text,
-               LE
+               TBuffer, sizeof(TBuffer), "GetLastError %d = %s",
+               LE,
+               Text
             );
          TBuffer[sizeof(TBuffer) - 1] = 0;
          MH_TraceWriter->write
@@ -291,57 +295,74 @@ public:
     * Thread function
     *
    **/
-   void function()
+   void function_1st()
+   {
+      if( MH_ThreadExeption )
+      {
+         mSysException::standardException StdConverter;
+         try
+         {
+            function_2nd();
+         }
+         catch( ... )
+         {
+            MH_ThreadExeption->handle();
+         }
+      }
+      else
+      {
+         function_2nd();
+      }
+      MH_Terminated = true;
+   }
+
+   /**
+    *
+    * Thread function
+    *
+   **/
+   void function_2nd()
    {
-      mSysException::standardException StdConverter;
       MH_ThreadId = GetCurrentThreadId();
       MH_Terminated = false;
-      try
+      if( MH_TraceWriter )
       {
-         if( MH_TraceWriter )
+         try
          {
-            try
-            {
-               MH_TraceWriter->write
-                  (
-                     L_Meta_SecondaryRuntime,
-                     makeChild( "call" )
-                  );
-               MH_Root->function();
-               MH_TraceWriter->write
-                  (
-                     L_Meta_SecondaryRuntime,
-                     makeChild( "return" )
-                  );
-            }
-            catch( std::exception & X )
-            {
-               MH_TraceWriter->write
-                  (
-                     L_Meta_MajorError,
-                     makeChild( X.what() )
-                  );
-               throw;
-            }
-            catch( ... )
-            {
-               MH_TraceWriter->write
-                  (
-                     L_Meta_MajorError,
-                     makeChild( "unknown exception" )
-                  );
-               throw;
-            }
+            MH_TraceWriter->write
+               (
+                  L_Meta_SecondaryRuntime,
+                  makeChild( "call" )
+               );
+            MH_Root->function();
+            MH_TraceWriter->write
+               (
+                  L_Meta_SecondaryRuntime,
+                  makeChild( "return" )
+               );
          }
-         else
+         catch( std::exception & X )
          {
-            MH_Root->function();
+            MH_TraceWriter->write
+               (
+                  L_Meta_MajorError,
+                  makeChild( X.what() )
+               );
+            throw;
+         }
+         catch( ... )
+         {
+            MH_TraceWriter->write
+               (
+                  L_Meta_MajorError,
+                  makeChild( "unknown exception" )
+               );
+            throw;
          }
       }
-      catch( ... )
+      else
       {
-         if( MH_ThreadExeption )
-            MH_ThreadExeption->handle();
+         MH_Root->function();
       }
       MH_Terminated = true;
    }
@@ -358,13 +379,16 @@ public:
     *
     * @param TraceWriter:       The trace function to use (may be 0).
     *
+    * @param TraceName:         Give this object a name.
+    *
    **/
    mSysThread_Impl
       (
          mSysThread::thread *           Root,
          threadException const *        ThreadExeption,
          long                           Stacksize,
-         traces::writer *               TraceWriter
+         traces::writer *               TraceWriter,
+         char const *                   TraceName
       ) :
       MH_Handle( C_ThreadhandleInitial ),
       MH_Root( Root ),
@@ -375,14 +399,20 @@ public:
       MH_Terminated( true ),
       MH_ThreadExeption( ThreadExeption ),
       MH_ThreadId( 0 ),
-      MH_TraceWriter( TraceWriter )
+      MH_TraceWriter( TraceWriter ),
+      MH_TraceName
+            (
+               TraceName ?
+               ( std::string("<") + TraceName + ">" )
+               : ":"
+            )
    {
       if( TraceWriter )
       {
          TraceWriter->write
             (
                L_Meta_SecondaryRuntime,
-               makeParent( "created" )
+               makeParent( "mSysThread()" )
             );
       }
    }
@@ -404,16 +434,16 @@ public:
                {
                   traceError
                      (
-                        "delete - TerminateThread failed"
+                        "~mSysThread() - TerminateThread failed"
                      );
                }
             }
             if( !CloseHandle( MH_Handle ) )
             {
-               traceError( "delete - CloseHandle failed" );
+               traceError( "~mSysThread() - CloseHandle failed" );
             }
          }
-         traceNormal( "deleted" );
+         traceNormal( "~mSysThread()" );
       }
       catch( ... )
       {
@@ -608,6 +638,7 @@ public:
          }
          MH_Handle = C_ThreadhandleInitial;
       }
+      traceNormal( "start()" );
       unsigned int threadId = 0;
       HANDLE NewHandle = (HANDLE)_beginthreadex
                          (
@@ -623,7 +654,6 @@ public:
          return traceLastError( "start - CreateThread" );
       }
       MH_Handle = NewHandle;
-      traceNormal( "start()" );
       switch( Priority )
       {
       default:
@@ -711,6 +741,7 @@ mSysThread::thread::thread
                      this,
                      ThreadExeption,
                      Stacksize,
+                     0,
                      0
                   );
 }
@@ -726,6 +757,7 @@ mSysThread::thread::thread
    (
       threadException const *   ThreadExeption,
       traces::writer *          TraceWriter,
+      char const *              TraceName,
       long                      Stacksize
    ) :
    M_Impl( 0 )
@@ -735,7 +767,8 @@ mSysThread::thread::thread
                      this,
                      ThreadExeption,
                      Stacksize,
-                     TraceWriter
+                     TraceWriter,
+                     TraceName
                   );
 }
 
@@ -879,7 +912,7 @@ namespace
    {
       mSysThread::mSysThread_Impl *pPara =
          (mSysThread::mSysThread_Impl *)pV;
-      pPara->function();
+      pPara->function_1st();
       return 0;
    }
 
-- 
2.41.0.windows.1

