From 7bb0ec1d7d07ebf767cc437840add3f00061ea8a Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Fri, 18 Aug 2017 15:04:34 +0000
Subject: [PATCH 0867/1077] MANTIS 47215 Mantis 47215: Traces to TraceClt

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1241 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/Tools/tracesToTraceClt.hpp |  99 +++++++++++
 .../Massai/cpp/Tools/makefile.mak             |   5 +-
 .../Massai/cpp/Tools/src/tracesToTraceClt.cpp | 164 ++++++++++++++++++
 3 files changed, 266 insertions(+), 2 deletions(-)
 create mode 100644 SelfServiceCommon/Interfaces/inc/Tools/tracesToTraceClt.hpp
 create mode 100644 SelfServiceCommon/Massai/cpp/Tools/src/tracesToTraceClt.cpp

diff --git a/SelfServiceCommon/Interfaces/inc/Tools/tracesToTraceClt.hpp b/SelfServiceCommon/Interfaces/inc/Tools/tracesToTraceClt.hpp
new file mode 100644
index 00000000..f4ac6b12
--- /dev/null
+++ b/SelfServiceCommon/Interfaces/inc/Tools/tracesToTraceClt.hpp
@@ -0,0 +1,99 @@
+/**
+ **************************************************************************
+ *
+ * @file tracesToTraceClt.hpp
+ *
+ * Class tracesToTraceClt::writer definition.
+ *
+ * Purpose of that class is to use the existing trace infrastructure
+ * (as defined in "TraceClt.h") to write trace statements generated by the
+ * trace stream macros as defined in "tools/tracesMac.hpp" and the stream
+ * class as defined in "tools/traces.hpp".
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2017 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+#ifndef TRACESTOTRACECLT_HPP
+#define TRACESTOTRACECLT_HPP
+
+
+#include "tools/traces.hpp"
+
+
+namespace tracesToTraceClt
+{
+
+   /**
+    *
+    * Trace writer implementation. By overloading the "writer" interface
+    * class it defines and implements the write() and currentLevel()
+    * methods.
+    *
+   **/
+   class writer : public traces::writer
+   {
+
+      //! Implementation class.
+      class impl;
+
+      //! Implementation object reference.
+      impl * const      M_Impl;
+
+      /**
+       *
+       * Implements virtual base class method.
+       *
+      **/
+      traces::level currentLevel() const;
+
+      /**
+       *
+       * Implements virtual base class method.
+       *
+      **/
+      void write
+         (
+            traces::meta const &        Meta,
+            char const *                Text
+         );
+
+   public:
+
+      /**
+       *
+       * Constructor.
+       *
+      **/
+      writer();
+
+      /**
+       *
+       * Destructor.
+       *
+      **/
+      virtual ~writer() throw();
+
+   private:
+
+      //! Copy constructor - intentionally not implemented.
+      writer( writer const & Src );
+
+      //! Assignment - intentionally not implemented.
+      writer& operator=( writer const & Src );
+
+   };
+
+} // namespace tracesToTraceClt
+
+
+#endif // #ifndef TRACESTOTRACECLT_HPP
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
diff --git a/SelfServiceCommon/Massai/cpp/Tools/makefile.mak b/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
index c1e4bda0..a6978dcc 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
@@ -38,8 +38,9 @@ MY_LIB1_OBJS =          $(_OBJ)\mHRTimerW32.obj \
                         $(_OBJ)\tracesToFile.obj \
                         $(_OBJ)\tracesToFileParts.obj \
                         $(_OBJ)\tracesToLocal.obj \
-                        $(_OBJ)\tracesToTrc.obj \
+                        $(_OBJ)\tracesToTraceClt.obj \
                         $(_OBJ)\tracesToTraceInterface.obj \
+                        $(_OBJ)\tracesToTrc.obj \
                         $(_OBJ)\ResetTime.obj \
                         $(_OBJ)\ActionTimeLimit.obj \
                         $(_OBJ)\TraceSetLevel.obj \
@@ -50,7 +51,7 @@ MY_LIB1_OBJS =          $(_OBJ)\mHRTimerW32.obj \
                         $(_OBJ)\SchedulerInterface.obj \
                         $(_OBJ)\dateTimeTools.obj \
                         $(_OBJ)\TraceDelegateWithLevelFromEnv.obj \
-                        
+
 
 ######################################################################
 
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTraceClt.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTraceClt.cpp
new file mode 100644
index 00000000..1b299059
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTraceClt.cpp
@@ -0,0 +1,164 @@
+/**
+ **************************************************************************
+ *
+ * @file tracesToTraceClt.cpp
+ *
+ * Implements class tracesToTraceClt::writer.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2017 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+
+// Exported
+#include "Tools/tracesToTraceClt.hpp"
+
+// From SelfServiceCommon
+#include "systools/mAutoMutex.hpp"
+#include "systools/mSysThread.hpp"
+#include "TraceFormat.hpp"
+// For "MASSAI::trace::TraceHandle"
+#include "trc/TraceClt.h"
+#include "trc/TraceLevel.h"
+
+// Compiler lib
+#include <iostream>
+#include <string>
+
+
+
+/**
+ *
+ * Writer implementation class.
+ *
+**/
+class tracesToTraceClt::writer::impl
+{
+
+public:
+
+   impl() {}
+
+   //! Implementation class method - like interface class method.
+   traces::level currentLevel()
+   {
+#if( defined _MSC_VER ) && (_MSC_VER <= 1200 ) // 1200 == VC6
+      // TODO For VC6 we do not have the getTraceLevel() function
+      return traces::Lvl_SecondaryFrequent;
+#else
+      long const lev = getTraceLevel();
+      switch( lev )
+      {
+      case 0: return traces::Lvl_None;
+      case 1: return traces::Lvl_MajorError;
+      case 2: return traces::Lvl_MinorError;
+      case 3: return traces::Lvl_MajorWarning;
+      case 4: return traces::Lvl_MinorWarning;
+      case 5: return traces::Lvl_BasicRuntime;
+      case 6: return traces::Lvl_BasicProcess;
+      case 7: return traces::Lvl_SecondaryRuntime;
+      default: return traces::Lvl_SecondaryFrequent;
+      }
+#endif
+   }
+
+   /**
+    *
+    * Implementation class method.
+    * Write a trace-line.
+    *
+    * @param in_level:          The level of the trace entry. This has
+    *                           been taken from the static meta data.
+    *
+    * @param trace_text:        The trace text payload.
+    *
+   **/
+   void write( traces::level in_level, char const * trace_text ) throw()
+   {
+      try
+      {
+         char const out_level = '0' + static_cast<char>( in_level );
+         writeTraceCooked
+            (
+               (
+                  // Cooked trace line,
+                  TraceFormat::dateTime( mSysTime::getTimestamp() ) +
+                  TraceFormat::separator() +
+                  TraceFormat::threadId( mSysThread::id() ) +
+                  TraceFormat::separator() + out_level +
+                  TraceFormat::separator() + trace_text
+               ).c_str()
+            );
+      }
+      catch( ... )
+      {
+      }
+   }
+
+private:
+
+   //! Copy constructor - intentionally not implemented.
+   impl( impl const & src );
+
+   //! Assignment - intentionally not implemented.
+   impl & operator=( impl const & src );
+
+};
+
+
+
+// Method implementation - see "gciTrace.hpp"
+traces::level tracesToTraceClt::writer::currentLevel() const
+{
+   return M_Impl->currentLevel();
+}
+
+
+
+// Method implementation, see "tracesToTraceClt.hpp".
+void tracesToTraceClt::writer::write
+   (
+      traces::meta const &      traces_meta,
+      char const *              trace_text
+   )
+{
+   // Source-file-line information
+   std::string TraceBuffer = traces_meta.getFormatted();
+   // Trace entry
+   TraceBuffer += trace_text;
+   M_Impl->write( traces_meta.getLevel(), TraceBuffer.c_str() );
+}
+
+
+
+// Method implementation, see "tracesToTraceClt.hpp".
+tracesToTraceClt::writer::writer() :
+   M_Impl( new impl )
+{
+}
+
+
+
+// Method implementation, see "tracesToTraceClt.hpp".
+tracesToTraceClt::writer::~writer() throw()
+{
+   try
+   {
+      delete M_Impl;
+   }
+   catch( ... )
+   {
+   }
+}
+
+
+
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
-- 
2.41.0.windows.1

