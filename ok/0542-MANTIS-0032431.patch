From 83b74d8bbe639d10907eaa194a0c65bc067e6948 Mon Sep 17 00:00:00 2001
From: motten <motten@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 19 Nov 2014 15:34:53 +0000
Subject: [PATCH 0542/1000] MANTIS 0032431 -added comments to all methods

git-svn-id: svn://localhost/SelfServiceCommon/trunk@777 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/mControl/inc/mControl_config.h |  75 +++++-----
 .../Massai/cpp/mControl/inc/mControl_dialog.h |  31 ++---
 .../cpp/mControl/inc/mControl_logging.h       |  14 +-
 .../cpp/mControl/inc/mControl_notification.h  |  11 +-
 .../Massai/cpp/mControl/inc/mControl_reboot.h |   6 +-
 .../cpp/mControl/inc/mControl_scheduler.h     |  17 +--
 .../cpp/mControl/inc/mControl_servant.h       | 122 +++++++++++------
 .../Massai/cpp/mControl/inc/mControl_tools.h  |  11 +-
 .../Massai/cpp/mControl/inc/mControl_worker.h |   5 +-
 .../cpp/mControl/src/mControl_config.cpp      |  10 --
 .../cpp/mControl/src/mControl_dialog.cpp      |   6 -
 .../cpp/mControl/src/mControl_logging.cpp     |   3 +-
 .../Massai/cpp/mControl/src/mControl_main.cpp |  11 +-
 .../cpp/mControl/src/mControl_reboot.cpp      |   6 +-
 .../cpp/mControl/src/mControl_servant.cpp     | 129 ++++++++----------
 .../cpp/mControl/src/mControl_tools.cpp       |   1 +
 16 files changed, 215 insertions(+), 243 deletions(-)

diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_config.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_config.h
index a4a98ed8..ad69cba1 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_config.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_config.h
@@ -78,27 +78,23 @@ namespace mControl
         /**
         * Attribut getter Methods
         */
-        bool serverMode(){ return m_serverMode; }
-        bool noLogActive(){ return m_noLog; }
-        bool noSNMPActive(){ return m_noSNMP; }
-        bool noPortableMCCActive(){ return m_portableMCC; }
-        bool isRunningAsUserShell(){ return m_isRunningAsUserShell; }
-        bool isStarted(){ return m_started; }
-        bool isTerminated(){ return m_terminate; }
-
-        long getCurrentProcesses(){ return m_currentProcesses; }
-        long getCurrLoadPercent(){ return m_currLoadPercent; }
-        long getAllProcesses(){ return m_allProcesses; }
-        
-        float getTmp(){ return m_tmp; }
-        
-        alert* getAlert(){ return m_alert; }
-
-        Poco::ThreadPool& getThreadPool(){ return m_threadPool; }
-        CEnvSubst& getEnvS(){ return m_EnvS; }
-        Poco::NotificationQueue& getQueue(){ return m_queue; }
-        Worker* getWorker(){ return m_worker; }
-        std::list<long>& getPrList(){ return m_prList; }
+        bool                        serverMode(){ return m_serverMode; }
+        bool                        noLogActive(){ return m_noLog; }
+        bool                        noSNMPActive(){ return m_noSNMP; }
+        bool                        noPortableMCCActive(){ return m_portableMCC; }
+        bool                        isRunningAsUserShell(){ return m_isRunningAsUserShell; }
+        bool                        isStarted(){ return m_started; }
+        bool                        isTerminated(){ return m_terminate; }
+        long                        getCurrentProcesses(){ return m_currentProcesses; }
+        long                        getCurrLoadPercent(){ return m_currLoadPercent; }
+        long                        getAllProcesses(){ return m_allProcesses; }
+        float                       getTmp(){ return m_tmp; }
+        alert*                      getAlert(){ return m_alert; }
+        Poco::ThreadPool&           getThreadPool(){ return m_threadPool; }
+        CEnvSubst&                  getEnvS(){ return m_EnvS; }
+        Poco::NotificationQueue&    getQueue(){ return m_queue; }
+        Worker*                     getWorker(){ return m_worker; }
+        std::list<long>&            getPrList(){ return m_prList; }
 
     
         /**
@@ -210,21 +206,21 @@ namespace mControl
         /**
         * Attribut getter Methods
         */
-        int getWidth(){ return m_width; }
-        int getHeight(){ return m_height; }
-        int getX(){ return m_xCoordinate; }
-        int getY(){ return m_yCoordinate; }
-        HBITMAP getHBitMap(){ return m_hbmMain; }
-        HBITMAP getHBitMapInfo1(){ return m_hBitmap_info_1; }
-        HBITMAP getHBitMapInfo2(){ return m_hBitmap_info_2; }
-        HWND getHwnd(){ return m_hWnd; }
-        HWND getHwndLoad(){ return m_hWndLoad; }
-        HWND getHwndInfo1(){ return m_hWndInfo_1; }
-        HWND getHwndInfo2(){ return m_hWndInfo_2; }
-        HINSTANCE getInstance(){ return m_Wcex.hInstance; }
-        LPCTSTR getClassName() const;
-        GlobalConfig& getConfig(){ return m_globalConfig; }
-        WNDCLASSEX& getWndClassex(){ return m_Wcex; }
+        int             getWidth(){ return m_width; }
+        int             getHeight(){ return m_height; }
+        int             getX(){ return m_xCoordinate; }
+        int             getY(){ return m_yCoordinate; }
+        HBITMAP         getHBitMap(){ return m_hbmMain; }
+        HBITMAP         getHBitMapInfo1(){ return m_hBitmap_info_1; }
+        HBITMAP         getHBitMapInfo2(){ return m_hBitmap_info_2; }
+        HWND            getHwnd(){ return m_hWnd; }
+        HWND            getHwndLoad(){ return m_hWndLoad; }
+        HWND            getHwndInfo1(){ return m_hWndInfo_1; }
+        HWND            getHwndInfo2(){ return m_hWndInfo_2; }
+        HINSTANCE       getInstance(){ return m_Wcex.hInstance; }
+        LPCTSTR         getClassName() const;
+        GlobalConfig&   getConfig(){ return m_globalConfig; }
+        WNDCLASSEX&     getWndClassex(){ return m_Wcex; }
 
 
         /**
@@ -248,7 +244,8 @@ namespace mControl
 
 
 /**********************************************************************************************************************
-* old mControl Config classes
+*   TODO: implement in header-> definition, cpp implementation
+*   old mControl Config classes
 */
 
 
@@ -393,8 +390,6 @@ namespace mControl
            nConfig::gcTextList(pszItem,"massaiControl"),
            defStringList()
         {
-           //defStringList.push_back( "Eins" );
-           //defStringList.push_back( "Zwei" );
         }
     };
 
@@ -439,8 +434,6 @@ namespace mControl
            nConfig::gcTextList(pszItem,"massaiControl"),
            defStringList()
         {
-           //defStringList.push_back( "Eins" );
-           //defStringList.push_back( "Zwei" );
         }
     };
 }
diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_dialog.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_dialog.h
index 4efa7f24..b942ef93 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_dialog.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_dialog.h
@@ -21,48 +21,47 @@
 #include <string.h>
 
 //Poco includes
-#include "Poco/Runnable.h"
 #include "Poco/NotificationQueue.h"
 #include "Poco/Notification.h"
 
 
 namespace mControl
 {
-    class Dialog  : public Poco::Runnable
+    class Dialog
     {
     private:
-        Poco::NotificationQueue &         m_notificationQueue; 
-        WindowConfig                m_windowConfig;
-        GlobalConfig &              m_globalConfig;
+        Poco::NotificationQueue &       m_notificationQueue; 
+        WindowConfig                    m_windowConfig;
+        GlobalConfig &                  m_globalConfig;
 
     public:
         /**
-        * Calls the ShowWindow() Methods of the Window-API with the given Parameter
+        *   Calls the ShowWindow() Methods of the Window-API with the given Parameter
         */
         int init();
 
-
-
-        /**
-        * Needs to be implemented from the Runnable interface.
-        * Here the it should handle the Messages, which are insereted by the Scheduler and the Rebooter.
-        */
-        void run();
 	  
 
         /**
-        *   load bitmap from file
+        *   Loads a bitmap from file
+        *
+        *   @param hdc: -handle to a Device-Context Object
+        *   @param szFileName: -full path to the bitmap file
+        *
+        *   @return: -a handle to a bitmap
         */
         static HBITMAP CreateBitmapObjectFromDibFile (HDC hdc, PTSTR szFileName);
 
 
-        /**
+        /** TODO: is this method used?
         *   Finds the first valid drive letter from a mask of drive letters.
         *   The mask must be in the format bit 0 = A, bit 1 = B, bit 3 = C,
         *   etc. A valid drive letter is defined when the corresponding bit
         *   is set to 1.
         *
-        *   Returns the first drive letter that was found.
+        *   @param unitmask: 
+        *
+        *   @return: -first drive letter that was found.
         */
         char FirstDriveFromMask (ULONG unitmask);
 
diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_logging.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_logging.h
index 92430ab9..6a9d13d4 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_logging.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_logging.h
@@ -19,13 +19,21 @@
 
 class Logging : public mSysProcess::callBack
 {
+private:
+    MASSAI::trace::TraceInterface& m_trc;
+
 public:
+    /**
+    *   Constructor
+    *   @param trc: -a reference to a Trace-Client
+    */
     Logging(MASSAI::trace::TraceInterface& trc);
 
+    /**
+    *   Traces the given line of character's
+    *   @param line: -the line to trace
+    */
     void lineOut(const char* line) const;
-
-private:
-    MASSAI::trace::TraceInterface& m_trc;
 };
 
 #endif
\ No newline at end of file
diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_notification.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_notification.h
index 2e32f26e..7500da6e 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_notification.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_notification.h
@@ -29,7 +29,7 @@ namespace mControl
     class MControlNotification : public Poco::Notification 
     {
       private: 
-        std::string      m_info;
+        std::string m_info;
         int         m_parentID;
         int         m_cmd;
 
@@ -37,11 +37,10 @@ namespace mControl
         /**
         * getter Methods
         */
-        std::string data() const;
-        int getId() const;
-        int getCmd() const;
-        void printString();
-
+        std::string     data() const;
+        int             getId() const;
+        int             getCmd() const;
+        void            printString(); //TODO: erase after completion
 
 
         //Constructor
diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_reboot.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_reboot.h
index 3edda967..b0497458 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_reboot.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_reboot.h
@@ -30,7 +30,7 @@
 
 namespace mControl
 {
-    class KioskReboot : public Runnable
+    class KioskReboot : public Poco::Runnable
     {
       private:
         long                        m_startDelay;
@@ -52,7 +52,7 @@ namespace mControl
         void run();
 
 
-        //TODO: implement
+        //TODO: implement without FILE?
         /**
         * default implementation
         *
@@ -62,7 +62,7 @@ namespace mControl
         long saveRebootDate();
 
 
-        //TODO: implement
+        //TODO: implement without FILE?
         /**
         *
         * Reads the last reboot-date of the Kiosk in a file,
diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_scheduler.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_scheduler.h
index 8ec7c497..50e9c89e 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_scheduler.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_scheduler.h
@@ -30,11 +30,6 @@
 #include "Poco/Notification.h"
 
 
-using Poco::Runnable;
-using Poco::NotificationQueue;
-using Poco::Notification;
-
-
 /**
 * For the Date and Time configuration use mTime und mDate
 */
@@ -42,12 +37,12 @@ using Poco::Notification;
 
 namespace mControl
 {
-    class Scheduler : public Runnable
+    class Scheduler : public Poco::Runnable
     {
       private:
-        NotificationQueue &         m_notificationQueue;      
-        GlobalConfig &     m_globalConfig;
-        std::list<int>    m_cmdList;            //List of configuratoin items/applications
+        Poco::NotificationQueue &   m_notificationQueue;      
+        GlobalConfig &              m_globalConfig;
+        std::list<int>              m_cmdList;            //List of configuratoin items/applications
         
 
         /**
@@ -80,13 +75,13 @@ namespace mControl
         /**
         * getter Methods
         */
-        NotificationQueue& getNotificationQueue(){ return m_notificationQueue; }
+        Poco::NotificationQueue& getNotificationQueue(){ return m_notificationQueue; }
         std::list<int>& getCmdList(){ return m_cmdList; }
 
 
 
         //Constructor
-	    Scheduler(NotificationQueue & queue, GlobalConfig & config);
+	    Scheduler(Poco::NotificationQueue & queue, GlobalConfig & config);
         //Destructor
 	    ~Scheduler();
     };
diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_servant.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_servant.h
index 81f0a4eb..71ea9d4f 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_servant.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_servant.h
@@ -24,152 +24,186 @@
 #include "Poco/NotificationQueue.h"
 
 
-using Poco::NotificationQueue;
-
 namespace mControl
 {
     class MControlServant : public POA_Controller::kioskControl
     {
     private:
-        NotificationQueue &         m_notificationQueue; 
-        bool                        m_kioskBusy;
+        Poco::NotificationQueue &       m_notificationQueue; 
+        bool                            m_kioskBusy;
 
 
         /**
         * platform and OS shutdown & reboot if required
         */
+        //TODO: check the statements
         long shutdownOS(bool fReboot = true, bool fForced = false);      
 
 
     public:  
-    /***************************************************************************
-    *   controller::kioskControl interface Methods
-    *
-    *   definded in controller.idl
-    **/
+        /**
+        * get the Name from the reboot file as string
+        */
+        std::string getRebootFileName();
+
+        //---------------------------------------------------------------------------
+        //   controller::kioskControl interface Methods
+        //
+        //  definded in controller.idl
+        
 
         /**
-        * returns the process list
+        *   Get a list of all current existings processes.
+        *   It's done by conversion from mSysProcess::Process to a Controller::processList 
+        *
+        *   @return: the list
         */
         Controller::processList *queryProcessList();
     
 
         /**
-        * kill a specific process
+        *   kill a specific process
+        *
+        *   @param: the process-ID of the Process
+        *
+        *   @return: successfull execution
         */
         CORBA::Long killProcess(CORBA::Long pid);
 
 
         /**
-        * stops platform processes
+        *   stops platform processes
+        *
+        *   @return: successfull execution
         */
         CORBA::Long shutdownPlatform();
 
         /**
-        * restarts platform processes
+        *   restarts platform processes
+        *
+        *   @return: successfull execution
         */
         CORBA::Long startPlatform();
 
 
         /**
-        * reboots the kiosk
+        *   reboots the kiosk
+        *
+        *   @return: successfull execution
         */
         CORBA::Long rebootKiosk();
 
 
         /**
-        * shuts down the kiosk, don't reboot!!
+        *   shuts down the kiosk, don't reboot!!
+        *
+        *   @return: successfull execution
         */
         CORBA::Long shutdownKiosk();
 
 
         /**
-        * forced platform shutdown (ignore busy flag)
+        *   forced platform shutdown (ignore busy flag)
+        *
+        *   @return: successfull execution
         */
         CORBA::Long forcedShutdownPlatform();
     
     
         /**
-        * forced platform shutdown (ignore busy flag) and restart.
+        *   forced platform shutdown (ignore busy flag) and restart.
+        *
+        *   @return: successfull execution
         */
         CORBA::Long forcedRestartPlatform();
 
 
         /**
-        * forced kiosk reboot (ignore busy flag)
+        *   forced kiosk reboot (ignore busy flag)
+        *
+        *   @return: successfull execution
         */
         CORBA::Long forcedRebootKiosk();
 
 
         /**
-        * forced kiosk shutdown (ignore busy flag)
+        *   forced kiosk shutdown (ignore busy flag)
+        *
+        *   @return: successfull execution
         */
         CORBA::Long forcedShutdownKiosk();
 
 
         /**
-        * reloads the hosts file
+        *   reloads the hosts file
+        *
+        *   @return: successfull execution
         */
         CORBA::Long reloadHostsFile();
 
 
 
         /**
-        * Remember if someone is using the kiosk
+        *   Set's the value of m_kioskBusy
+        *   
+        *   @param busy: the value to set
         */
-	    void kioskBusy(::CORBA::Boolean);
+	    void kioskBusy(::CORBA::Boolean busy);
     
 
         /**
-        * return the last reboot time
+        *   Load the time of the last reboot from a file.
+        *
+        *   @return: a pointer to this Date (stored in string-array)
         */
         char *lastRebootTime();    
 
 
         /**
-        * return the current system time
+        *   Load the current time of the Windows System
+        *
+        *   @return: a pointer to this Time (stored in string-array)
         */
         char *systemTime();
     
 
         /**
-        * TODO: implement. Here scanArguments is used
+        *   executes the given command as windows process
+        *
+        *   @param string_args: -the command
+        *
+        *   @return: successfull execution
         */
         CORBA::Long executeCommand( const Controller::kioskControl::string_sequence& string_args );
 
 
         /**
-        * Set new system date & time
+        *   Set new system date & time
+        *
+        *   @param: the time to set
+        *
+        *   @return: successfull
         */
         CORBA::Long setSystemTime(const char *dateTime);
     
-    /**
-    * END interface Methods
-    *****/
+        
+        // END interface Methods
+        //----------------------------------------------------------------------------
     
 
-        /**
-        * get the Name from the reboot file as string
-        */
-        std::string getRebootFileName();
-
-
         /**
         * Attribut getter Methods
         */
         bool isKioskBusy() { return m_kioskBusy; }
-        NotificationQueue&  getQueue(){ return m_notificationQueue; }
+        Poco::NotificationQueue&  getQueue(){ return m_notificationQueue; }
+
 
         /**
-        * Attribut setter Methods
+        *   Constructor
+        *
+        *   @param queue: -reference to the NotificationQueue, where to put msg's
         */
-        void setNotificationQueue(NotificationQueue& queue){ }//m_notificationQueue = queue; }
-
-
-        //Constructor
-	    MControlServant(NotificationQueue& queue);
-
-        void testQueue();
+	    MControlServant(Poco::NotificationQueue& queue);
     };
 }
 #endif
diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_tools.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_tools.h
index 85c31062..2b24a934 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_tools.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_tools.h
@@ -36,21 +36,12 @@
 #include <string>
 
 
-//TODO: check if needed ----------------
-#include <direct.h>
-//---------------------------------------
-
-using namespace std;
-using namespace mSysProcess;
-
 namespace mControl
 {
     class Tools
     {
     private:
         GlobalConfig&           m_globalConfig;
-        //ProcessList         m_processList;
-        //list<long>          m_prList;
 
     public:
         Tools(GlobalConfig& config);
@@ -59,7 +50,7 @@ namespace mControl
         /**
         *   check if file exists
         */
-        static bool fileExists (const string& name);          
+        static bool fileExists (const std::string& name);          
 
 
         /**
diff --git a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_worker.h b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_worker.h
index 52381de7..42f7e04f 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_worker.h
+++ b/SelfServiceCommon/Massai/cpp/mControl/inc/mControl_worker.h
@@ -39,6 +39,7 @@ namespace mControl
         Worker(Poco::NotificationQueue & queue, GlobalConfig& config, Dialog& dialog);
 
         Poco::NotificationQueue& getNotificationQueue(){ return m_notificationQueue; }
+        Dialog& getDialog(){ return m_dialog; }
 
         /**
         * Needs to be implemented from the Runnable interface.
@@ -59,7 +60,6 @@ namespace mControl
         void execSysCmdsStartup();
 
 
-        //TODO: implement with new process configuration
         /**
         *   replacement for the standard system() command,
         *   this one doesn't pop up any windows
@@ -67,21 +67,18 @@ namespace mControl
         long mSystem( char const * cmd, char const * purpose );
 
 
-        //TODO: implement with new process configuration
         /**
         *   Starts update service & waits for it's termination
         */
         long startUpdate();
 
 
-        //TODO: implement with new process configuration
         /**
         *   create a public semaphor and start all progs via MSTART.EXE
         */
         long startAll();
 
 
-        //TODO: implement with new process configuration
         /**
         * Waits until starter has terminated
         */
diff --git a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_config.cpp b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_config.cpp
index 03943e5d..f47cdd88 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_config.cpp
+++ b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_config.cpp
@@ -287,7 +287,6 @@ namespace mControl
             Materna::MSSD::eventSemaphore loggingSemaphore(true, "MassaiLoggingService");
             try
             {
-                //TODO: check if wait is needed
                 long rc= loggingSemaphore.wait(600);
                 long error= GetLastError();
                 TRACE(HERE,"waitInitialForLoggingService %d %d", rc, error);
@@ -402,8 +401,6 @@ namespace mControl
                 hdc = GetDC(hWnd);
 
                 //setting the Bitmap
-
-                Tools::traceCurrentDir();
                 if(m_globalConfig.serverMode())
                     this->setHBitMap( Dialog::CreateBitmapObjectFromDibFile (hdc,".\\mcontrol_small.bmp") );
                 else
@@ -445,9 +442,6 @@ namespace mControl
                 if(!m_globalConfig.serverMode())
                 {
                     cyLoad = 20;
-
-                    //TRACE(HERE,"xSize = %d, ySize = %d, width = %d, height = %d",xSize,ySize,this->getWidth(),this->getHeight());
-
                     SetWindowPos(hWnd,HWND_TOPMOST,this->getX(),this->getY(),this->getWidth(),this->getHeight(),0);
                 }
                 else
@@ -564,8 +558,6 @@ namespace mControl
                 
                 break;
 
-            //original as in the old mControl
-            //TODO: check the comments 
             case WM_PAINT:                                          
                 TRACE(HERE,"WM_PAINT");
 
@@ -601,7 +593,6 @@ namespace mControl
                 
                 break;
 
-            //original as in the old mControl
             case WM_DESTROY:
                 TRACE(HERE,"WM_DESTROY");
 
@@ -610,7 +601,6 @@ namespace mControl
                 DestroyWindow(this->m_hWndInfo_2);
                 break;
 
-            //original as in the old mControl
             case WM_CLOSE: 
             {
                 TRACE(HERE,"WM_CLOSE");
diff --git a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_dialog.cpp b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_dialog.cpp
index 134bb538..8874d7a3 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_dialog.cpp
+++ b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_dialog.cpp
@@ -50,12 +50,6 @@ namespace mControl
     Dialog::~Dialog()
     {
     }
-  
-    //TODO: handle the incomming Messages 
-    void Dialog::run()
-    {
-        TRACE(HERE,"Dialog-Thread runTask() started...");
-    }
 
 
     HBITMAP Dialog::CreateBitmapObjectFromDibFile (HDC hdc, PTSTR szFileName)
diff --git a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_logging.cpp b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_logging.cpp
index 351db1eb..36608f01 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_logging.cpp
+++ b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_logging.cpp
@@ -18,7 +18,8 @@ Logging::Logging(MASSAI::trace::TraceInterface& trc) :
     m_trc(trc)
 {}
 
+
 void Logging::lineOut(const char* line) const
 {
-    m_trc.writeTraceText(MajorError_HERE, line);
+    m_trc.writeTraceText(MajorError_HERE, line);    
 }
diff --git a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_main.cpp b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_main.cpp
index fe1103df..ce7fff11 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_main.cpp
+++ b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_main.cpp
@@ -378,8 +378,6 @@ int mDaemon_main( int argc, char const * const * argv )
 
         if( mDaemon_isService() )
         {
-            //TODO: Check if needed
-            //PostMessage(hwnd,WM_PAINT,0,0);
             RedrawWindow(mainDialog.getWindowConfig().getHwnd(),NULL,NULL,RDW_INTERNALPAINT);
         }
 
@@ -443,13 +441,6 @@ int mDaemon_main( int argc, char const * const * argv )
             DispatchMessage(&msg);
         }
 
-        //TODO: check if needed
-        //Shutdhown Rebooter and Scheduler
-        /*
-        if(!globalConfig->serverMode())
-            rebooter.cancel();
-        */
-
         globalConfig->getThreadPool().stopAll();
     }
     catch( std::exception & X )
@@ -528,5 +519,5 @@ char const * mDaemon_name()
 **/
 void mDaemon_stop()
 {
-    //TODO: implement
+    SendMessage(globalConfig->getWorker()->getDialog().getWindowConfig().getHwnd(),WM_CLOSE,0,0);
 }
\ No newline at end of file
diff --git a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_reboot.cpp b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_reboot.cpp
index c0264403..30739dfa 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_reboot.cpp
+++ b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_reboot.cpp
@@ -20,7 +20,7 @@
 
 namespace mControl
 {
-    KioskReboot::KioskReboot(long sDelay, NotificationQueue& queue, GlobalConfig& config, MControlServant* servant) : 
+    KioskReboot::KioskReboot(long sDelay, Poco::NotificationQueue& queue, GlobalConfig& config, MControlServant* servant) : 
         m_startDelay(),
         m_notificationQueue(queue),
         m_globalConfig(config)
@@ -35,8 +35,7 @@ namespace mControl
 
 
     long KioskReboot::saveRebootDate()
-    {
-        
+    {  
         FILE *fp;
         mDate date = mDate::today();
         mTime time = mTime();
@@ -62,7 +61,6 @@ namespace mControl
 
     long KioskReboot::getRebootDate(mDate *pDate)
     {
-        
         FILE *fp;
         mDate date;
 
diff --git a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_servant.cpp b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_servant.cpp
index a7ab8db0..401e1063 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_servant.cpp
+++ b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_servant.cpp
@@ -34,12 +34,57 @@ using MASSAI::trace::TraceLocal;
 
 namespace mControl
 {
-    MControlServant::MControlServant(NotificationQueue& queue) : 
+    MControlServant::MControlServant(Poco::NotificationQueue& queue) : 
         m_kioskBusy(false),
         m_notificationQueue(queue)
     {
     }
 
+    //TODO: implement Notficiation for WM_MASSAISTOP_REMOTE
+    long MControlServant::shutdownOS(bool fReboot, bool fForced)
+    {
+        TRACE(HERE,"shutdownOS(...) ...");
+
+        try
+        {
+            TRACE
+                (
+                HERE,
+                "shutdownOS(fReboot = %s, fForced = %s): Kiosk busy: %s",
+                Tools::noYes(fReboot),
+                Tools::noYes(fForced),
+                Tools::noYes(m_kioskBusy)
+                );
+            long rc = 0;
+            if( !fForced )
+            {
+                // act gracefully ...
+                if( m_kioskBusy )
+                {
+                rc = -1;
+                TRACE( HERE, "kiosk is busy, rc = %d", rc );
+                }
+                else
+                {
+                // stop platform first
+                rc = 0;//SendMessage(serverWindow,WM_MASSAISTOP_REMOTE,0,0);
+                }
+            }
+            if( !rc )
+            {
+                rc = Tools::shutdownOS_Now( fReboot );
+            }
+            TRACE( HERE,"shutdownOS rc = %d", rc );
+            return rc;
+        }
+        catch( ... )
+        {
+            TRACE( HERE,"shutdownOS - exception rc = -1" );
+            return -1;
+        }
+
+    }
+
 
     std::string MControlServant::getRebootFileName()
     {
@@ -75,50 +120,7 @@ namespace mControl
 
 
     
-    //TODO: implement Notficiation for WM_MASSAISTOP_REMOTE
-    long MControlServant::shutdownOS(bool fReboot, bool fForced)
-    {
-        TRACE(HERE,"shutdownOS(...) ...");
-
-       try
-       {
-          TRACE
-             (
-                HERE,
-                "shutdownOS(fReboot = %s, fForced = %s): Kiosk busy: %s",
-                Tools::noYes(fReboot),
-                Tools::noYes(fForced),
-                Tools::noYes(m_kioskBusy)
-             );
-          long rc = 0;
-          if( !fForced )
-          {
-             // act gracefully ...
-             if( m_kioskBusy )
-             {
-                rc = -1;
-                TRACE( HERE, "kiosk is busy, rc = %d", rc );
-             }
-             else
-             {
-                // stop platform first
-                rc = 0;//SendMessage(serverWindow,WM_MASSAISTOP_REMOTE,0,0);
-             }
-          }
-          if( !rc )
-          {
-             rc = Tools::shutdownOS_Now( fReboot );
-          }
-          TRACE( HERE,"shutdownOS rc = %d", rc );
-          return rc;
-       }
-       catch( ... )
-       {
-          TRACE( HERE,"shutdownOS - exception rc = -1" );
-          return -1;
-       }
-
-    }
+    
 
 
     /***************************************************************************
@@ -224,34 +226,28 @@ namespace mControl
     CORBA::Long MControlServant::killProcess(CORBA::Long pid)
     {
         TRACE(HERE,"killProcess(...) ...");
-
         long rc = 0;
 
         // Get a handle to the process.
-
         HANDLE hProcess = OpenProcess(PROCESS_TERMINATE,false,pid);
 
         if(!TerminateProcess(hProcess,0))
         {
-          rc = GetLastError();
-          TRACE(HERE,"failed to kill process %d, rc = %d",pid, rc);
+            rc = GetLastError();
+            TRACE(HERE,"failed to kill process %d, rc = %d",pid, rc);
         }
         else
-          TRACE(HERE,"process %d killed",pid);
+            TRACE(HERE,"process %d killed",pid);
 
         CloseHandle(hProcess);
-
         return(rc);
     }
 
 
     CORBA::Long MControlServant::shutdownPlatform()
     {
-        TRACE(HERE,"killProcess() ...");
-
-        long rc;
-
         TRACE(HERE,"shutdownPlatform(): Kiosk busy: %s",Tools::noYes(m_kioskBusy));
+        long rc;
 
         if(m_kioskBusy)
           return(-1);
@@ -260,7 +256,6 @@ namespace mControl
         rc = 0;//SendMessage(serverWindow,WM_MASSAISTOP_REMOTE,0,0);
 
         TRACE(HERE,"requested platform shutdown, rc = %d",rc);
-
         return(rc);
     }
 
@@ -272,7 +267,6 @@ namespace mControl
         long rc = 0;//SendMessage(serverWindow,WM_MASSAISTART_REMOTE,0,0);
 
         TRACE(HERE,"requested platform start, rc = %d",rc);
-
         return(rc);
     }
 
@@ -281,19 +275,17 @@ namespace mControl
     CORBA::Long MControlServant::rebootKiosk()
     {
         TRACE(HERE,"rebootKiosk() ...");
-
         long rc;
 
         if(!m_kioskBusy)
         {
-          rc = 0;//SendMessage(serverWindow,WM_MASSAIREBOOT_REMOTE,0,0);
-          OS_Sleep(5000);
+            rc = 0;//SendMessage(serverWindow,WM_MASSAIREBOOT_REMOTE,0,0);
+            OS_Sleep(5000);
         }
 
         rc = shutdownOS(true);
 
         TRACE(HERE,"kiosk reboot, rc = %d",rc);
-
         return(rc);
     }
 
@@ -302,19 +294,17 @@ namespace mControl
     CORBA::Long MControlServant::shutdownKiosk()
     {
         TRACE(HERE,"shutdownKiosk() ...");
-
         long rc;
 
         if(!m_kioskBusy)
         {
-          rc = 0;//SendMessage(serverWindow,WM_MASSAISHUTDOWN_REMOTE,0,0);
-          OS_Sleep(5000);
+            rc = 0;//SendMessage(serverWindow,WM_MASSAISHUTDOWN_REMOTE,0,0);
+            OS_Sleep(5000);
         }
 
         rc = shutdownOS(false);
 
         TRACE(HERE,"kiosk shutdown, rc = %d",rc);
-
         return(rc);
     }
 
@@ -323,7 +313,6 @@ namespace mControl
     CORBA::Long MControlServant::forcedShutdownPlatform()
     {
         TRACE(HERE,"forcedShutdownPlatform() ...");
-
         long rc;
 
         m_kioskBusy = false;
@@ -331,7 +320,6 @@ namespace mControl
         rc = 0;//SendMessage(serverWindow,WM_MASSAISTOP_REMOTE,0,0);
 
         TRACE(HERE,"requested forced platform shutdown, rc = %d",rc);
-
         return(rc);
     }
 
@@ -350,7 +338,6 @@ namespace mControl
         rc = 0;//SendMessage(serverWindow,WM_MASSAISTART_REMOTE,0,0);
 
         TRACE(HERE,"requested forced platform restart, start rc = %d",rc);
-
         return rc;
     }
 
@@ -384,7 +371,6 @@ namespace mControl
         rc = shutdownOS(false,true);
 
         TRACE(HERE,"forced kiosk shutdown, rc = %d",rc);
-
         return(rc);
     }
 
@@ -593,9 +579,4 @@ namespace mControl
     /**
     * END interface Methods
     *****/
-
-    void MControlServant::testQueue()
-    {
-        //m_notificationQueue.enqueueNotification( new MControlNotification( "servant test", 100) );
-    }
 }
\ No newline at end of file
diff --git a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_tools.cpp b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_tools.cpp
index 7157c5d1..ecb8a555 100644
--- a/SelfServiceCommon/Massai/cpp/mControl/src/mControl_tools.cpp
+++ b/SelfServiceCommon/Massai/cpp/mControl/src/mControl_tools.cpp
@@ -24,6 +24,7 @@
 #include <sys/timeb.h>
 #include "Commctrl.h"
 
+#include <direct.h>
 
 using namespace std;
 
-- 
2.41.0.windows.1

