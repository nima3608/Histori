From 172ce937f83239dac65b276e9dcdad6969ebdee5 Mon Sep 17 00:00:00 2001
From: tgeisler <tgeisler@90b65887-3827-0410-9a23-83215b262276>
Date: Thu, 29 Dec 2011 17:11:06 +0000
Subject: [PATCH 0229/1076] TEXT_LIB : New helper functions for environment
 variable placeholder

git-svn-id: svn://localhost/SelfServiceCommon/trunk@280 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/Text/src/cEnvSubst.cpp         | 28 +++++++++----------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/SelfServiceCommon/Massai/cpp/Text/src/cEnvSubst.cpp b/SelfServiceCommon/Massai/cpp/Text/src/cEnvSubst.cpp
index dd47b017..6d7bc40c 100644
--- a/SelfServiceCommon/Massai/cpp/Text/src/cEnvSubst.cpp
+++ b/SelfServiceCommon/Massai/cpp/Text/src/cEnvSubst.cpp
@@ -54,19 +54,19 @@ void CEnvSubst::SetBaseEnvVars()
       //printf("\nSubstEnvVars %s %s",str.c_str(),(std::string("\\$")+ (*it).first).c_str());
       dummy = boost::regex_replace((*it).second, ReplaceStr1, "\\\\\\\\", boost::match_default | boost::format_perl);
       dummy = boost::regex_replace(dummy, ReplaceStr2, "\\\\$", boost::match_default | boost::format_perl);
-      TRACE(HERE,"SubstEnvVars %s %s",(*it).second.c_str(),dummy.c_str());
+      TRACE(HERE_5,"SubstEnvVars %s %s",(*it).second.c_str(),dummy.c_str());
       (*it).second = dummy;
     }
   }
   catch(...)
   {
-    TRACE(HERE,"Exception in SetBaseEnvVars");
+    TRACE(HERE_1,"Exception in SetBaseEnvVars");
   }
 
-  TRACE(HERE,"Substitution constants:");
+  TRACE(HERE_8,"Substitution constants:");
   for(std::map<std::string, std::string>::iterator it=env.begin(); it !=env.end(); ++it)
   {
-    TRACE(HERE,"\t%s->%s",(std::string("$")+(*it).first).c_str(),(*it).second.c_str());
+    TRACE(HERE_8,"\t%s->%s",(std::string("$")+(*it).first).c_str(),(*it).second.c_str());
   }
 }
 
@@ -103,13 +103,13 @@ void CEnvSubst::SetEnvVars(const std::map<std::string,std::string> setEnv)
   }
   catch(...)
   {
-    TRACE(HERE,"Exception in SetEnvVars");
+    TRACE(HERE_1,"Exception in SetEnvVars");
   }
 
-  TRACE(HERE,"New substitution constants:");
+  TRACE(HERE_5,"New substitution constants:");
   for(it=env.begin(); it !=env.end(); ++it)
   {
-    TRACE(HERE,"\t%s->%s",(std::string("$")+(*it).first).c_str(),(*it).second.c_str());
+    TRACE(HERE_5,"\t%s->%s",(std::string("$")+(*it).first).c_str(),(*it).second.c_str());
   }
 }
 
@@ -125,12 +125,12 @@ std::string CEnvSubst::SubstEnvVars(const char* str)
 
 std::string CEnvSubst::SubstEnvVars(const std::string& str)
 {
-/*  TRACE(HERE,"Substitution constants:");
+  TRACE(HERE_8,"Substitution constants:");
   for(std::map<std::string, std::string>::iterator it=env.begin(); it !=env.end(); ++it)
   {
-    TRACE(HERE,"\t%s->%s",(std::string("$")+(*it).first).c_str(),(*it).second.c_str());
+    TRACE(HERE_8,"\t%s->%s",(std::string("$")+(*it).first).c_str(),(*it).second.c_str());
   }
-*/
+
   std::string dummy(str);
   try
   {
@@ -139,12 +139,12 @@ std::string CEnvSubst::SubstEnvVars(const std::string& str)
       boost::regex ReplaceStr( (std::string("$")+ (*it).first).c_str(),
              boost::regex::icase | boost::regex::literal);
       dummy = boost::regex_replace(dummy, ReplaceStr, ((*it).second).c_str(), boost::match_default | boost::format_perl);
-      //TRACE(HERE_2,"SearchString:%s, ReplaceWith:%s, Result:%s",ReplaceStr.str().c_str(),((*it).second).c_str(),dummy.c_str());
+      TRACE(HERE_7,"SearchString:%s, ReplaceWith:%s, Result:%s",ReplaceStr.str().c_str(),((*it).second).c_str(),dummy.c_str());
     }
   }
   catch(...)
   {
-    TRACE(HERE,"Exception in SubstEnvVars");
+    TRACE(HERE_1,"Exception in SubstEnvVars");
   }
   return dummy;
 }
@@ -152,11 +152,11 @@ std::string CEnvSubst::SubstEnvVars(const std::string& str)
 std::list<std::string> CEnvSubst::substEnvList(const std::list<std::string>& el)
 {
   std::list<std::string> buff;
-  TRACE(HERE,"substEnvList:");
+  TRACE(HERE_5,"substEnvList:");
   for(std::list<std::string>::const_iterator It=el.begin(); It!=el.end(); ++It)
   {
     buff.push_back(SubstEnvVars((*It)));
-    TRACE(HERE," -> %s",(*buff.rbegin()).c_str());
+    TRACE(HERE_5," -> %s",(*buff.rbegin()).c_str());
   }
   return buff;
 }
\ No newline at end of file
-- 
2.41.0.windows.1

