From cd7b608486635180fc572da95dc2933e0e0919d7 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 24 Jul 2013 09:35:53 +0000
Subject: [PATCH 0444/1077] Mantis 24145: "Remove CORBA.SERVANTS configuration"
 Extend CfgClnt by new class nConfig::basicDirectory.

git-svn-id: svn://localhost/SelfServiceCommon/trunk@541 90b65887-3827-0410-9a23-83215b262276
---
 .../inc/cfgclnt/nConfigBasicDirectory.hpp     | 129 +++++++
 .../Massai/cpp/CfgClnt/dll/makefile.mak       |   1 +
 .../cpp/CfgClnt/src/nConfigBasicDirectory.cpp | 316 ++++++++++++++++++
 .../cpp/CfgClnt/src/nConfigBasicNumber.cpp    |   6 +-
 .../cpp/CfgClnt/src/nConfigBasicSelection.cpp |   6 +-
 .../cpp/CfgClnt/src/nConfigBasicText.cpp      |   6 +-
 .../cpp/CfgClnt/src/nConfigBasicTextList.cpp  |   6 +-
 .../Massai/cpp/CfgClnt/src/nConfigNumber.cpp  |   7 +-
 .../cpp/CfgClnt/src/nConfigSelection.cpp      |   7 +-
 .../Massai/cpp/CfgClnt/src/nConfigText.cpp    |   7 +-
 .../cpp/CfgClnt/src/nConfigTextList.cpp       |   7 +-
 .../Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp |   7 +-
 .../Massai/cpp/CfgClnt/static/makefile.mak    |   1 +
 13 files changed, 481 insertions(+), 25 deletions(-)
 create mode 100644 SelfServiceCommon/Interfaces/inc/cfgclnt/nConfigBasicDirectory.hpp
 create mode 100644 SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicDirectory.cpp

diff --git a/SelfServiceCommon/Interfaces/inc/cfgclnt/nConfigBasicDirectory.hpp b/SelfServiceCommon/Interfaces/inc/cfgclnt/nConfigBasicDirectory.hpp
new file mode 100644
index 00000000..c921a8b2
--- /dev/null
+++ b/SelfServiceCommon/Interfaces/inc/cfgclnt/nConfigBasicDirectory.hpp
@@ -0,0 +1,129 @@
+/**
+ **************************************************************************
+ *
+ * @file nConfigBasicDirectory.hpp
+ *
+ * Contains definitions for class nConfig::basicDirectory.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2013 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+#ifndef NCONFIGBASICDIRECTORY_HPP
+#define NCONFIGBASICDIRECTORY_HPP
+#ifdef SHOW_INCLUDE_FILES
+#pragma message("including: " __FILE__)
+#endif
+#pragma warning( disable: 4290 )
+#include "cfgclnt/nConfig.hpp"
+
+#include <iostream>
+#include <list>
+#include <string>
+
+
+
+namespace nConfig
+{
+
+
+   /**
+    *
+    * Directory configuration class which allows to
+    * -get configuration values
+    *
+   **/
+   class basicDirectory
+   {
+
+      /**
+       *
+       * Implementation class prototype.
+       *
+      **/
+      class impl;
+
+      /**
+       *
+       * Implementation reference - for internal use.
+       *
+      **/
+      impl * M_Impl;
+
+   public:
+
+      /**
+       *
+       * Constructor.
+       *
+       * @param System: Refers the configuration system to use.
+       *
+       */
+      explicit basicDirectory
+         (
+            cfgSystem *    System
+         );
+
+      /**
+       *
+       * Constructor.
+       *
+       * @param Auth:   The name of the application.
+       *
+       * @param Trcout: A trace stream.
+       *
+       */
+      explicit basicDirectory
+         (
+            char const *   Auth,
+            std::ostream * Trcout = 0
+         );
+
+      /**
+       *
+       * Destructor
+       *
+       */
+      ~basicDirectory();
+
+      /**
+       *
+       * Retrieve the configuration value.
+       *
+       * @param DirItem:        The name of the configuration directory.
+       *
+       * @return                The current list
+       *                        of configuration directory items.
+       *
+       */
+      std::list<std::string> getItems( char const * DirItem )
+         const throw( exception );
+
+   private:
+
+      //! Default constructor - intentionally not implemented.
+      basicDirectory();
+
+      //! Copy constructor - intentionally not implemented.
+      basicDirectory( basicDirectory const & );
+
+      //! Assignment - intentionally not implemented.
+      basicDirectory & operator=( basicDirectory const & );
+
+   }; // class basicDirectory
+
+
+} // namespace nConfig
+
+
+
+#endif
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/dll/makefile.mak b/SelfServiceCommon/Massai/cpp/CfgClnt/dll/makefile.mak
index 658aed60..0d2076de 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/dll/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/dll/makefile.mak
@@ -36,6 +36,7 @@ MY_LIB1_OBJS = \
     $(_OBJ)\cfgmgr_skel.obj \
     $(_OBJ)\CfgNode.obj \
     $(_OBJ)\nConfig.obj \
+    $(_OBJ)\nConfigBasicDirectory.obj \
     $(_OBJ)\nConfigBasicNumber.obj \
     $(_OBJ)\nConfigBasicSelection.obj \
     $(_OBJ)\nConfigBasicText.obj \
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicDirectory.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicDirectory.cpp
new file mode 100644
index 00000000..d35b6332
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicDirectory.cpp
@@ -0,0 +1,316 @@
+/**
+ **************************************************************************
+ *
+ * @file nConfigBasicDirectory.cpp
+ *
+ * Contains the implementation for the methods defined in
+ * "cfgclnt/nConfigBasicDirectory.hpp".
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2013 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+
+#if defined(_MSC_VER)
+// That ... compiler shall not warn about its deficiencies!
+#pragma warning (disable:4786)
+#endif /* _MSC_VER */
+
+#include "cfgclnt/nConfigBasicDirectory.hpp"
+
+#include "massaiCorba/corbaclnt.h"
+#include "CfgMgr.h"
+#include "cfgclnt/CfgMgrIPC.h"
+#include "systools/mAutoMutex.hpp"
+#include "tools/multiline_macro.h"
+
+#include <iostream>
+
+#define CBTLGT  "nConfig::basicDirectory::get"
+
+#define THROW_( I, S ) \
+      MULTILINE_MACRO_BEGIN() \
+      if( M_pOS ) \
+         *M_pOS << S << " Item=" << I << std::endl; \
+      throw nConfig::exception( I, S ); \
+      MULTILINE_MACRO_END()
+
+#define THROW_A( I, S ) \
+      MULTILINE_MACRO_BEGIN() \
+      if( M_pOS ) \
+         *M_pOS << S << " Item=" << I << std::endl; \
+      throw nConfig::exception_AccessNotAuthorized( I, S ); \
+      MULTILINE_MACRO_END()
+
+#define THROW_I( I, S ) \
+      MULTILINE_MACRO_BEGIN() \
+      if( M_pOS ) \
+         *M_pOS << S << " Item=" << I << std::endl; \
+      throw nConfig::exception_ItemNotFound( I, S ); \
+      MULTILINE_MACRO_END()
+
+#define THROW_S( I, S ) \
+      MULTILINE_MACRO_BEGIN() \
+      if( M_pOS ) \
+         *M_pOS << S << " Item=" << I << std::endl; \
+      throw nConfig::exception_ServantNotFound( I, S ); \
+      MULTILINE_MACRO_END()
+
+
+   /**
+    *
+    * Directory type (Configuration value).
+    *
+   **/
+   typedef std::list<std::string>       cfgDirItems;
+
+
+namespace
+{
+
+
+   /**
+    *
+    * Copy to std library string list
+    *
+   **/
+   static void copy
+   (
+     cfgDirItems &                      Dst,
+     Config::Directory::dir const &     Src
+   )
+   {
+      int const Length = Src.length();
+      Dst.clear();
+      for( int Idx = 0; Idx < Length; ++Idx )
+      {
+         Config::Directory::item Item = Src[Idx];
+         Dst.push_back( (char const *)Item.Name );
+      }
+   }
+
+
+}
+
+
+
+namespace nConfig
+{
+
+
+
+   class basicDirectory::impl
+   {
+
+      //! Trace stream.
+      std::ostream *                    M_pOS;
+
+      //! Refer the last get() result.
+      cfgDirItems                         M_Got;
+
+      //! Protect M_Got.
+      Materna::MSSD::mutexSemaphore     M_GotMutex;
+
+      std::string                       M_Auth;
+
+      //! Configuration proxy.
+      corbaClient<Config::Directory>     m_directory_client;
+
+      /**
+       *
+       * Return a valid proxy or throw.
+       *
+       * @return The proxy.
+       *
+      **/
+      Config::Directory * validProxy()
+      {
+         Config::Directory * const Ret = m_directory_client.proxy();
+         if( !Ret )
+            THROW_( "?", " - no Proxy" );
+         return Ret;
+      }
+
+   public:
+
+      /**
+       *
+       * Implementation class constructor.
+       *
+      **/
+      explicit impl( cfgSystem * System ) :
+         M_pOS( System->traceout() ),
+         M_Got( 0 ),
+         M_GotMutex(),
+         M_Auth( System->auth() ),
+         m_directory_client
+            (
+               System->host(),
+               CFGMGR_PORT,
+               CFGMGR_SRVNAME_DIRECTORY
+            )
+      {
+      }
+
+      /**
+       *
+       * Implementation class constructor.
+       *
+      **/
+      impl
+         (
+            char const *                Auth,
+            std::ostream * Traceout
+         ) :
+         M_pOS( Traceout ),
+         M_Got(),
+         M_GotMutex(),
+         M_Auth( Auth ),
+         m_directory_client
+            (
+               CFGMGR_HOST,
+               CFGMGR_PORT,
+               CFGMGR_SRVNAME_DIRECTORY
+            )
+      {
+      }
+
+      /**
+       *
+       * Implementation class method.
+       *
+      **/
+      cfgDirItems getItems
+         (
+            char const *                DirItem
+         )
+         throw( exception )
+      {
+         if( M_pOS ) *M_pOS << CBTLGT " ..." << std::endl;
+         Materna::MSSD::autoMutex Block( M_GotMutex );
+         try
+         {
+            Config::access Access;
+            Access.Item = CORBA::string_dup( DirItem );
+            Access.Authorization = CORBA::string_dup( M_Auth.c_str() );
+            Config::Directory::/*strings_var */dir const Strings
+               = *validProxy()->get( Access );
+            copy( (cfgDirItems&)M_Got, Strings );
+            if( M_pOS ) *M_pOS << CBTLGT "." << std::endl;
+         }
+         catch( Config::Node::noConfiguration & )
+         {
+            THROW_S( DirItem, CBTLGT " - noConfiguration exception" );
+         }
+         catch( Config::Node::notAuthorized & )
+         {
+            THROW_A( DirItem, CBTLGT " - notAuthorized exception" );
+         }
+         catch( Config::Node::notFound & )
+         {
+            THROW_I( DirItem, CBTLGT " - notFound exception" );
+         }
+         catch( Config::Node::wrongParam & )
+         {
+            THROW_( DirItem, CBTLGT " - wrongParam exception" );
+         }
+         catch( CORBA::Exception & )
+         {
+            THROW_S( DirItem, CBTLGT " - CORBA::Exception" );
+         }
+         catch( ... )
+         {
+            THROW_( DirItem, CBTLGT " - Unknown exception" );
+         }
+         return M_Got;
+      }
+
+   private:
+
+      //! Default constructor - intentionally not implemented.
+      impl();
+
+   };
+
+
+
+   /*
+    *
+    * Public method - see nConfigBasicText.hpp
+    *
+    */
+   basicDirectory::basicDirectory
+      (
+         cfgSystem * System
+      ) :
+      M_Impl( new impl( System ) )
+   {
+   }
+
+
+
+   /*
+    *
+    * Public method - see nConfigBasicDirectory.hpp
+    *
+    */
+   basicDirectory::basicDirectory
+      (
+         char const *                   Auth,
+         std::ostream *                 Traceout
+      ) :
+      M_Impl( new impl( Auth, Traceout ) )
+   {
+   }
+
+
+
+   /*
+    *
+    * Public method - see nConfigBasicDirectory.hpp
+    *
+    */
+   basicDirectory::~basicDirectory()
+   {
+      try
+      {
+         delete M_Impl;
+      }
+      catch( ... )
+      {
+      }
+   }
+
+
+
+   /*
+    *
+    * Public method - see nConfigBasicDirectory.hpp
+    *
+    */
+   cfgDirItems basicDirectory::getItems
+      (
+         char const *                   DirItem
+      )
+      const throw( exception )
+   {
+      return M_Impl->getItems( DirItem );
+   }
+
+
+
+}
+
+
+
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
+
+
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicNumber.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicNumber.cpp
index abd17169..645bc983 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicNumber.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicNumber.cpp
@@ -8,7 +8,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2007-2012 MATERNA Information & Communications
+ * Copyright (c) 2007-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -126,7 +126,7 @@ namespace nConfig
             (
                System->host(),
                CFGMGR_PORT,
-               "Configuration_Number"
+               CFGMGR_SRVNAME_NUMBER
             )
       {
       }
@@ -145,7 +145,7 @@ namespace nConfig
             (
                CFGMGR_HOST,
                CFGMGR_PORT,
-               "Configuration_Number"
+               CFGMGR_SRVNAME_NUMBER
             )
       {
       }
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicSelection.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicSelection.cpp
index 936fe78a..b2073ab7 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicSelection.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicSelection.cpp
@@ -8,7 +8,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2007-2012 MATERNA Information & Communications
+ * Copyright (c) 2007-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -119,7 +119,7 @@ namespace nConfig
             (
                System->host(),
                CFGMGR_PORT,
-               "Configuration_Selection"
+               CFGMGR_SRVNAME_SELECTION
             )
       {
       }
@@ -142,7 +142,7 @@ namespace nConfig
             (
                CFGMGR_HOST,
                CFGMGR_PORT,
-               "Configuration_Selection"
+               CFGMGR_SRVNAME_SELECTION
             )
       {
       }
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicText.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicText.cpp
index dc87e612..2cc2e0c6 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicText.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicText.cpp
@@ -8,7 +8,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2005-2012 MATERNA Information & Communications
+ * Copyright (c) 2005-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -114,7 +114,7 @@ namespace nConfig
          M_Got( 0 ),
          M_GotMutex(),
          M_Auth( System->auth() ),
-         M_TextClnt( System->host(), CFGMGR_PORT, "Configuration_Text")
+         M_TextClnt( System->host(), CFGMGR_PORT, CFGMGR_SRVNAME_TEXT )
       {
       }
 
@@ -128,7 +128,7 @@ namespace nConfig
          M_Got( 0 ),
          M_GotMutex(),
          M_Auth( Auth ),
-         M_TextClnt( CFGMGR_HOST, CFGMGR_PORT, "Configuration_Text")
+         M_TextClnt( CFGMGR_HOST, CFGMGR_PORT, CFGMGR_SRVNAME_TEXT )
       {
       }
 
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicTextList.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicTextList.cpp
index 290afda7..aaaedbba 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicTextList.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicTextList.cpp
@@ -8,7 +8,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2007-2012 MATERNA Information & Communications
+ * Copyright (c) 2007-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -190,7 +190,7 @@ namespace nConfig
             (
                System->host(),
                CFGMGR_PORT,
-               "Configuration_Textlist"
+               CFGMGR_SRVNAME_TEXTLIST
             )
       {
       }
@@ -213,7 +213,7 @@ namespace nConfig
             (
                CFGMGR_HOST,
                CFGMGR_PORT,
-               "Configuration_Textlist"
+               CFGMGR_SRVNAME_TEXTLIST
             )
       {
       }
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigNumber.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigNumber.cpp
index 5d053583..c4773cff 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigNumber.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigNumber.cpp
@@ -8,13 +8,14 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2001-2008 MATERNA Information & Communications
+ * Copyright (c) 2001-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
 
 #include "cfgclnt/nConfigNumber.hpp"
 
+#include "cfgclnt/CfgMgrIPC.h"
 #include "cfgclnt/nConfigBasicNumber.hpp"
 #include "cfgNode.hpp"
 #include <string>
@@ -93,7 +94,7 @@ namespace nConfig
          ) :
          configNode
          (
-            "Configuration_Number",
+            CFGMGR_SRVNAME_NUMBER,
             Item,
             System
          ),
@@ -127,7 +128,7 @@ namespace nConfig
          ) :
          configNode
          (
-            "Configuration_Number",
+            CFGMGR_SRVNAME_NUMBER,
             Item,
             Auth,
             Traceout
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigSelection.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigSelection.cpp
index bd568d19..be7fb8a4 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigSelection.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigSelection.cpp
@@ -8,13 +8,14 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2001-2008 MATERNA Information & Communications
+ * Copyright (c) 2001-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
 
 #include "cfgclnt/nConfigSelection.hpp"
 
+#include "cfgclnt/CfgMgrIPC.h"
 #include "cfgclnt/nConfigBasicSelection.hpp"
 #include "cfgNode.hpp"
 
@@ -91,7 +92,7 @@ namespace nConfig
          ) :
          configNode
          (
-            "Configuration_Selection",
+            CFGMGR_SRVNAME_SELECTION,
             Item,
             System
          ),
@@ -125,7 +126,7 @@ namespace nConfig
       ) :
          configNode
          (
-            "Configuration_Selection",
+            CFGMGR_SRVNAME_SELECTION,
             Item,
             Auth,
             Traceout
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigText.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigText.cpp
index 9bf6a054..dc0eed04 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigText.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigText.cpp
@@ -8,13 +8,14 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2001-2008 MATERNA Information & Communications
+ * Copyright (c) 2001-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
 
 #include "cfgclnt/nConfigText.hpp"
 
+#include "cfgclnt/CfgMgrIPC.h"
 #include "cfgclnt/nConfigBasicText.hpp"
 #include "cfgNode.hpp"
 #include <string>
@@ -108,7 +109,7 @@ namespace nConfig
          ) :
          configNode
          (
-            "Configuration_Text",
+            CFGMGR_SRVNAME_TEXT,
             Item,
             System
          ),
@@ -142,7 +143,7 @@ namespace nConfig
          ) :
          configNode
          (
-            "Configuration_Text",
+            CFGMGR_SRVNAME_TEXT,
             Item,
             Auth,
             Traceout
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigTextList.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigTextList.cpp
index 77a94fc0..bd5811be 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigTextList.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigTextList.cpp
@@ -8,7 +8,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2001-2009 MATERNA Information & Communications
+ * Copyright (c) 2001-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -20,6 +20,7 @@
 
 #include "cfgclnt/nConfigTextList.hpp"
 
+#include "cfgclnt/CfgMgrIPC.h"
 #include "cfgclnt/nConfigBasicTextList.hpp"
 #include "cfgNode.hpp"
 
@@ -112,7 +113,7 @@ namespace nConfig
          ) :
          configNode
          (
-            "Configuration_Textlist",
+            CFGMGR_SRVNAME_TEXTLIST,
             Item,
             System
          ),
@@ -146,7 +147,7 @@ namespace nConfig
          ) :
          configNode
          (
-            "Configuration_Textlist",
+            CFGMGR_SRVNAME_TEXTLIST,
             Item,
             Auth,
             Traceout
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp
index 2fafade4..8341defe 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigWrapMap.cpp
@@ -7,11 +7,16 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2012 MATERNA Information & Communications
+ * Copyright (c) 2012-2013 MATERNA Information & Communications
  *
  **************************************************************************
 **/
 
+#if defined(_MSC_VER)
+// That ... compiler shall not warn about its deficiencies!
+#pragma warning (disable:4786)
+#endif /* _MSC_VER */
+
 // Exported
 #include "cfgclnt/nConfigWrapMap.hpp"
 
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/static/makefile.mak b/SelfServiceCommon/Massai/cpp/CfgClnt/static/makefile.mak
index 88de5487..d7141767 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/static/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/static/makefile.mak
@@ -27,6 +27,7 @@ MY_LIB1_OBJS = \
     $(_OBJ)\cfgmgr_skel.obj \
     $(_OBJ)\CfgNode.obj \
     $(_OBJ)\nConfig.obj \
+    $(_OBJ)\nConfigBasicDirectory.obj \
     $(_OBJ)\nConfigBasicNumber.obj \
     $(_OBJ)\nConfigBasicSelection.obj \
     $(_OBJ)\nConfigBasicText.obj \
-- 
2.41.0.windows.1

