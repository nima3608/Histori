From 1fff1ea9c0841941d6bc80b39edd496dd9240ca6 Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 6 Feb 2019 17:55:19 +0000
Subject: [PATCH 0949/1077] MANTIS 0024715 Build: VC10; fix compiler warnings

warning: as of release 5, 'enum' is a keyword, and may not be used as an identifier

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1437 90b65887-3827-0410-9a23-83215b262276
---
 .../orb/CORBA/kernel/DefaultLoader.java       | 214 +++++++++---------
 .../openorb/CORBA/kernel/Configurator.java    |  38 ++--
 .../src/main/org/openorb/util/ZipUtil.java    |  12 +-
 3 files changed, 132 insertions(+), 132 deletions(-)

diff --git a/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/apache/orb/CORBA/kernel/DefaultLoader.java b/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/apache/orb/CORBA/kernel/DefaultLoader.java
index fa97f2e2..6c825352 100644
--- a/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/apache/orb/CORBA/kernel/DefaultLoader.java
+++ b/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/apache/orb/CORBA/kernel/DefaultLoader.java
@@ -50,14 +50,14 @@ import org.xml.sax.SAXException;
 
 /**
  * The <code>DefaultLoader</code> provides support for the configuration
- * of a new ORB instance based on default and supplied properties, and 
+ * of a new ORB instance based on default and supplied properties, and
  * lifecycle processing of pluggable <code>Initializer</code>s encountered
- * during the configuration process.  The implementation also handles the 
+ * during the configuration process.  The implementation also handles the
  * decommissioning of initializers as part of loader disposal.
  *
  * <h4>Property Management</h4>
  *
- * <p>The property set profile for an ORB instance is created based on 
+ * <p>The property set profile for an ORB instance is created based on
  * command line arguments, supplied properties, and an optional embedded
  * configuration.</p>
  *
@@ -74,19 +74,19 @@ import org.xml.sax.SAXException;
  *
  * <tr><td width="20%" valign="top">properties</td>
  * <td>
- * The <code>properties</code> argument to the init method is the second source 
+ * The <code>properties</code> argument to the init method is the second source
  * of property declarations.  The <code>DefaultLoader</code> uses the properties
- * argument to establish a new <code<Properties</code> instance that is populated 
- * with additional properties based on the <code>DefaultLoader</code> default 
+ * argument to establish a new <code<Properties</code> instance that is populated
+ * with additional properties based on the <code>DefaultLoader</code> default
  * properties resource, and properties declared under an embedded configuration
  * value.
  * </td></tr>
  *
  * <tr><td width="20%" valign="top">configuration</td>
  * <td>
- * A <code>Configuration</code> value may be embeded in the supplied 
+ * A <code>Configuration</code> value may be embeded in the supplied
  * <code>Properties</code> value under the <code>"CONFIGURATION"</code> key.
- * Properties declared in the configuration instance that are recognized by 
+ * Properties declared in the configuration instance that are recognized by
  * the loader are detailed here.
  * <pre>
  *     &lt;property name="propertyName" value="propertyValue"/&gt;
@@ -97,10 +97,10 @@ import org.xml.sax.SAXException;
  *
  * <tr><td width="20%" valign="top">defaults</td>
  * <td>
- * A set of static default properties are used to suppliment the user defined 
- * properties.  Default properties are contained in the 
- * <code>org/apache/orb/CORBA/kernel/orb.properties</code> and 
- * <code>org/apache/orb/CORBA/kernel/DefaultLoader.xml</code> configuration 
+ * A set of static default properties are used to suppliment the user defined
+ * properties.  Default properties are contained in the
+ * <code>org/apache/orb/CORBA/kernel/orb.properties</code> and
+ * <code>org/apache/orb/CORBA/kernel/DefaultLoader.xml</code> configuration
  * resources bundeled in the distribution jar file.
  * </td></tr>
  * </table>
@@ -108,7 +108,7 @@ import org.xml.sax.SAXException;
  * <h4>Embedded Resources</h4>
  *
  * <p>Resources required to manage pluggable component lifecycle handling are
- * provided to the loader using special keyed values.  Keys and the associated 
+ * provided to the loader using special keyed values.  Keys and the associated
  * values are described in the following table.</p>
  *
  * <p><table border="1" cellpadding="3" cellspacing="0" width="100%">
@@ -118,15 +118,15 @@ import org.xml.sax.SAXException;
  *
  * <tr><td width="20%" valign="top"><code>LOGGER</code></td>
  * <td>
- * The logging channel to be assigned to the ORB.  The logger is used as 
- * the relative root when creatiing and assigning logging channels to 
+ * The logging channel to be assigned to the ORB.  The logger is used as
+ * the relative root when creatiing and assigning logging channels to
  * pluggable initializers.
  * </td></tr>
  *
  * <tr><td width="20%" valign="top"><code>CONFIGURATION</code></td>
  * <td>
  * A configuration instance that may be used to supply supplimentary property
- * declarations and initializers configuration blocks.  Initializers that 
+ * declarations and initializers configuration blocks.  Initializers that
  * implement the Avalon <code>Cascading</code> interface will be supplied with
  * its configuration during initializer loading.
  * </td></tr>
@@ -141,12 +141,12 @@ import org.xml.sax.SAXException;
  *
  * <h4>Logging Catagory Management</h4>
  * <p>The logger supplied to the loader under the embedded properties <code>LOGGER</code>
- * key is assigned as the root logging catagory for the ORB.  Catagores for 
+ * key is assigned as the root logging catagory for the ORB.  Catagores for
  * initializers are created as child catagories. If the supplied logger has the catagory
  * name of <code>demo.orb</code>, an initializer catagory for PSS would be
  * <code>demo.orb.pss</code>.  Initializer sub-catagores are resolved from the supplied
  * configuration.  The <code>DefaultLoader</code> locates an initializer declaration based
- * on an initilizer element with a <code>class</code> attribute value matching that 
+ * on an initilizer element with a <code>class</code> attribute value matching that
  * initializer implementation class name.  The <code>name</code> attribute value is used
  * as the logging channel sub-catagory name.
  * <pre>
@@ -159,14 +159,14 @@ import org.xml.sax.SAXException;
  * </p>
  * <pre>
  *       Properties properties = new Properties();
- * 
+ *
  *       <font color="blue"><i>// declare the ORB and Singleton implementations</i></font>
  *
- *       properties.setProperty( "org.omg.CORBA.ORBClass", 
+ *       properties.setProperty( "org.omg.CORBA.ORBClass",
  *         "org.openorb.CORBA.ORB" );
- *       properties.setProperty("org.omg.CORBA.ORBSingletonClass", 
+ *       properties.setProperty("org.omg.CORBA.ORBSingletonClass",
  *         "org.openorb.CORBA.ORBSingleton" );
- *      
+ *
  *       <font color="blue">
  *          <i>// declare the loader that will be instatiated by the ORB</i></font>
  *
@@ -193,9 +193,9 @@ public class DefaultLoader implements ORBLoader, Disposable
     // static
     //=========================================================================
 
-    private static final String ORB_SINGLETON_CLASS_KEY = 
+    private static final String ORB_SINGLETON_CLASS_KEY =
         "org.omg.CORBA.ORBSingletonClass";
-    private static final String ORB_SINGLETON_KEY = 
+    private static final String ORB_SINGLETON_KEY =
         "org.openorb.CORBA.ORBSingleton";
     private static java.util.Properties s_defaultProperties;
     private static Configuration s_defaults;
@@ -266,18 +266,18 @@ public class DefaultLoader implements ORBLoader, Disposable
             }
             catch ( Exception ex )
             {
-                Logger logger = 
+                Logger logger =
                     ((org.openorb.CORBA.ORBSingleton) m_orb).getLogger();
 
                 logger.error( "Unable to initialize CPC server manager", ex );
 
-                throw ExceptionTool.initCause(new org.omg.CORBA.INITIALIZE( 
+                throw ExceptionTool.initCause(new org.omg.CORBA.INITIALIZE(
                       "Unable to initialize CPC server manager (" + ex
                       + ")" ), ex);
             }
         }
 
-        boolean enable_client = getBooleanProperty( 
+        boolean enable_client = getBooleanProperty(
                 "openorb.client.enable", true );
         if ( enable_client )
         {
@@ -295,12 +295,12 @@ public class DefaultLoader implements ORBLoader, Disposable
             }
             catch ( Exception ex )
             {
-                Logger logger = 
+                Logger logger =
                     ((org.openorb.CORBA.ORBSingleton) m_orb).getLogger();
 
                 logger.error( "Unable to initialize CPC client manager", ex );
 
-                throw ExceptionTool.initCause(new org.omg.CORBA.INITIALIZE( 
+                throw ExceptionTool.initCause(new org.omg.CORBA.INITIALIZE(
                       "Unable to initialize CPC client manager (" + ex
                       + ")" ), ex);
             }
@@ -309,18 +309,18 @@ public class DefaultLoader implements ORBLoader, Disposable
         // Load per ORB specificities
         if ( getBooleanProperty( "openorb.dynany.enable", true ) )
         {
-            org.omg.DynamicAny.DynAnyFactory dfac = 
+            org.omg.DynamicAny.DynAnyFactory dfac =
               new org.openorb.CORBA.dynany.DynAnyFactoryImpl( m_orb );
 
             m_orb.addInitialReference( "DynAnyFactory", dfac );
         }
 
         // set reference for the TypeCodeFactory this is never optional.
-        m_orb.addInitialReference( "TypeCodeFactory", 
+        m_orb.addInitialReference( "TypeCodeFactory",
             org.openorb.CORBA.typecode.TypeCodeFactoryImpl.getInstance() );
 
         // set references for the policy manaagement stuff
-        org.openorb.policy.ORBPolicyManagerImpl policymanagerimpl = 
+        org.openorb.policy.ORBPolicyManagerImpl policymanagerimpl =
             new org.openorb.policy.ORBPolicyManagerImpl();
 
         m_orb.setFeature( "PolicyReconciler", policymanagerimpl );
@@ -334,13 +334,13 @@ public class DefaultLoader implements ORBLoader, Disposable
         if ( enable_client )
         {
             m_orb.addInitialReference( "ORBPolicyManager", policymanagerimpl );
-            org.openorb.policy.PolicyCurrentImpl policycurrent 
+            org.openorb.policy.PolicyCurrentImpl policycurrent
               = new org.openorb.policy.PolicyCurrentImpl( policymanagerimpl );
             m_orb.addInitialReference( "PolicyCurrent", policycurrent );
         }
 
         // this will register any policy factories it creates.
-        new org.openorb.policy.OpenORBPolicyFactoryImpl( m_orb, 
+        new org.openorb.policy.OpenORBPolicyFactoryImpl( m_orb,
             policymanagerimpl, enable_server, enable_client );
     }
 
@@ -350,12 +350,12 @@ public class DefaultLoader implements ORBLoader, Disposable
      * @param props properties argument
      * @param orb the ORB instance
      */
-    public void init( String [] args, java.util.Properties props, 
+    public void init( String [] args, java.util.Properties props,
                       org.openorb.CORBA.ORB orb )
     {
-        // make sure this operation is not being invoked on a 
+        // make sure this operation is not being invoked on a
         // previously initalized ORB
-        if ( m_orb != null ) 
+        if ( m_orb != null )
         {
             throw new INITIALIZE( "Illegal attempt to reinitialize the ORB." );
         }
@@ -374,19 +374,19 @@ public class DefaultLoader implements ORBLoader, Disposable
         org.omg.CORBA.ORB singleton = org.omg.CORBA.ORB.init();
         if ( !( singleton instanceof org.openorb.CORBA.ORBSingleton ) )
         {
-            throw new org.omg.CORBA.INITIALIZE( 
-                "Unable to complete init orb singleton is not openorb" 
-                + "singleton .\nPlease use: System.setProperty(\"" 
+            throw new org.omg.CORBA.INITIALIZE(
+                "Unable to complete init orb singleton is not openorb"
+                + "singleton .\nPlease use: System.setProperty(\""
                 + ORB_SINGLETON_CLASS_KEY + "\", \""
-                + ORB_SINGLETON_KEY + "\");\n" 
+                + ORB_SINGLETON_KEY + "\");\n"
                 + "As the first statement in your application." );
         }
 
-        // Validate the configuration and build an initializer element 
+        // Validate the configuration and build an initializer element
         // lookup table.
         try
         {
-             if ( s_defaults == null ) 
+             if ( s_defaults == null )
              {
                  s_defaults = loadDefaultConfiguration();
              }
@@ -398,11 +398,11 @@ public class DefaultLoader implements ORBLoader, Disposable
         }
 
         Configuration config = null;
-        if ( props != null ) 
+        if ( props != null )
         {
             config = (Configuration) props.get("CONFIGURATION");
         }
-        if ( config == null ) 
+        if ( config == null )
         {
             config = new DefaultConfiguration( "default", null );
         }
@@ -417,12 +417,12 @@ public class DefaultLoader implements ORBLoader, Disposable
         }
         catch ( Throwable e )
         {
-            throw new CascadingRuntimeException( 
+            throw new CascadingRuntimeException(
               "Internal error while attempt to read initalizer configurations.", e );
         }
 
         // Validate the context object.
-        if ( props != null ) 
+        if ( props != null )
         {
             m_context = ( Context ) props.get( "CONTEXT" );
         }
@@ -434,7 +434,7 @@ public class DefaultLoader implements ORBLoader, Disposable
         {
             // context is null or context supplied without a base directory
             DefaultContext context = new DefaultContext( m_context );
-            context.put( "APP_DIR", 
+            context.put( "APP_DIR",
                 new File( System.getProperty("user.dir") ) );
             context.makeReadOnly();
             m_context = context;
@@ -452,13 +452,13 @@ public class DefaultLoader implements ORBLoader, Disposable
             throw new CascadingRuntimeException( error, e );
         }
 
-        // Create the properties argument using the default ORB properties as 
+        // Create the properties argument using the default ORB properties as
         // defaults.
-        if ( s_defaultProperties == null ) 
+        if ( s_defaultProperties == null )
         {
-            s_defaultProperties = getDefaultProperties(); 
+            s_defaultProperties = getDefaultProperties();
         }
-        java.util.Properties properties = new java.util.Properties( 
+        java.util.Properties properties = new java.util.Properties(
             s_defaultProperties );
 
         // Add any "initializer" element that are included in the
@@ -479,19 +479,19 @@ public class DefaultLoader implements ORBLoader, Disposable
         }
         catch ( Throwable e )
         {
-            final String error = 
+            final String error =
                 "Unexpected exception while attempting to merge properties.";
             throw new CascadingRuntimeException( error, e );
         }
-        
+
         // Overwrite the derived property values with the values from the
         // supplied properties argument
         if ( props != null )
         {
-            Enumeration enum = props.propertyNames();
-            while ( enum.hasMoreElements() )
+            Enumeration enum_ = props.propertyNames();
+            while ( enum_.hasMoreElements() )
             {
-                String name = (String) enum.nextElement();
+                String name = (String) enum_.nextElement();
                 properties.setProperty( name, props.getProperty( name, "" ) );
             }
         }
@@ -499,20 +499,20 @@ public class DefaultLoader implements ORBLoader, Disposable
         // Validate the logger.
         try
         {
-            if ( props != null ) 
+            if ( props != null )
             {
                 m_logger = (Logger) props.get("LOGGER");
             }
         }
         catch ( Throwable e )
         {
-           throw new CascadingRuntimeException( 
+           throw new CascadingRuntimeException(
                "Unexpected exception while attempting to resolve logger.", e );
         }
 
         // either props has been null or an exception accessing props has
         // occured
-        if ( m_logger == null ) 
+        if ( m_logger == null )
         {
             m_logger = Trace.getLogger( props );
         }
@@ -561,7 +561,7 @@ public class DefaultLoader implements ORBLoader, Disposable
             targs[ 0 ] = String[].class;
             cargs[ 1 ] = orb;
             targs[ 1 ] = org.openorb.CORBA.ORB.class;
-            Configurator conf = new Configurator( args, properties, 
+            Configurator conf = new Configurator( args, properties,
                   m_logger.getChildLogger("configurator") );
             m_properties = conf.getProperties();
             // print the logging header
@@ -579,16 +579,16 @@ public class DefaultLoader implements ORBLoader, Disposable
             load_initializers( cargs, conf.getInitializers() );
             targs[ 2 ] = ORBInitializer[].class;
             targs[ 3 ] = FeatureInitializer[].class;
-            m_init_info = ( ORBInitInfo ) constructClass( "openorb.pi.ORBInitInfoClass", 
+            m_init_info = ( ORBInitInfo ) constructClass( "openorb.pi.ORBInitInfoClass",
                   "org.openorb.PI.OpenORBInitInfo", cargs, targs );
-            if ( m_init_info instanceof LogEnabled) 
+            if ( m_init_info instanceof LogEnabled)
             {
                ((LogEnabled) m_init_info).enableLogging( m_logger );
             }
         }
         catch ( Throwable ex )
         {
-            throw new CascadingRuntimeException( 
+            throw new CascadingRuntimeException(
               "Internal exception while attempting to create ORBInitInfo", ex );
         }
 
@@ -599,13 +599,13 @@ public class DefaultLoader implements ORBLoader, Disposable
         }
         catch ( Throwable ex )
         {
-            throw new CascadingRuntimeException( 
+            throw new CascadingRuntimeException(
               "Exception during load_kernel() call", ex );
         }
 
         // load and register any valuetypes
         ClassLoader loader = Thread.currentThread().getContextClassLoader();
-        if ( m_config != null ) 
+        if ( m_config != null )
         {
             try
             {
@@ -617,14 +617,14 @@ public class DefaultLoader implements ORBLoader, Disposable
                     final String factory = vconfig.getAttribute( "factory" );
                     try
                     {
-                        final ValueFactory instance = 
+                        final ValueFactory instance =
                               (ValueFactory) loader.loadClass( factory ).newInstance();
                         m_orb.register_value_factory( idl, instance, vconfig );
                     }
                     catch ( Throwable ex )
                     {
-                        final String error = 
-                          "Unable to load value factory: " + factory 
+                        final String error =
+                          "Unable to load value factory: " + factory
                           + ", for: " + idl;
                          throw new CascadingRuntimeException( error, ex );
                     }
@@ -636,7 +636,7 @@ public class DefaultLoader implements ORBLoader, Disposable
                 throw new CascadingRuntimeException( error, e );
             }
         }
-        if ( m_logger.isDebugEnabled() && Trace.isLow() ) 
+        if ( m_logger.isDebugEnabled() && Trace.isLow() )
         {
             m_logger.debug("loading orb");
         }
@@ -668,7 +668,7 @@ public class DefaultLoader implements ORBLoader, Disposable
 
     /**
      * Iterate over property values with the specified prefix. <p>
-     * 
+     *
      * @param name parent of properties. Properies of the form name + "." + xxx
      * are returned, where xxx can be anything. May be null to iterate over all
      * properies.
@@ -825,7 +825,7 @@ public class DefaultLoader implements ORBLoader, Disposable
      * @param defl Default class name. Used if the named property is not found.
      *    May be null to indicate no load should be performed if property
      *    is missing.
-     * @param args arguments to constructor. If any constructor arguments are 
+     * @param args arguments to constructor. If any constructor arguments are
      *    primitive types then the four argument version of this function
      *    must be used.
      * @return the newly constructed object, or null if the property value is
@@ -848,7 +848,7 @@ public class DefaultLoader implements ORBLoader, Disposable
      * @param defl Default class name. Used if the named property is not found.
      *    May be null to indicate no load should be performed if property
      *    is missing.
-     * @param args arguments to constructor. If any constructor arguments are 
+     * @param args arguments to constructor. If any constructor arguments are
      *    primitive types then the four argument version of this function
      *    must be used.
      * @param args_t types of onstructor arguments. If any of these are null they
@@ -868,7 +868,7 @@ public class DefaultLoader implements ORBLoader, Disposable
             if ( args_t == null )
                 args_t = new Class[ args.length ];
             else if ( args.length != args_t.length )
-                throw new IllegalArgumentException( 
+                throw new IllegalArgumentException(
                  "Length of args and args_t do not match" );
 
             for ( int i = 0; i < args.length; ++i )
@@ -882,12 +882,12 @@ public class DefaultLoader implements ORBLoader, Disposable
         }
         catch ( final InstantiationException ex )
         {
-            throw ExceptionTool.initCause( new IllegalArgumentException( 
+            throw ExceptionTool.initCause( new IllegalArgumentException(
                     "Illegal argument when constructing a class (" + ex + ")" ), ex );
         }
         catch ( final IllegalAccessException ex )
         {
-            throw ExceptionTool.initCause( new IllegalArgumentException( 
+            throw ExceptionTool.initCause( new IllegalArgumentException(
                     "Illegal access when constructing a class (" + ex + ")" ), ex );
         }
     }
@@ -909,7 +909,7 @@ public class DefaultLoader implements ORBLoader, Disposable
         }
         catch ( final NoSuchMethodException ex )
         {
-            throw ExceptionTool.initCause( new IllegalArgumentException( 
+            throw ExceptionTool.initCause( new IllegalArgumentException(
                     "No constructor found in " + clz.getName() + " (" + ex + ")" ), ex );
         }
     }
@@ -919,7 +919,7 @@ public class DefaultLoader implements ORBLoader, Disposable
         ArrayList orbInits = new ArrayList( cls_names.length );
         ArrayList openOrbInits = new ArrayList( cls_names.length );
 
-        if ( m_logger.isDebugEnabled() && Trace.isLow() ) 
+        if ( m_logger.isDebugEnabled() && Trace.isLow() )
         {
             m_logger.debug(
               "handling " + cls_names.length + " initializers" );
@@ -934,18 +934,18 @@ public class DefaultLoader implements ORBLoader, Disposable
             }
             catch ( Throwable ex )
             {
-                final String error = "Unable to load initializer class: " 
+                final String error = "Unable to load initializer class: "
                   +  cls_names[ i ];
                 throw new CascadingRuntimeException( error, ex );
             }
             boolean ok = false;
             Configuration config = (Configuration) m_table.get( cls_names[i] );
             if ( config == null ) config = new DefaultConfiguration( "-", null );
-            final String name = config.getAttribute("name", "initializer-" 
+            final String name = config.getAttribute("name", "initializer-"
               + System.identityHashCode( instance ) );
-            if ( m_logger.isDebugEnabled() && Trace.isMedium()) 
+            if ( m_logger.isDebugEnabled() && Trace.isMedium())
             {
-                m_logger.debug( "loading initializer: " + cls_names[i] 
+                m_logger.debug( "loading initializer: " + cls_names[i]
                  + " (catagory: " + name + ")");
             }
 
@@ -961,7 +961,7 @@ public class DefaultLoader implements ORBLoader, Disposable
                     ((LogEnabled) instance).enableLogging( m_logger );
                 }
             }
- 
+
             // contextualize the initalizer
             if ( instance instanceof Contextualizable )
             {
@@ -972,7 +972,7 @@ public class DefaultLoader implements ORBLoader, Disposable
                 catch ( Throwable e )
                 {
                     final String error = "Unexpected exeption while contextualizing interceptor.";
-                    throw new CascadingRuntimeException( error, e ); 
+                    throw new CascadingRuntimeException( error, e );
                 }
             }
 
@@ -1019,18 +1019,18 @@ public class DefaultLoader implements ORBLoader, Disposable
     //============================================================================
 
    /**
-    * Returns the system wide default ORB properties 
+    * Returns the system wide default ORB properties
     * @return java.util.Properties default properties
     */
-    public static java.util.Properties getDefaultProperties( ) 
+    public static java.util.Properties getDefaultProperties( )
     {
         final String path = "org/apache/orb/CORBA/kernel/orb.properties";
         java.util.Properties properties = new java.util.Properties();
         try
         {
-            InputStream is = DefaultLoader.class.getClassLoader().getResourceAsStream( path ); 
-            if ( is == null ) throw new RuntimeException( 
-               "Could not find the default 'orb.properties' resource from path: " + path ); 
+            InputStream is = DefaultLoader.class.getClassLoader().getResourceAsStream( path );
+            if ( is == null ) throw new RuntimeException(
+               "Could not find the default 'orb.properties' resource from path: " + path );
             properties.load( is );
         }
         catch ( Throwable e )
@@ -1045,18 +1045,18 @@ public class DefaultLoader implements ORBLoader, Disposable
     }
 
    /**
-    * Returns the system default ORB configuration resource. 
+    * Returns the system default ORB configuration resource.
     * @return Configuration the default ORB configuration
     * @exception MissingResourceException if a null input stream is encountered
     * @exception ConfigurationException if a configuration exception occurs
     */
-    private static Configuration loadDefaultConfiguration( ) 
+    private static Configuration loadDefaultConfiguration( )
         throws MissingResourceException, ConfigurationException
     {
         try
         {
-            InputStream is = DefaultLoader.class.getClassLoader().getResourceAsStream( 
-              "org/apache/orb/CORBA/kernel/DefaultLoader.xml" ); 
+            InputStream is = DefaultLoader.class.getClassLoader().getResourceAsStream(
+              "org/apache/orb/CORBA/kernel/DefaultLoader.xml" );
             if ( is != null )
             {
                 DefaultConfigurationBuilder builder = new DefaultConfigurationBuilder( );
@@ -1065,7 +1065,7 @@ public class DefaultLoader implements ORBLoader, Disposable
             else
             {
                 throw new MissingResourceException(
-                  "Null input stream.", DefaultLoader.class.getName(), 
+                  "Null input stream.", DefaultLoader.class.getName(),
                   "org/apache/orb/CORBA/kernel/DefaultLoader.xml"  );
             }
         }
@@ -1082,9 +1082,9 @@ public class DefaultLoader implements ORBLoader, Disposable
     }
 
    /**
-    * Adds property declarations to the supplied Properties argument from the 
-    * supplied configuration.  
-    * Any configuration elements of the following form will be translated 
+    * Adds property declarations to the supplied Properties argument from the
+    * supplied configuration.
+    * Any configuration elements of the following form will be translated
     * to property values and added to the property set.
     *
     * <pre>
@@ -1094,15 +1094,15 @@ public class DefaultLoader implements ORBLoader, Disposable
     *   &lt;/any-containing-element&gt;
     * </pre>
     *
-    * @param root the file path to be used in resolution of property 
-    *   element in the configuration that contain 'file' attributes as 
+    * @param root the file path to be used in resolution of property
+    *   element in the configuration that contain 'file' attributes as
     *   the property value
     * @param config a configuration containing 'property' element declarations
     * @param properties the properties to merge
     * @exception Exception if an merge error occurs
     */
-    public void mergeProperties( File root, Configuration config, java.util.Properties properties ) 
-        throws Exception 
+    public void mergeProperties( File root, Configuration config, java.util.Properties properties )
+        throws Exception
     {
         Configuration[] props = config.getChildren("property");
         for ( int i = 0; i < props.length; i++ )
@@ -1125,9 +1125,9 @@ public class DefaultLoader implements ORBLoader, Disposable
             }
 
             //
-            // The value of a property is either declared directly under a value attribute, 
+            // The value of a property is either declared directly under a value attribute,
             // or indirectory under a 'file' attribute.  In the case of 'file' attributes
-            // we need to resolve this relative to this file before setting the 
+            // we need to resolve this relative to this file before setting the
             // property value.
             //
 
@@ -1153,7 +1153,7 @@ public class DefaultLoader implements ORBLoader, Disposable
                     }
                     catch ( Exception noURL )
                     {
-                        final String error = 
+                        final String error =
                           "Found a property without a 'value', 'file' or 'url' attribute";
                         throw new CascadingException( error, noURL );
                     }
@@ -1167,7 +1167,7 @@ public class DefaultLoader implements ORBLoader, Disposable
                         }
                         catch ( Exception unknown )
                         {
-                            final String error = 
+                            final String error =
                               "Unexpected exception while creating file:// URL value.";
                             throw new CascadingException( error, unknown );
                         }
@@ -1200,7 +1200,7 @@ public class DefaultLoader implements ORBLoader, Disposable
     */
     public void dispose()
     {
-        if ( m_logger.isDebugEnabled() && Trace.isLow() ) 
+        if ( m_logger.isDebugEnabled() && Trace.isLow() )
         {
             m_logger.debug( "ORB Loader disposal" );
         }
@@ -1214,7 +1214,7 @@ public class DefaultLoader implements ORBLoader, Disposable
         }
         catch ( Throwable e )
         {
-            // log message but don't throw an exception 
+            // log message but don't throw an exception
             final String warning = "Ignoring error during initializer disposal.";
             m_logger.warn( warning, e );
         }
diff --git a/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/CORBA/kernel/Configurator.java b/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/CORBA/kernel/Configurator.java
index 1d34f58a..4e733f76 100644
--- a/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/CORBA/kernel/Configurator.java
+++ b/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/CORBA/kernel/Configurator.java
@@ -103,8 +103,8 @@ public class Configurator
 
     /**
      * Configurator constructor.
-     * @param args 
-     * @param props 
+     * @param args
+     * @param props
      * @param logger Logger
      */
     public Configurator( String[] args, Properties props, final Logger logger )
@@ -130,7 +130,7 @@ public class Configurator
 
         // determine if the XML configuration files should be ignored
         m_ignoreXML = getIgnoreXMLPropertySetting( orbProps, sysProps, props );
-        
+
         // parse the openorb.* and the -ORBname=value properties
         parseSpecialArgs( args, props, orbProps );
 
@@ -250,7 +250,7 @@ public class Configurator
             if ( lc.startsWith( SPECIAL_PROPS[ i ] ) )
                 return;
         }
-        
+
         /*
          * According to 21.7.3.1, initializers are specified as
          * org.omg.PortableInterceptor.ORBInitializerClass.CLASSNAME
@@ -450,24 +450,24 @@ public class Configurator
         if ( props == null )
             return;
 
-        java.util.Enumeration enum;
+        java.util.Enumeration enum_;
 
         try
         {
-            enum = props.propertyNames();
+            enum_ = props.propertyNames();
         }
         catch ( SecurityException ex )
         {
             return;
         }
 
-        while ( enum.hasMoreElements() )
+        while ( enum_.hasMoreElements() )
         {
             String key = null;
 
             try
             {
-                key = ( String ) enum.nextElement();
+                key = ( String ) enum_.nextElement();
 
                 // add properties with certain exceptions
                 if ( !key.startsWith( "sun." )
@@ -480,7 +480,7 @@ public class Configurator
             }
             catch ( SecurityException ex )
             {
-                getLogger().warn( "The property '" + key 
+                getLogger().warn( "The property '" + key
                                   + "' could not be added to the internal"
                                   + " property set due to security reasons. (" + ex + ")" );
             }
@@ -594,7 +594,7 @@ public class Configurator
     }
 
     private String parseSpecialArg( String module, String name, String alias,
-                                    String [] args, 
+                                    String [] args,
                                     Properties props, Properties orbProps )
     {
         if ( args != null )
@@ -647,7 +647,7 @@ public class Configurator
                 }
             }
         }
-        
+
 
         String expProp = module + "." + name;
 
@@ -736,7 +736,7 @@ public class Configurator
                 throw new org.omg.CORBA.INITIALIZE(
                       "Can't parse openorb.config property as a URL" );
             }
-            
+
             m_props.addProperty( "openorb.config", url );
         }
 
@@ -1405,7 +1405,7 @@ public class Configurator
             throw new org.omg.CORBA.INITIALIZE( "Propalias in \""
                                                 + url + "\" does not have a name" );
         }
-        
+
         String alias = impElem.getAttribute( "alias" );
         if ( alias.length() == 0 )
         {
@@ -1445,7 +1445,7 @@ public class Configurator
             else if ( !isRoot.equals( "true" ) )
             {
                 throw new org.omg.CORBA.INITIALIZE( "Property " + name + " in \""
-                                                    + url 
+                                                    + url
                                                     + "\" has illegal value for root attribute" );
             }
         }
@@ -1480,7 +1480,7 @@ public class Configurator
             }
         }
     }
- 
+
     /**
      * Parse command line arguments. Three possible formats for argument strings:<p>
      * -ORBprop             gives property prop=true<p>
@@ -1500,7 +1500,7 @@ public class Configurator
 
                 if ( keyIdx < 0 )
                 {
-                    if ( args.length <= i + 1 
+                    if ( args.length <= i + 1
                          || args[ i + 1 ] == null
                          || args[ i + 1 ].startsWith( "-" ) )
                     {
@@ -1551,7 +1551,7 @@ public class Configurator
      * @param sysProps Java System properties
      * @param props cmdline properties
      */
-    private boolean getIgnoreXMLPropertySetting( Properties orbProps, 
+    private boolean getIgnoreXMLPropertySetting( Properties orbProps,
                                                  Properties sysProps,
                                                  Properties props )
     {
@@ -1564,14 +1564,14 @@ public class Configurator
             if ( value != null )
                 ignoreXML = Boolean.getBoolean( value.toLowerCase() );
         }
-        
+
         if ( sysProps != null )
         {
             String value = sysProps.getProperty( key );
             if ( value != null )
                 ignoreXML = Boolean.getBoolean( value.toLowerCase() );
         }
-        
+
         if ( props != null )
         {
             String value = props.getProperty( key );
diff --git a/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/util/ZipUtil.java b/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/util/ZipUtil.java
index 025358f7..598b0a27 100644
--- a/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/util/ZipUtil.java
+++ b/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/util/ZipUtil.java
@@ -21,9 +21,9 @@ import java.util.zip.ZipOutputStream;
 
 /**
  * This class provides utilities to manage a zip file.
- * 
+ *
  * @author Jerome Daniel
- * @version $Revision: 1.5 $ $Date: 2002/07/14 19:12:41 $ 
+ * @version $Revision: 1.5 $ $Date: 2002/07/14 19:12:41 $
  */
 public class ZipUtil
 {
@@ -171,13 +171,13 @@ public class ZipUtil
     public static void copy( ZipHandle src, ZipHandle dst, String [] no_copy_list )
         throws IOException
     {
-        Enumeration enum = src.getIn().entries();
+        Enumeration enum_ = src.getIn().entries();
 
         ZipEntry entry_src = null;
 
-        while ( enum.hasMoreElements() )
+        while ( enum_.hasMoreElements() )
         {
-            entry_src = ( ZipEntry ) enum.nextElement();
+            entry_src = ( ZipEntry ) enum_.nextElement();
 
             if ( notInList( no_copy_list, entry_src ) )
             {
@@ -238,7 +238,7 @@ public class ZipUtil
 
     /**
      * This function tests if a entry is in a list.
-     * 
+     *
      * @param list The list of entries to check against.
      * @param entry The entry to check the list for.
      * @return True when the entry does not exist in the list, false
-- 
2.41.0.windows.1

