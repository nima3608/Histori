From cbfdc0cee98eecc34aa76385701597bc7ab46de9 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 5 Dec 2017 15:57:15 +0000
Subject: [PATCH 0815/1000] MANTIS 48679 Mantis 48679: F+D printer binary data
 protocol - Assume LH protocol to DLE escape all bytes 0 - 0x1F - Do not
 escape UTS-20 prolog (ESV VT SP SP NUL SI).

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1291 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/serialCon/mPEtxAck.hpp     | 114 ++++++++++++++----
 .../Interfaces/inc/serialCon/mPTrace.hpp      |  15 ++-
 .../Massai/cpp/SerialCon/src/mIEtxAckAsy.cpp  |   7 +-
 3 files changed, 106 insertions(+), 30 deletions(-)

diff --git a/SelfServiceCommon/Interfaces/inc/serialCon/mPEtxAck.hpp b/SelfServiceCommon/Interfaces/inc/serialCon/mPEtxAck.hpp
index d7a7ece9..181a8b15 100644
--- a/SelfServiceCommon/Interfaces/inc/serialCon/mPEtxAck.hpp
+++ b/SelfServiceCommon/Interfaces/inc/serialCon/mPEtxAck.hpp
@@ -174,6 +174,12 @@ private:
 
    }                                    m_rx_state;
 
+   unsigned                             m_write_offset;
+
+   unsigned                             m_write_offset_no_dle_head;
+
+   unsigned                             m_write_offset_no_dle_tail;
+
    //! Traces writer
    traces::writer * const               m_traces_writer;
 
@@ -187,9 +193,9 @@ private:
    **/
    RC write
    (
-      typename xData::const_iterator const & SrcFrom,
-      typename xData::const_iterator const & SrcTo,
-      char SrcETX
+      typename xData::const_iterator const &    SrcFrom,
+      typename xData::const_iterator const &    SrcTo,
+      char                                      SrcETX
    )
       throw()
    {
@@ -224,18 +230,33 @@ private:
                char C = *Iter;
                TxLRC ^= C;
                updateDRC( TxDRC, C );
-               switch( C )
+               if( writeEscapeDleRegion() )
                {
-               case ASCII_STX:
-               case ASCII_ETX:
-               case ASCII_ACK:
-               case ASCII_DLE:
-               case ASCII_NAK:
-               case ASCII_ETB:
-                  m_char_in_out.write( ASCII_DLE );
-                  break;
-               default:
-                  break;
+                  if( m_cfg_escape_all_control )
+                  {
+                     // DLE-Escape all characters below space
+                     if( ( C >= 0 ) && ( C < ' ' ) )
+                     {
+                        m_char_in_out.write( ASCII_DLE );
+                     }
+                  }
+                  else
+                  {
+                     // DLE-Escape just the protocol-relevant control chars
+                     switch( C )
+                     {
+                     case ASCII_STX:
+                     case ASCII_ETX:
+                     case ASCII_ACK:
+                     case ASCII_DLE:
+                     case ASCII_NAK:
+                     case ASCII_ETB:
+                        m_char_in_out.write( ASCII_DLE );
+                        break;
+                     default:
+                        break;
+                     }
+                  }
                }
                m_char_in_out.write( static_cast<unsigned char>( C ) );
                ++Iter;
@@ -339,6 +360,33 @@ private:
       return RC_ERROR;
    }
 
+   bool writeEscapeDleRegion()
+   {
+      unsigned const wo = m_write_offset;
+      m_write_offset += 1;
+      if( wo < m_write_offset_no_dle_head )
+      {
+         return false;
+      }
+      if( wo >= m_write_offset_no_dle_tail )
+      {
+         return false;
+      }
+      return true;
+   }
+
+   void writeEscapeDleRegion
+      (
+         unsigned length,
+         unsigned no_dle_head,
+         unsigned no_dle_tail
+      )
+   {
+      m_write_offset = 0;
+      m_write_offset_no_dle_head = no_dle_head;
+      m_write_offset_no_dle_tail = length - no_dle_tail;
+   }
+
 public:
 
    /**
@@ -378,6 +426,9 @@ public:
       m_rx_msg_segment(),
       m_rx_msg_queue( 10 ),
       m_rx_state( STA_INI ),
+      m_write_offset( 0 ),
+      m_write_offset_no_dle_head( 0 ),
+      m_write_offset_no_dle_tail( 0 ),
       m_traces_writer( traces_writer ),
       m_tx_any_mutex()
    {
@@ -658,24 +709,39 @@ public:
     *
     * Write a message to the interface.
     *
-    * @param src:       The segment to write.
+    * @param src:               The message to write.
+    *
+    * @param no_dle_head:       No DLE escaping for the first bytes?
+    *
+    * @param no_dle_tail:       No DLE escaping for the final bytes?
     *
    **/
-   RC write( xData const & src )
+   RC write
+      (
+         xData const &          src,
+         unsigned               no_dle_head = 0,
+         unsigned               no_dle_tail = 0
+      )
       throw()
    {
-      unsigned Remaining = src.size();
-      typename xData::const_iterator From( src.begin() );
-      while( Remaining > m_cfg_max_segment )
+      unsigned remaninig = src.size();
+      writeEscapeDleRegion( remaninig, no_dle_head, no_dle_tail );
+      typename xData::const_iterator from( src.begin() );
+      while( remaninig > m_cfg_max_segment )
       {
-         typename xData::const_iterator To( From + m_cfg_max_segment );
-         RC PartRC = write( From, To, ASCII_ETB );
+         typename xData::const_iterator to( from + m_cfg_max_segment );
+         // A non-final segment is terminated with ETB
+         RC PartRC = write( from, to, ASCII_ETB );
          if( PartRC != RC_OK )
             return PartRC;
-         From = To;
-         Remaining -= m_cfg_max_segment;
+         from = to;
+         remaninig -= m_cfg_max_segment;
       }
-      return write( From, From + Remaining, ASCII_ETX );
+      // A final segment is terminated with ETX
+      return write
+         (
+            from, from + remaninig, ASCII_ETX
+         );
    }
 
    /**
diff --git a/SelfServiceCommon/Interfaces/inc/serialCon/mPTrace.hpp b/SelfServiceCommon/Interfaces/inc/serialCon/mPTrace.hpp
index 4c0f8f92..3061b4ce 100644
--- a/SelfServiceCommon/Interfaces/inc/serialCon/mPTrace.hpp
+++ b/SelfServiceCommon/Interfaces/inc/serialCon/mPTrace.hpp
@@ -7,7 +7,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2001-2015 MATERNA Information & Communications
+ * Copyright (c) 2001-2017 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -80,15 +80,20 @@ public:
     * calling the protocol::write method.
     *
    **/
-   PRet write( PData const & Src )
+   PRet write
+      (
+         PData const &          src,
+         unsigned               no_dle_head = 0,
+         unsigned               no_dle_tail = 0
+      )
       throw()
    {
       dumpTrace
       (
-         BasicRuntime, m_module_write_f.c_str(), 0, "", Src.size(),
-         &(*Src.begin())
+         BasicRuntime, m_module_write_f.c_str(), 0, "", src.size(),
+         &(*src.begin())
       );
-      return M_P.write( Src );
+      return M_P.write( src, no_dle_head, no_dle_tail );
    }
 
    /**
diff --git a/SelfServiceCommon/Massai/cpp/SerialCon/src/mIEtxAckAsy.cpp b/SelfServiceCommon/Massai/cpp/SerialCon/src/mIEtxAckAsy.cpp
index 440e62fa..b0f8aa11 100644
--- a/SelfServiceCommon/Massai/cpp/SerialCon/src/mIEtxAckAsy.cpp
+++ b/SelfServiceCommon/Massai/cpp/SerialCon/src/mIEtxAckAsy.cpp
@@ -199,8 +199,10 @@ public:
       m_special_lh = true;
       // Do not expect ACK
       m_proto.setNoRxAck();
+#if 0
       // DLE-Escape only the protocol-relevant bytes
       m_proto.setEscapeMinControl();
+#endif
    }
 
    /**
@@ -212,8 +214,10 @@ public:
       throw()
    {
       m_special_lh = true;
+#if 0
       // DLE-Escape only the protocol-relevant bytes
       m_proto.setEscapeMinControl();
+#endif
    }
 
    /**
@@ -376,7 +380,8 @@ mIEtxAck::RC mIEtxAck::write( atbMessage const & src )
          SrcLH.insert( SrcLH.end(), src.begin(), src.end() );
          SrcLH.push_back( ASCII_ESC );
          SrcLH.push_back( ASCII_DC2 );
-         if( m_handle->proto().write( SrcLH ) == xProtocol::RC_OK )
+         // Do not DLE-escape the first 6 and the last 2 bytes
+         if( m_handle->proto().write( SrcLH, 6, 2 ) == xProtocol::RC_OK )
             return RC_OK;
       }
       else
-- 
2.41.0.windows.1

