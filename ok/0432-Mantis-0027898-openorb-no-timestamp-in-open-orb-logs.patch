From 3010c5dbc96207a5061fbd244f4b510976f6c6df Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Thu, 4 Jul 2013 13:08:34 +0000
Subject: [PATCH 0432/1077] Mantis 0027898: openorb: no timestamp in open orb
 logs did not found a configuration for the logging format added timestamp to
 logging format in source

git-svn-id: svn://localhost/SelfServiceCommon/trunk@527 90b65887-3827-0410-9a23-83215b262276
---
 .../src/main/org/openorb/util/Trace.java      | 28 +++++++++----------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/util/Trace.java b/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/util/Trace.java
index 4842bd30..99f9e683 100644
--- a/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/util/Trace.java
+++ b/SelfServiceCommon/Massai/java/OpenORB-1.3.1/OpenORB/src/main/org/openorb/util/Trace.java
@@ -51,13 +51,13 @@ public class Trace
     /**
      * The default logging format.
      */
-    private static final String DEFAULT_FORMAT = 
-            "[%{thread}] [%5.5{priority}] (%{category}): %{message}\\n%{throwable}";
+    private static final String DEFAULT_FORMAT =
+            "%23.23{time:yyyy-MM-dd' 'HH:mm:ss.SSS} [%{thread}] [%5.5{priority}] (%{category}): %{message}\\n%{throwable}";
 
     /**
      * The name of the default assertion logger.
      */
-    private static final String DEFAULT_ASSERTION_LOGGER_NAME = 
+    private static final String DEFAULT_ASSERTION_LOGGER_NAME =
             "default-assertion-logger";
 
     /**
@@ -97,12 +97,12 @@ public class Trace
      *
      */
     private static Hierarchy s_hierarchy;
-    
+
     /**
      * The logging stream target
      */
     private static StreamTarget s_target;
-    
+
     /**
      * The logger assembled from the hierarchy and the stream target objects.
      */
@@ -121,7 +121,7 @@ public class Trace
     /**
      * Returns the default logger.
      *
-     * @param props Properties that may contain a 
+     * @param props Properties that may contain a
      * "openorb.debug.trace=FATAL|ERROR|WARN|INFO|DEBUG or 0|1|2|3|4"
      * property which uses the value to create a priority.
      * @return A logger instance.
@@ -160,7 +160,7 @@ public class Trace
         return new LogKitLogger( s_hierarchy.getLoggerFor(
               "orb" ) );
     }
-    
+
     /**
      * Creates a new instance of the logger.
      * this is necessary in case of a priority change !
@@ -253,7 +253,7 @@ public class Trace
 
     /**
      * Set the debug verbosity level. This applies to DEBUG Priority only.
-     * This method is called by the OpenORBLoader following ORB 
+     * This method is called by the OpenORBLoader following ORB
      * parameterization.
      *
      * @param newLevel The new debug verbosity level for this process.
@@ -351,7 +351,7 @@ public class Trace
             int buflen = buffer.length;
             out.append(
                 "\n------------------------------------------------------\n" );
-            out.append( 
+            out.append(
                   "( " + msg + " ) Displaying a buffer, size = "
                   + buffer.length + "\n" );
             out.append(
@@ -396,7 +396,7 @@ public class Trace
                 }
                 out.append("\n");
             }
-            out.append( 
+            out.append(
                 "------------------------------------------------------\n" );
 
         }
@@ -456,7 +456,7 @@ public class Trace
      * permitted to be <code>null</code>
      * @return never returns
      */
-    public static Error signalIllegalCondition( final Logger optionalLogger, 
+    public static Error signalIllegalCondition( final Logger optionalLogger,
             final String message)
     {
         final Logger logger = ( null == optionalLogger )
@@ -476,15 +476,15 @@ public class Trace
     {
         return getLogger().getChildLogger( DEFAULT_ASSERTION_LOGGER_NAME );
     }
-    
+
     /**
      * This class is intended to expose a stack trace for
      * debug logging. Instances of this class should not be thrown.
      */
     public static class StackSnapshot
-        extends Throwable 
+        extends Throwable
     {
-        /** 
+        /**
          * Creates StackSnapshot
          */
         public StackSnapshot()
-- 
2.41.0.windows.1

