From fe0271c2bb77108c57180e030f4ff460f174e5f7 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Mon, 20 Feb 2012 12:09:56 +0000
Subject: [PATCH 0166/1000] Bugfixing (VC10 related) Reduce the number of
 compiler warnings Mantis 0022440

git-svn-id: svn://localhost/SelfServiceCommon/trunk@295 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/generic/fsm/mSTTimer.hpp       |  4 +-
 .../Interfaces/inc/systools/mSysThread.hpp    | 16 ++++++--
 .../Massai/cpp/CfgXMgrB/src/traceLocal.cpp    |  4 +-
 .../Massai/cpp/Systools/src/mSysThreadW32.cpp | 41 +++++++++++--------
 4 files changed, 40 insertions(+), 25 deletions(-)

diff --git a/SelfServiceCommon/Interfaces/generic/fsm/mSTTimer.hpp b/SelfServiceCommon/Interfaces/generic/fsm/mSTTimer.hpp
index 87a72e1d..6fa58314 100644
--- a/SelfServiceCommon/Interfaces/generic/fsm/mSTTimer.hpp
+++ b/SelfServiceCommon/Interfaces/generic/fsm/mSTTimer.hpp
@@ -7,7 +7,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2002-2011 MATERNA Information & Communications
+ * Copyright (c) 2002-2012 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -149,7 +149,7 @@ namespace Materna
       bool                              M_SttActive;
 
       //! Id of the timeout thread
-      long                              M_TimerThreadId;
+      mSysThread::threadId              M_TimerThreadId;
 
       //! Timeout function
       virtual void time( TA const & ) = 0;
diff --git a/SelfServiceCommon/Interfaces/inc/systools/mSysThread.hpp b/SelfServiceCommon/Interfaces/inc/systools/mSysThread.hpp
index 9304db65..c3e0c1d2 100644
--- a/SelfServiceCommon/Interfaces/inc/systools/mSysThread.hpp
+++ b/SelfServiceCommon/Interfaces/inc/systools/mSysThread.hpp
@@ -13,7 +13,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2009-2011 MATERNA Information & Communications
+ * Copyright (c) 2009-2012 MATERNA Information & Communications
  **************************************************************************
 **/
 #ifndef MSYSTHREAD_HPP
@@ -38,7 +38,7 @@ namespace mSysThread
 
    /**
     *
-    * Returncodes
+    * Returncodes.
     *
    **/
    typedef enum
@@ -57,7 +57,15 @@ namespace mSysThread
 
    /**
     *
-    * Thread priorities
+    * Thread id.
+    *
+   **/
+   typedef unsigned long threadId;
+
+
+   /**
+    *
+    * Thread priorities.
     *
    **/
    typedef enum
@@ -269,7 +277,7 @@ namespace mSysThread
     * @return                   The thread id
     *
    **/
-   long id();
+   threadId id();
 
 
    /**
diff --git a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/traceLocal.cpp b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/traceLocal.cpp
index af5afda6..f267bb7a 100644
--- a/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/traceLocal.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgXMgrB/src/traceLocal.cpp
@@ -93,7 +93,7 @@ void _stdcall writeTrace
       va_start( Arg, Format );
       vsprintf( String, Format, Arg );
       va_end( Arg );
-      int const TId = mSysThread::id();
+      mSysThread::threadId const TId = mSysThread::id();
       idMap::const_iterator IId = S_IdMap.find( TId );
       if( IId == S_IdMap.end() )
       {
@@ -127,7 +127,7 @@ void _stdcall writeTraceText
    {
       static Materna::MSSD::mutexSemaphore X;
       X.request();
-      int const TId = mSysThread::id();
+      mSysThread::threadId const TId = mSysThread::id();
       idMap::const_iterator IId = S_IdMap.find( TId );
       if( IId == S_IdMap.end() )
       {
diff --git a/SelfServiceCommon/Massai/cpp/Systools/src/mSysThreadW32.cpp b/SelfServiceCommon/Massai/cpp/Systools/src/mSysThreadW32.cpp
index 80607830..e14458f9 100644
--- a/SelfServiceCommon/Massai/cpp/Systools/src/mSysThreadW32.cpp
+++ b/SelfServiceCommon/Massai/cpp/Systools/src/mSysThreadW32.cpp
@@ -8,16 +8,14 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2009-2010 MATERNA Information & Communications
+ * Copyright (c) 2009-2012 MATERNA Information & Communications
  *
  **************************************************************************
 **/
 
 #include "systools/mSysThread.hpp"
 
-#ifdef MSYSTHREAD_USE_SEH
 #include "systools/mSysException.hpp"
-#endif
 
 #include <exception>
 #include <sstream>
@@ -33,6 +31,13 @@
 using namespace std;
 
 
+#if defined(_MSC_VER) && _MSC_VER > 1200
+// Recent VC compilers support security-enhanced crt functions
+#define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 1
+#define V_SNPRINTF (void)_snprintf_s
+#else
+#define V_SNPRINTF (void)_snprintf
+#endif
 
 
 
@@ -88,6 +93,10 @@ namespace
 
       tMeta();
 
+      tMeta( tMeta const & Src );
+
+      tMeta & operator=( tMeta const & Src );
+
    };
 
 
@@ -156,7 +165,7 @@ class mSysThread::mSysThread_Impl
    threadException const * const        MH_ThreadExeption;
 
    //! Id of the child thread.
-   long                                 MH_ThreadId;
+   mSysThread::threadId                 MH_ThreadId;
 
    //! Client trace function.
    traces::writer *                     MH_TraceWriter;
@@ -179,7 +188,7 @@ class mSysThread::mSysThread_Impl
    **/
    char * makeChild( char const * Src )
    {
-      (void)_snprintf
+      V_SNPRINTF
          (
             MH_TraceChild, sizeof(MH_TraceChild),
             "child[%d]: %s",
@@ -202,7 +211,7 @@ class mSysThread::mSysThread_Impl
    **/
    char * makeParent( char const * Src )
    {
-      (void)_snprintf
+      V_SNPRINTF
          (
             MH_TraceParent, sizeof(MH_TraceParent),
             "parent[%d]: %s",
@@ -261,7 +270,7 @@ public:
       if( MH_TraceWriter )
       {
          char TBuffer[256];
-         (void)_snprintf
+         V_SNPRINTF
             (
                TBuffer, sizeof(TBuffer), "%s error %d",
                Text,
@@ -284,9 +293,7 @@ public:
    **/
    void function()
    {
-#ifdef MSYSTHREAD_USE_SEH
       mSysException::standardException StdConverter;
-#endif
       MH_ThreadId = GetCurrentThreadId();
       MH_Terminated = false;
       try
@@ -413,7 +420,7 @@ public:
       }
    }
 
-   long childId() const
+   threadId childId() const
    {
       return MH_ThreadId;
    }
@@ -528,7 +535,7 @@ public:
                   char Buf[512];
                   if( Item->srcAvailable() )
                   {
-                     (void)_snprintf
+                     V_SNPRINTF
                         (
                            Buf, sizeof(Buf),
                            "   0x%08X   %-24s   %-48s   %s(%d)",
@@ -541,7 +548,7 @@ public:
                   }
                   else
                   {
-                     (void)_snprintf
+                     V_SNPRINTF
                         (
                            Buf, sizeof(Buf),
                            "   0x%08X   %-24s   %s",
@@ -890,7 +897,7 @@ namespace
       if( pP->P_TraceWriter )
       {
          char Buf[16];
-         (void)_snprintf
+         V_SNPRINTF
             (
                Buf, sizeof(Buf),
                "[%d] ...",
@@ -908,7 +915,7 @@ namespace
          if( pP->P_TraceWriter )
          {
             char Buf[16];
-            (void)_snprintf
+            V_SNPRINTF
                (
                   Buf, sizeof(Buf),
                   "[%d] %s",
@@ -924,7 +931,7 @@ namespace
          if( pP->P_TraceWriter )
          {
             char Buf[32];
-            (void)_snprintf
+            V_SNPRINTF
                (
                   Buf, sizeof(Buf),
                   "[%d] unknown exception",
@@ -937,7 +944,7 @@ namespace
       if( pP->P_TraceWriter )
       {
          char Buf[16];
-         (void)_snprintf
+         V_SNPRINTF
             (
                Buf, sizeof(Buf),
                "[%d].",
@@ -1011,7 +1018,7 @@ mSysThread::RC mSysThread::start
  * Interface function implementation
  *
 **/
-long mSysThread::id()
+mSysThread::threadId mSysThread::id()
 {
    return GetCurrentThreadId();
 }
-- 
2.41.0.windows.1

