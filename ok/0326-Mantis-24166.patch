From 42eac6d775e56f5d91f2997b89edcba855dd0ee9 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 15 Aug 2012 12:16:28 +0000
Subject: [PATCH 0326/1077] Mantis 24166

git-svn-id: svn://localhost/SelfServiceCommon/trunk@392 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/Text/makefile.mak              |   1 +
 .../Massai/cpp/Text/src/TraceEventTimes.cpp   | 279 ++++++++----------
 .../Massai/cpp/Text/src/timeOfTrace.cpp       | 186 ++++++++++++
 .../Massai/cpp/Text/src/timeOfTrace.hpp       | 106 +++++++
 4 files changed, 414 insertions(+), 158 deletions(-)
 create mode 100644 SelfServiceCommon/Massai/cpp/Text/src/timeOfTrace.cpp
 create mode 100644 SelfServiceCommon/Massai/cpp/Text/src/timeOfTrace.hpp

diff --git a/SelfServiceCommon/Massai/cpp/Text/makefile.mak b/SelfServiceCommon/Massai/cpp/Text/makefile.mak
index 20143e1f..7d4c9345 100644
--- a/SelfServiceCommon/Massai/cpp/Text/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/Text/makefile.mak
@@ -19,6 +19,7 @@ MY_LIB1_OBJS =          $(_OBJ)\local_def.obj \
                         $(_OBJ)\mSearchAndReplace.obj \
                         $(_OBJ)\textTemplate.obj \
                         $(_OBJ)\textTools.obj \
+                        $(_OBJ)\timeOfTrace.obj \
                         $(_OBJ)\cEnvSubst.obj \
                         $(_OBJ)\stoupper.obj
 
diff --git a/SelfServiceCommon/Massai/cpp/Text/src/TraceEventTimes.cpp b/SelfServiceCommon/Massai/cpp/Text/src/TraceEventTimes.cpp
index 2a8c86c7..5256c90e 100644
--- a/SelfServiceCommon/Massai/cpp/Text/src/TraceEventTimes.cpp
+++ b/SelfServiceCommon/Massai/cpp/Text/src/TraceEventTimes.cpp
@@ -12,15 +12,26 @@
  *
  **************************************************************************
 **/
+
+#if defined(_MSC_VER)
+// That ... compiler shall not warn about its deficiencies!
+#pragma warning (disable:4786)
+#endif /* _MSC_VER */
+
+// Local
+#include "timeOfTrace.hpp"
+
+// Common lib
 #include "text/mArgScan.hpp"
 #include "tools/mInFile.hpp"
 
+// Compiler lib
+#include <iostream>
 #include <list>
 #include <string>
-#include <iomanip>
-#include <sstream>
 
-#include <iostream>
+
+
 using namespace std;
 
 
@@ -29,18 +40,38 @@ typedef std::list<std::string> stringlist_t;
 
 
 
+#define TET "TraceEventTimes"
+
+
+
 namespace
 {
 
 
+   /**
+    *
+    * Read the next line from a tracefile string, which contains
+    * a certain pattern.
+    *
+    * @param src:               The string to read from.
+    *
+    * @param offset:            The src string offset, from which to start.
+    *                           On return this will be the offset of the
+    *                           pattern in the src string.
+    *
+    * @param pattern:           The line must contain this.
+    *
+    * @return:                  The line found or an empty string.
+    *
+   **/
    std::string nextline
       (
-         std::string const & src,
-         size_t & offset,
-         std::string const & start_pattern
+         std::string const &    src,
+         size_t &               offset,
+         std::string const &    pattern
       )
    {
-      offset = src.find( start_pattern, offset );
+      offset = src.find( pattern, offset );
       if( offset != std::string::npos )
       {
          size_t off_b = src.find_last_of( "\n\r", offset );
@@ -57,170 +88,101 @@ namespace
    }
 
 
-   int diff( int d1, int d2, int limit, int & over )
-   {
-      over = 0;
-      int diff = d1 - d2;
-      while( diff < 0 )
-      {
-         diff += limit;
-         over += 1;
-      }
-      return diff;
-   }
-
-
-   std::string timeDiff( std::string const & t1, std::string const & t2 )
-   {
-      struct ttime
-      {
-         int    year;
-         int    mont;
-         int    days;
-         int    hour;
-         int    mins;
-         int    secs;
-         int    csec;
-      };
-      ttime t1_time, t2_time, d_time;
-      if (
-            sscanf
-            (
-               t1.c_str(),
-               "%02d.%02d.%04d %02d:%02d:%02d.%02d",
-               &t1_time.days,
-               &t1_time.mont,
-               &t1_time.year,
-               &t1_time.hour,
-               &t1_time.mins,
-               &t1_time.secs,
-               &t1_time.csec
-            ) < 1
-         )
-      {
-         return "";
-      }
-      if (
-            sscanf
-            (
-               t2.c_str(),
-               "%02d.%02d.%04d %02d:%02d:%02d.%02d",
-               &t2_time.days,
-               &t2_time.mont,
-               &t2_time.year,
-               &t2_time.hour,
-               &t2_time.mins,
-               &t2_time.secs,
-               &t2_time.csec
-            ) < 6
-         )
-      {
-         return "";
-      }
-
-      int over( 0 );
-      d_time.csec = diff( t1_time.csec, t2_time.csec, 100, over );
-      d_time.secs = diff( t1_time.secs, t2_time.secs, 60, over );
-      d_time.mins = diff( t1_time.mins, t2_time.mins + over, 60, over );
-      d_time.hour = diff( t1_time.hour, t2_time.hour + over, 60, over );
-
-      std::ostringstream oss;
-      oss << "+ ";
-      bool mdiff( false );
-      if( d_time.hour || mdiff )
-      {
-         mdiff = true;
-         oss << setfill ('0') << setw (2) << d_time.hour << ":";
-      }
-      else
-      {
-         oss << "   ";
-      }
-      if( d_time.mins || mdiff )
-      {
-         mdiff = true;
-         oss << setfill ('0') << setw (2) << d_time.mins << ":";
-      }
-      else
-      {
-         oss << "   ";
-      }
-      if( d_time.secs || mdiff )
-      {
-         mdiff = true;
-         oss << setfill ('0') << setw (2) << d_time.secs << ".";
-      }
-      else
-      {
-         oss << " 0.";
-      }
-      oss << setfill ('0') << setw (1) << d_time.csec / 10;
-      return oss.str();
-   }
-
-
-   std::string timeEx( std::string const & line )
-   {
-      if( line.size() > 22 )
-         return line.substr( 0, 22 );
-      else
-         return "-----------";
-   }
-
-
+   /**
+    *
+    * Analyze a tracefile string.
+    *
+    * @param out:               A target stream for the analysis.
+    *
+    * @param src:               The string to analyze.
+    *
+    * @param start_pattern:     An analysis sequence starts with this
+    *                           pattern.
+    *
+    * @param folloup_patterns:  Analyze the occurence of these patterns.
+    *
+   **/
    void analyze
       (
-         std::string const & src,
-         std::string const & start_pattern,
-         stringlist_t followup_patterns
+         std::ostream &         out,
+         std::string const &    src,
+         std::string const &    start_pattern,
+         stringlist_t           followup_patterns
       )
    {
-      unsigned offset_fst( 0 );
-      cout << "\n  HH:MM:SS.C |  Traceline" << endl;
-      cout << "-------------+"
-              "-----------------------------------------------------"
-           << endl;
-      while( offset_fst != std::string::npos )
+      unsigned offs_start( 0 );
+      out << "\n  HH:MM:SS.C |  Traceline\n";
+      char const dashes[] =
+            "-------------+"
+            "-----------------------------------------------------\n";
+      out << dashes;
+      do
       {
          std::string const line_start =
-            nextline( src, offset_fst, start_pattern );
-         std::string const time_start = timeEx( line_start );
-         cout << "\n             | " << line_start.c_str() << endl;
-         if( offset_fst != std::string::npos )
+            nextline( src, offs_start, start_pattern );
+         timeOfTrace time_start( line_start );
+         out << "\n             | " << line_start.c_str() << "\n";
+         if( offs_start != std::string::npos )
          {
-            unsigned offset_lst( offset_fst += 1 );
+            unsigned offs_next_start( offs_start += 1 );
             std::string const line_lst =
-               nextline( src, offset_lst, start_pattern );
+               nextline( src, offs_next_start, start_pattern );
             std::string subsrc;
-            if( offset_lst != std::string::npos )
-               subsrc = src.substr( offset_fst, offset_lst - offset_fst );
+            if( offs_next_start != std::string::npos )
+            {
+               subsrc = src.substr
+                                 (
+                                    offs_start,
+                                    offs_next_start - offs_start
+                                 );
+            }
             else
-               subsrc = src.substr( offset_fst );
+            {
+               subsrc = src.substr( offs_start );
+            }
+            //
+            stringlist_t list_follow;
             for(
-                  stringlist_t::const_iterator it =
+                  stringlist_t::const_iterator itr =
                      followup_patterns.begin();
-                  it != followup_patterns.end();
-                  ++it
+                  itr != followup_patterns.end();
+                  ++itr
                )
             {
-               size_t sub_off = 0;
-               std::string const line = nextline( subsrc, sub_off, *it );
-               if( !line.empty() )
+               size_t offs_follow = 0;
+               do
                {
-                  cout << timeDiff( timeEx( line ), time_start )
-                       << " | " << line << endl;
-               }
+                  std::string const line =
+                     nextline( subsrc, offs_follow, *itr );
+                  if( !line.empty() )
+                  {
+                     list_follow.push_back( line );
+                  }
+                  if( offs_follow != std::string::npos )
+                     offs_follow += 1;
+               } while( offs_follow != std::string::npos );
             }
-            offset_fst = offset_lst;
+            list_follow.sort();
+            for(
+                  stringlist_t::const_iterator its =
+                     list_follow.begin();
+                  its != list_follow.end();
+                  ++its
+               )
+            {
+               timeOfTrace time_follow( *its );
+               out << "+ " << ( time_follow - time_start ).str_nnParts()
+                    << " | " << *its << "\n";
+            }
+            //
+            offs_start = offs_next_start;
          }
-      }
-      cout << "-------------+"
-              "-----------------------------------------------------"
-           << endl;
+      } while( offs_start != std::string::npos );
+      out << dashes;
    }
 
 
-}
+} // namespace
 
 
 
@@ -231,7 +193,7 @@ int main( int argc, char **argv )
    char const * start_pattern = arg.argument( 1 );
    if( arg.help() || (!tracefile) || (!start_pattern) )
    {
-      cout << "Usage: TraceEventTimes"
+      cout << "Usage: " TET
               " -tracefile:<tracefile> <start-pattern>"
               " [ <follow-up-pattern> ]*" << endl;
       return 0;
@@ -240,7 +202,7 @@ int main( int argc, char **argv )
    std::string const in = infile.container();
    if( in.empty() )
    {
-      cout << "TraceEventTimes: Error, no data in file "
+      cout << TET ": Error, no data in file "
            << tracefile << "!" << endl;
       return 1;
    }
@@ -252,10 +214,10 @@ int main( int argc, char **argv )
       followup_patterns.push_back( fx );
       fx = arg.argument( f_index++ );
    }
-   cout << "\n* * * * * * * TraceEventTimes * * * * * * *"
-           "\n*"
-           "\n*     analyzing          \""
-        << tracefile << "\"\n*     start-pattern:     \"" << start_pattern
+   cout <<   "\n* * * * * * * " TET " * * * * * * *"
+             "\n*"
+             "\n*     analyzing          \"" << tracefile
+        << "\"\n*     start-pattern:     \"" << start_pattern
         << "\"";
    for(
          stringlist_t::const_iterator it = followup_patterns.begin();
@@ -266,7 +228,8 @@ int main( int argc, char **argv )
       cout << "\n*     follow-up-pattern: \"" << *it << "\"";
    }
    cout << "\n*" << endl;
-   analyze( in, start_pattern, followup_patterns );
+   analyze( cout, in, start_pattern, followup_patterns );
+   cout << endl;
    return 0;
 }
 
diff --git a/SelfServiceCommon/Massai/cpp/Text/src/timeOfTrace.cpp b/SelfServiceCommon/Massai/cpp/Text/src/timeOfTrace.cpp
new file mode 100644
index 00000000..f384aeb3
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/Text/src/timeOfTrace.cpp
@@ -0,0 +1,186 @@
+/**
+ **************************************************************************
+ *
+ * @file timeOfTrace.cpp
+ *
+ * Implements class timeOfTrace.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2012 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+
+// Exported
+#include "timeOfTrace.hpp"
+
+// Compiler lib
+#include <iomanip>
+#include <sstream>
+
+
+
+namespace
+{
+
+
+   /*
+    *
+    * Modulo subtraction.
+    *
+    */
+   int subtract( int d1, int d2, int limit, int & underrun )
+   {
+      underrun = 0;
+      int difference = d1 - d2;
+      while( difference < 0 )
+      {
+         difference += limit;
+         underrun += 1;
+      }
+      return difference;
+   }
+
+
+} // namespace
+
+
+
+/*
+ *
+ * Class timeOfTrace method implementation, see "timeOfTrace.hpp".
+ *
+ */
+timeOfTrace::timeOfTrace() :
+   m_hour( 0 ),
+   m_mins( 0 ),
+   m_secs( 0 ),
+   m_csec( 0 )
+{
+}
+
+
+
+/*
+ *
+ * Class timeOfTrace method implementation, see "timeOfTrace.hpp".
+ *
+ */
+timeOfTrace::timeOfTrace( timeOfTrace const & src ) :
+   m_hour( src.m_hour ),
+   m_mins( src.m_mins ),
+   m_secs( src.m_secs ),
+   m_csec( src.m_csec )
+{
+}
+
+
+
+/*
+ *
+ * Class timeOfTrace method implementation, see "timeOfTrace.hpp".
+ *
+ */
+timeOfTrace::timeOfTrace( std::string const & traceline ) :
+   m_hour( 0 ),
+   m_mins( 0 ),
+   m_secs( 0 ),
+   m_csec( 0 )
+{
+   size_t offset = traceline.find( ':', 0 );
+   if( ( offset != std::string::npos ) && ( offset > 2 ) )
+   {
+      offset -= 2;
+      std::string timestr = traceline.substr( offset, 10 );
+      if( timestr.size() == 10 )
+      {
+         char const * const tv = timestr.c_str();
+         m_hour = atoi( tv );
+         m_mins = atoi( tv + 3 );
+         m_secs = atoi( tv + 6 );
+         m_csec = atoi( tv + 9 );
+      }
+   }
+}
+
+
+
+/*
+ *
+ * Class timeOfTrace method implementation, see "timeOfTrace.hpp".
+ *
+ */
+timeOfTrace::~timeOfTrace() throw()
+{
+}
+
+
+
+/*
+ *
+ * Class timeOfTrace method implementation, see "timeOfTrace.hpp".
+ *
+ */
+std::string timeOfTrace::str_nnParts() const
+{
+   std::ostringstream oss;
+   bool mdiff( false );
+   if( m_hour )
+   {
+      mdiff = true;
+      oss << std::setfill ('0') << std::setw (2) << m_hour << ":";
+   }
+   else
+   {
+      oss << "   ";
+   }
+   if( m_mins || mdiff )
+   {
+      mdiff = true;
+      oss << std::setfill ('0') << std::setw (2) << m_mins << ":";
+   }
+   else
+   {
+      oss << "   ";
+   }
+   if( m_secs || mdiff )
+   {
+      mdiff = true;
+      oss << std::setfill ('0') << std::setw (2) << m_secs << ".";
+   }
+   else
+   {
+      oss << " 0.";
+   }
+   oss << std::setfill ('0') << std::setw (1) << m_csec;
+   return oss.str();
+}
+
+
+
+/*
+ *
+ * Calculate with timeOfTrace objects, see "timeOfTrace.hpp".
+ *
+ */
+timeOfTrace timeOfTrace::operator-( timeOfTrace const & sub )
+{
+   timeOfTrace result;
+   int urun( 0 );
+   result.m_csec = subtract( m_csec, sub.m_csec, 10, urun );
+   result.m_secs = subtract( m_secs, sub.m_secs, 60, urun );
+   result.m_mins = subtract( m_mins, sub.m_mins + urun, 60, urun );
+   result.m_hour = subtract( m_hour, sub.m_hour + urun, 24, urun );
+   return result;
+}
+
+
+
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
diff --git a/SelfServiceCommon/Massai/cpp/Text/src/timeOfTrace.hpp b/SelfServiceCommon/Massai/cpp/Text/src/timeOfTrace.hpp
new file mode 100644
index 00000000..fc4722ed
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/Text/src/timeOfTrace.hpp
@@ -0,0 +1,106 @@
+/**
+ **************************************************************************
+ *
+ * @file timeOfTrace.hpp
+ *
+ * Contains class timeOfTrace.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2012 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+#ifndef TIMEOFTRACE_HPP
+#define TIMEOFTRACE_HPP
+
+
+#include <string>
+
+
+/**
+ *
+ * The timestamp of a trace-line.
+ *
+**/
+class timeOfTrace
+{
+
+   int    m_hour;       //!< Hour, 0 - 23
+
+   int    m_mins;       //!< Minute, 0 - 59
+
+   int    m_secs;       //!< Second, 0 - 59
+
+   int    m_csec;       //!< Tenth of a second, 0 - 9
+
+public:
+
+   /**
+    *
+    * Default constructor.
+    *
+   **/
+   timeOfTrace();
+
+   /**
+    *
+    * Copy constructor.
+    *
+    * @param src:               The source object.
+    *
+   **/
+   timeOfTrace( timeOfTrace const & src );
+
+   /**
+    *
+    * Create the object from a trace-line.
+    *
+    * @param traceline:         The source for the time string.
+    *
+   **/
+   explicit timeOfTrace( std::string const & traceline );
+
+   /**
+    *
+    * Destructor.
+    *
+   **/
+   ~timeOfTrace() throw();
+
+   /**
+    *
+    * Calculate the time difference.
+    *
+    * @param sub:          The time to subtract (subtrahend).
+    *
+    * @return:             The result (difference).
+    *
+   **/
+   timeOfTrace operator-( timeOfTrace const & sub );
+
+
+   /**
+    *
+    * Display only the non-null parts of the time,
+    * useful to show a time difference.
+    *
+   **/
+   std::string str_nnParts() const;
+
+private:
+
+   //! Assignment, intentionally not implemented.
+   timeOfTrace & operator=( timeOfTrace const & src );
+
+}; // class timeOfTrace
+
+
+#endif // #ifndef TIMEOFTRACE_HPP
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
-- 
2.41.0.windows.1

