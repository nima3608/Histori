From bba406de4cb111bbeb8750b3ddf094b667baf130 Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 9 Oct 2013 18:42:42 +0000
Subject: [PATCH 0484/1076] controller.idl V1.0.0.0

Mantis 0028892: PLF: SAM-Hotkey not working
added platformControl::onSOPpressed


git-svn-id: svn://localhost/SelfServiceCommon/trunk@597 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/idl/Massai/controller.idl          | 62 +++++++------------
 1 file changed, 21 insertions(+), 41 deletions(-)

diff --git a/SelfServiceCommon/Massai/idl/Massai/controller.idl b/SelfServiceCommon/Massai/idl/Massai/controller.idl
index 588a994d..00f2aa95 100644
--- a/SelfServiceCommon/Massai/idl/Massai/controller.idl
+++ b/SelfServiceCommon/Massai/idl/Massai/controller.idl
@@ -1,15 +1,17 @@
-//---------------------------------------------------------------------------
-//
-//  file:     controller.idl
-//
-//  purpose:  basic definition for the massai controller service
-//            (internal)
-//
-//  date:     11.06.2002
-//
-//  author:   (AGe)
-//
-//---------------------------------------------------------------------------
+//  basic definition for the massai controller service (internal)
+
+/*
+M_INTERFACE_VERSION="1.0.0.0" 
+
+History:
+
+controller.idl
+
+date 08.10.2013
+V1.0.0.0
+Mantis 0028892: PLF: SAM-Hotkey not working
+added platformControl::onSOPpressed
+*/ 
 
 #ifndef CONTROLLER_IDL
 #define CONTROLLER_IDL
@@ -20,8 +22,6 @@
    #endif
 #endif
 
-
-
 #pragma prefix "massai.materna.com"
 
 module PlatformManager
@@ -33,20 +33,19 @@ module PlatformManager
       /** Set platform back to operational mode
           @note: Replacement for "Go In Service" button
       */
-
       long returnToService();
+      
+      // SOP-Button or SOP-HotKey pressed
+      void onSOPpressed();
     };
-
 };
 
-/** Interface to provide task control services
-    This service runs on FIXED PORT: 19998
-*/
+// Interface to provide task control services
+//   This service runs on FIXED PORT: 19998
 
 module Controller
 {
     /** Defines the process data that is returned upon request */
-
     struct process
     {
       string name;    /**< The process name */
@@ -61,14 +60,12 @@ module Controller
     typedef sequence <process> processList;
 	
 
-
     /** Kiosk Control Interface */
-
     interface kioskControl
     {
       typedef sequence<string> string_sequence;
+      
       /** Returns the list of current active processes */
-
       processList queryProcessList();
 
       /** Kills a process from remote
@@ -77,13 +74,11 @@ module Controller
        * @param pid - The process identifier of the process to kill
        * @return 0 if no error occured, system error code if failed
        */
-
       long killProcess(in long pid);
 
       /** Shuts down the massai platform
        * @return 0 if no error occured, system error code if failed
        */
-
       long shutdownPlatform();
 
       /** Forces a shut down of the massai platform.
@@ -91,19 +86,16 @@ module Controller
        *  the platform even if there's a business process active.
        *  @return 0 if no error occured, system error code if failed
        */
-
       long forcedShutdownPlatform();
 
       /** Starts the massai platform from remote
        * @return 0 if no error occured, system error code if failed
        */
-
       long startPlatform();
 
       /** Shuts down and reboots the kiosk
        * @return 0 if no error occured, system error code if failed
        */
-
       long rebootKiosk();
 
       /** Forces a shut down and reboot of the kiosk.
@@ -111,13 +103,11 @@ module Controller
        *  the kiosk even if there's a business process active.
        *  @return 0 if no error occured, system error code if failed
        */
-
       long forcedRebootKiosk();
 
       /** Shuts down the kiosk
        * @return 0 if no error occured, system error code if failed
        */
-
       long shutdownKiosk();
 
       /** Forces a shut down of the kiosk.
@@ -125,37 +115,30 @@ module Controller
        *  the kiosk even if there's a business process active.
        *  @return 0 if no error occured, system error code if failed
        */
-
       long forcedShutdownKiosk();
 
       /* Call this to avoid incorrect shutdown and reboot of kiosk and
        * platform (for internal use only !!)
        * @param busy - Specify if kiosk whether in use or not
        */
-
       void kioskBusy(in boolean busy);
 
       /** Returns the time when the machine did the last reboot */
-
       string lastRebootTime();
 
       /** Returns the actual system date and time
        *  ( or 00.00.0000-00:00:00 in case of an error)
        *  @return Date and Time in the format DD.MM.YYYY-HH:MM:SS
-       *
        */
-
       string systemTime();
 
       /** Sets the actual system date and time to passed value
        *  @param dateTime - Date and Time in the format DD.MM.YYYY-HH:MM:SS
        *  @return 0 if no error, system error code if failed or -1 on format error
        */
-
       long setSystemTime(in string dateTime);
 
       /** Reloads the etc/hosts file for this machine */
-
       long reloadHostsFile();
 
       /** Forces a shut down of the massai platform and starts it again.
@@ -163,14 +146,11 @@ module Controller
        *  the platform even if there's a business process active.
        *  @return 0 if no error occured, system error code if failed
        */
-
       long forcedRestartPlatform();
 
       /** start a list of commands
-       */
-       
+       */      
       long executeCommand( in string_sequence string_args );
-
     };
 };
 
-- 
2.41.0.windows.1

