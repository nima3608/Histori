From 33faf167f5804a9ea1bd72c33e8dbe787ca7718d Mon Sep 17 00:00:00 2001
From: vjudin <vjudin@90b65887-3827-0410-9a23-83215b262276>
Date: Mon, 30 Sep 2013 10:36:05 +0000
Subject: [PATCH 0405/1000] Setup ready to start SNMP immediately.

git-svn-id: svn://localhost/SelfServiceCommon/trunk@594 90b65887-3827-0410-9a23-83215b262276
---
 .../src/MConfig_CustomAction.cpp              | 347 +++++++++---------
 1 file changed, 177 insertions(+), 170 deletions(-)

diff --git a/SelfServiceCommon/Massai/cpp/Installer_CustomAction/src/MConfig_CustomAction.cpp b/SelfServiceCommon/Massai/cpp/Installer_CustomAction/src/MConfig_CustomAction.cpp
index 1b07b3c5..f45da9a9 100644
--- a/SelfServiceCommon/Massai/cpp/Installer_CustomAction/src/MConfig_CustomAction.cpp
+++ b/SelfServiceCommon/Massai/cpp/Installer_CustomAction/src/MConfig_CustomAction.cpp
@@ -213,6 +213,8 @@ extern "C" UINT __stdcall PrepareAddressValues(MSIHANDLE hInstall)
         Log_Str( wostr );
     }
     UINT er = SUCCEEDED(hResult) ? ERROR_SUCCESS : ERROR_INSTALL_FAILURE;
+	wostr << wsFunction << L" er = " << ((er == ERROR_SUCCESS ) ? L"ERROR_SUCCESS" : L"ERROR_INSTALL_FAILURE" );
+	Log_Str( wostr );
     return WcaFinalize(er);
 }
 
@@ -229,36 +231,57 @@ extern "C" UINT __stdcall WriteSNMPConfigFile (MSIHANDLE hInstall)
         Log_Str( wostr );
         return ERROR_INSTALL_FAILURE;
     }
-    wostr << ToWiden( __FUNCTION__ ) << L"\tWcaInitialize() OK" ;
+    wostr << wsFunction << L" WcaInitialize() OK" ;
     Log_Str( wostr );
-    wchar_t* wszConfDir = NULL;
-    std::string strConfDir ;
-    hResult = WcaGetProperty( L"SNMPCONFIGDIR", &wszConfDir );
-    if( wszConfDir != NULL )
-    {
-        wostr << L"install directory for config files is " << wszConfDir;
-        Log_Str( wostr );
-        strConfDir = ToNarrow(wszConfDir) ;
-        ReleaseStr( wszConfDir );
-    }
-    else
-    {
-        wostr << L"could not get install directory for config files " ;
-        Log_Str( wostr );
-    }
-    // write file C:\usr\share\snmp\snmpd.conf
-    std::string strConfigFileName = strConfDir + "\\snmpd.conf";
+    
+
+    //hResult = WcaGetProperty( L"SNMPCONFIGDIR", &wszConfDir );
+	wchar_t* wszTotalProp = NULL;
+	hResult = WcaGetProperty( L"CustomActionData", &wszTotalProp );
+	if( wszTotalProp == NULL )
+	{
+		wostr << wsFunction << L" failed to get common property";
+		Log_Str( wostr );
+		return WcaFinalize( ERROR_INSTALL_FAILURE );
+	}
+	
+	wostr << wsFunction << L" common property: \"" << wszTotalProp << L"\"";
+	Log_Str( wostr );	
+	
+	std::wstring wstrTotalProp( wszTotalProp );
+	ReleaseStr( wszTotalProp );
+	
+	std::wstring::size_type pos1 = wstrTotalProp.find( L";" );
+	
+	if( pos1 == std::wstring::npos )
+	{
+		wostr << wsFunction << L" no semicolon detected";
+		Log_Str( wostr );
+		return WcaFinalize( ERROR_INSTALL_FAILURE );
+	}
+	
+	std::wstring wstrConfDir = std::wstring( wstrTotalProp, 0, pos1 - 1 );
+	wostr << wsFunction << L" config dir is \"" << wstrConfDir << L"\"";
+	Log_Str( wostr );
+	
+	// Open the file C:\usr\share\snmp\snmpd.conf
+	std::string strConfDir = std::string( ToNarrow( wstrConfDir.c_str() ) );
+	std::string strConfigFileName = strConfDir + ( strConfDir[ strConfDir.length() - 1 ] == '\\' ? "snmpd.conf":"\\snmpd.conf" );
     std::ostringstream ostr;
     std::ofstream oSnmpdConf( strConfigFileName );
     if( oSnmpdConf.bad())
     {
-        wostr << L"!!!CONFIG FILE " << ToWiden( strConfigFileName.c_str() ) << L" IS BAD ON OPEN!!!";
-    }
-    else
-    {
-        wostr << L"!!!CONFIG FILE " << ToWiden( strConfigFileName.c_str() ) << L" IS GOOD ON OPEN!!!";
+        wostr << L"!!!CONFIG FILE \"" << ToWiden( strConfigFileName.c_str() ) << L"\" IS BAD ON OPEN!!!";
+		ReleaseStr( wszTotalProp );
+		return WcaFinalize( ERROR_INSTALL_FAILURE );
     }
+	
+	wostr << L"!!!CONFIG FILE \"" << ToWiden( strConfigFileName.c_str() ) << L"\" IS GOOD ON OPEN!!!";
+    Log_Str( wostr );
+	
     oSnmpdConf << "##----------START------------------##" << std::endl;
+	wostr << L"osnmpdConf is " << oSnmpdConf.good() ? L"good" : L"bad" ;
+	Log_Str( wostr );
     oSnmpdConf << "###########################################################################" << std::endl <<
                   "#" << std::endl <<
                   "# snmpd.conf" << std::endl << 
@@ -271,7 +294,8 @@ extern "C" UINT __stdcall WriteSNMPConfigFile (MSIHANDLE hInstall)
                   "#   snmp agent." << std::endl << std::endl <<
                   "# rocommunity: a SNMPv1/SNMPv2c read-only access community name" << std::endl << 
                   "#   arguments:  community [default|hostname|network/bits] [oid]" << std::endl << 
-                  "rocommunity public" << std::endl;
+                  "rocommunity public" << std::endl <<
+				  "rwcommunity gandalf localhost" << std::endl;
     if( oSnmpdConf.bad())
     {
         wostr << wsFunction <<  L"!!!CONFIG FILE " << ToWiden( strConfigFileName.c_str() ) << L" IS BAD ON WRITE!!!";
@@ -280,156 +304,134 @@ extern "C" UINT __stdcall WriteSNMPConfigFile (MSIHANDLE hInstall)
     {
         wostr << wsFunction << L"!!!CONFIG FILE " << ToWiden( strConfigFileName.c_str() ) << L" IS good ON WRITE!!!";
     }
-    //WcaSetProperty(L"SNMPAGENTS",L"1.2.34.56");
-    wchar_t *wszTrapSink = NULL,       // arguments: community-string
-            *wszAgents = NULL;   // arguments: [transport:]port[@interface/address],... 
-    //--------------------------------------------//
-    hResult = WcaGetProperty( L"SNMPAGENTS", &wszAgents );
-    if( wszAgents != NULL )
-    {
-        /* Examples        
-        agentaddress  139.2.249.135
-        agentaddress  udp:10000
-        agentaddress tcp:139.2.249.135:1700
-        */
-        wostr << wsFunction << L"\tGetProperty SNMPAGENTS OK hResult = " << hResult << L"; SNMPAGENTS property value is: " << wszAgents;
-        Log_Str( wostr );
-        //--------------------------------------------//
-        std::wstring wstrAgents( wszAgents );
-        oSnmpdConf << "###########################################################################" << std::endl 
-                   << "# SECTION: Agent Operating Mode"  << std::endl 
-                   << "#" << std::endl 
-                   << "#   This section defines how the agent will operate when it" << std::endl 
-                   << "#   is running.2 " << std::endl 
-                   << std::endl 
-                   << "# agentaddress: The IP address and port number that the agent will listen on." << std::endl 
-                   << "#   By default the agent listens to any and all traffic from any" << std::endl 
-                   << "#   interface on the default SNMP port (161).  This allows you to" << std::endl 
-                   << "#   specify which address, interface, transport type and port(s) that you" << std::endl 
-                   << "#   want the agent to listen on.  Multiple definitions of this token" << std::endl 
-                   << "#   are concatenated together (using ':'s)." << std::endl 
-                   << "#   arguments: [transport:][interface/address][:]port,..." << std::endl ;
-        /* Original description [transport:]port[@interface/address],... IS WRONG */
-
-                   //<< "#agentaddress  139.2.249.135" << std::endl ;
-        wostr << wsFunction << L"\tWrote before AGENT section" << std::endl << L"Input string: " << wszAgents  ;
-        Log_Str( wostr );
-        // wregex wrg( L"((udp|tcp)[:])?(\\d+)(@[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3})?");    
-        unsigned i = 0;
-#if 0  
-        wregex wrg( L"((udp|tcp)[:])?(\\d+)?([[:alnum:]_-]*|([[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}))?(^[:][[:digit:]]{1,5})?");    
-    
-        std::regex_iterator<std::wstring::iterator> rit( wstrAgents.begin(), wstrAgents.end(), wrg);
-        std::regex_iterator<std::wstring::iterator> rend;
+	Log_Str( wostr);
+	
+    std::wstring::size_type pos2 = wstrTotalProp.find( L";", pos1 + 1 );	
+    if( pos2 == std::wstring::npos )
+	{
+		wostr << wsFunction << L" Could not get the second semicolon";
+		Log_Str( wostr );
+		return WcaFinalize( ERROR_INSTALL_FAILURE );
+	}
+	
+	/* Examples        
+	agentaddress  139.2.249.135
+	agentaddress  udp:10000
+	agentaddress tcp:139.2.249.135:1700
+	*/
+	std::wstring wstrAgents = std::wstring( wstrTotalProp, pos1 + 1, pos2 - pos1 - 1 );
+	wostr << wsFunction << L"SNMPAGENTS property is\"" << wstrAgents << L"\"";
+	Log_Str( wostr );
+	//--------------------------------------------//
+	oSnmpdConf << "###########################################################################" << std::endl 
+			   << "# SECTION: Agent Operating Mode"  << std::endl 
+			   << "#" << std::endl 
+			   << "#   This section defines how the agent will operate when it" << std::endl 
+			   << "#   is running.2 " << std::endl 
+			   << std::endl 
+			   << "# agentaddress: The IP address and port number that the agent will listen on." << std::endl 
+			   << "#   By default the agent listens to any and all traffic from any" << std::endl 
+			   << "#   interface on the default SNMP port (161).  This allows you to" << std::endl 
+			   << "#   specify which address, interface, transport type and port(s) that you" << std::endl 
+			   << "#   want the agent to listen on.  Multiple definitions of this token" << std::endl 
+			   << "#   are concatenated together (using ':'s)." << std::endl 
+			   << "#   arguments: [transport:][interface/address][:]port,..." << std::endl ;
+	/* Original description [transport:]port[@interface/address],... IS WRONG */
+
+			   
+	wostr << wsFunction << L"\tWrote before AGENT section" << std::endl << L"Input string: " << wstrAgents  ;
+	Log_Str( wostr );
+	// wregex wrg( L"((udp|tcp)[:])?(\\d+)(@[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3})?");    
+	unsigned i = 0;
+	std::tr1::wregex r2(L"((\\w)*:)?((\\d){1,3}\\.)((\\d){1,3}\\.)((\\d){1,3}\\.)(\\d){1,3}(:(\\d){1,5})?" );
+	std::tr1::wregex r3(L"(((\\w)*:)?)?((\\w)*)?(:(\\d){1,5})?" );    
+	 
+	std::wsmatch res2, res3;
+	bool b2 = false, b3 = false;
+	if(( b2 = std::tr1::regex_match( wstrAgents, res2, r2 )) ||
+		( b3 = std::tr1::regex_match( wstrAgents, res3, r3 )))
+	{
+		 oSnmpdConf << "agentaddress " << ToNarrow(( b2? res2[ 0 ]:res3[ 0 ]).str().c_str()) << std::endl;
+	}
+	else
+	{
+		 wostr << wsFunction << L" agentaddress invalid " << wstrAgents << std::endl;
+		 Log_Str( wostr );
+	}
+	
+	wostr << wsFunction << L"@" << __LINE__ << L": Agent bound at " << wstrAgents << std::endl;
+	Log_Str( wostr );
+	if( wstrAgents.find( L"127.0.0.1" ) == std::string::npos )
+	{
+		oSnmpdConf << "agentaddress 127.0.0.1" << std::endl;
+		wostr << wsFunction << L"@" << __LINE__ << L": added manually 127.0.0.1" << std::endl;
+		Log_Str( wostr );					
+	}	
+	
+	oSnmpdConf.flush();        
     
-
-        while (rit!=rend) 
-        {
-            if( i++ == 0 )
-                oSnmpdConf << "agentaddress " ;
-            if( rit->str().length() > 0 )
-                oSnmpdConf << ToNarrow( rit->str().c_str()) ;
-            wostr << wsFunction << " AgentAddress: " << rit->str().c_str() ;
-            Log_Str( wostr );
-            ++rit; 
-        }
-        if( i )
-            oSnmpdConf << std::endl;
-#else
-        std::tr1::wregex r2(L"((\\w)*:)?((\\d){1,3}\\.)((\\d){1,3}\\.)((\\d){1,3}\\.)(\\d){1,3}(:(\\d){1,5})?" );
-        std::tr1::wregex r3(L"(((\\w)*:)?)?((\\w)*)?(:(\\d){1,5})?" );    
-         
-         std::wsmatch res2, res3;
-         bool b2 = false, b3 = false;
-         if(( b2 = std::tr1::regex_match( wstrAgents, res2, r2 )) ||
-            ( b3 = std::tr1::regex_match( wstrAgents, res3, r3 )))
-         {
-             oSnmpdConf << "agentaddress " << ToNarrow(( b2? res2[ 0 ]:res3[ 0 ]).str().c_str()) << std::endl;
-         }
-         else
-         {
-             wostr << wsFunction << L" agentaddress invalid " << wstrAgents << std::endl;
-             Log_Str( wostr );
-         }
-
-#endif
-        
-        ReleaseStr( wszAgents );
-    }
-    else
-    {
-        wostr << wsFunction << L" Failed to GetpPoperty SNMPAGENTS" ;
-        Log_Str ( wostr );        
-    }
-
     //--------------------------------------------//
-    hResult = WcaGetProperty( L"TRAPRECEIVERS", &wszTrapSink  );
-    if( wszTrapSink != NULL )
-    {
-        /**
-         trap2sink: 
-            You can send SNMPv2 traps using the trapsink token. A non-standard port can be specified by adding the port 
-            after the host name or IP address.
-            trap2sink 192.168.1.99:1199 trapComm
-
-        informsink:
-            You can send SNMPv2 informs, which the remote side should confirm, using the informsink token. A non-standard 
-            port can be specified by adding the port after the host name or IP address.
-            informsink 192.1.68.88:1188 trapComm
-        */
-        /*
-        ###########################################################################
-        # SECTION: Trap Destinations
-        #
-        #   Here we define who the agent will send traps to.
-
-        # trapcommunity: Default trap sink community to use
-        #   arguments: community-string
-        trap2sink  traprecv.materna.de:1162  public
-        trap2sink  buc-pc055:1162  public
-        trap2sink buc-pc026
-        trapsess  buc-pc026
-        informsink buc-pc026
-        trapcommunity  public
-        */
-        wostr << wsFunction <<  L" GetProperty( TRAPRECEIVERS ) OK; hResult = " <<  hResult << L" value= \"" << wszTrapSink << L"\"";
-        Log_Str( wostr );
-        oSnmpdConf << "##########################################################################" << std::endl
-                  << "# SECTION: Trap Destinations" << std::endl
-                  << "#" << std::endl
-                  << "#   Here we define who the agent will send traps to." << std::endl
-                  << "# trapcommunity: Default trap sink community to use" << std::endl
-                  << "#   arguments:community-string" << std::endl;                 
-        
-#if 0
-        std::wstring wstrTrapSink( wszTrapSink );
-        wregex wrTrap(L"[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}(:(\\d){1,5})?");
-        std::regex_iterator<std::wstring::iterator> riT( wstrTrapSink.begin(), wstrTrapSink.end(), wrTrap );
-        std::regex_iterator<std::wstring::iterator> rEnd;
-        wostr << ToWiden( __FUNCTION__ ) << L"Input string(trap): " <<  wszTrapSink ;
-        Log_Str ( wostr );
-        while (riT!=rEnd) 
-        {
-            oSnmpdConf << "\ttrap2sink " << ToNarrow( riT->str().c_str()) << std::endl;
-            wostr << "\ttrap2sink " << riT->str().c_str() ;
-            Log_Str ( wostr );
-            ++riT;
-        }
-#else
-        oSnmpdConf << "trap2sink " << ToNarrow( wszTrapSink ) << std::endl;
-#endif
+	
+	/**
+	 trap2sink: 
+		You can send SNMPv2 traps using the trapsink token. A non-standard port can be specified by adding the port 
+		after the host name or IP address.
+		trap2sink 192.168.1.99:1199 trapComm
+
+	informsink:
+		You can send SNMPv2 informs, which the remote side should confirm, using the informsink token. A non-standard 
+		port can be specified by adding the port after the host name or IP address.
+		informsink 192.1.68.88:1188 trapComm
+	*/
+	/*
+	###########################################################################
+	# SECTION: Trap Destinations
+	#
+	#   Here we define who the agent will send traps to.
+
+	# trapcommunity: Default trap sink community to use
+	#   arguments: community-string
+	trap2sink  traprecv.materna.de:1162  public
+	trap2sink  buc-pc055:1162  public
+	trap2sink buc-pc026
+	trapsess  buc-pc026
+	informsink buc-pc026
+	trapcommunity  public
+	*/
+	std::wstring wstrTrapSink = std::wstring( wstrTotalProp, pos2 + 1);
+    wostr << wsFunction <<  L"  TRAPRECEIVERS = \"" <<  wstrTrapSink << L"\"";
+    Log_Str( wostr );
+    oSnmpdConf 	<< "##########################################################################" << std::endl
+                << "# SECTION: Trap Destinations" << std::endl
+                << "#" << std::endl
+                << "#   Here we define who the agent will send traps to." << std::endl
+                << "# trapcommunity: Default trap sink community to use" << std::endl
+                << "#   arguments:community-string" << std::endl
+				<< "trapcommunity public" << std::endl;
         
+    oSnmpdConf << "trap2sink " << ToNarrow( wstrTrapSink.c_str() ) << std::endl;
+    oSnmpdConf.flush();
+	oSnmpdConf.close();
+	
+	std::ifstream iSnmpdConf( strConfigFileName );
+	if( !iSnmpdConf.good())
+	{
+		wostr << wsFunction << L"input from \'" << ToWiden( strConfigFileName.c_str() ) << L"\' failed" ;
+		Log_Str( wostr );
+	}
+	std::string s;
+	while( iSnmpdConf.good() && !iSnmpdConf.eof())
+	{
+		std::getline( iSnmpdConf, s );
+		wostr << wsFunction << L": " << ToWiden( s.c_str());
+		Log_Str( wostr );
+		if( iSnmpdConf.gcount() < 1 )
+			break;
+	}
         //--------------------------------------------//
-        ReleaseStr( wszTrapSink );
-    }
-    else
-    {
-        wostr << wsFunction << L"\tFailed to GetProperty( TRAPRECEIVERS )" ;
-        Log_Str ( wostr );
-    }
-    
     UINT er = SUCCEEDED(hResult) ? ERROR_SUCCESS : ERROR_INSTALL_FAILURE;
-
+	wostr << wsFunction << L" er = " << ((er == ERROR_SUCCESS ) ? L"ERROR_SUCCESS" : L"ERROR_INSTALL_FAILURE" );
+	Log_Str( wostr );
     return WcaFinalize(er);
 }
 
@@ -2495,7 +2497,8 @@ extern "C" UINT __stdcall CA_WriteSNMPConfigFile (MSIHANDLE hInstall)
                   "#   snmp agent." << std::endl << std::endl <<
                   "# rocommunity: a SNMPv1/SNMPv2c read-only access community name" << std::endl << 
                   "#   arguments:  community [default|hostname|network/bits] [oid]" << std::endl << 
-                  "rocommunity public" << std::endl;
+                  "rocommunity public" << std::endl <<
+				  "rwcommunity gandalf localhost" << std::endl;
 
     wchar_t *wszTrapSink = NULL,       // arguments: community-string
             *wszAgents = NULL;   // arguments: [transport:]port[@interface/address],... 
@@ -2535,6 +2538,10 @@ extern "C" UINT __stdcall CA_WriteSNMPConfigFile (MSIHANDLE hInstall)
         }
         if( i )
             oSnmpdConf << std::endl;
+			
+		if( wstrAgents.find( TEXT( "127.0.0.1" )) == std::string::npos )
+			oSnmpdConf << "agentaddress 127.0.0.1" << std::endl;
+			
         ReleaseStr( wszAgents );
     }
     
-- 
2.41.0.windows.1

