From 39c3f83a7209e9abf680d8a105385c80a3d25603 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Fri, 21 Aug 2015 11:38:13 +0000
Subject: [PATCH 0676/1076] MANTIS 37866 Mantis 37866: serialcon: reconnect on
 real COM port not possible

Changes in matAsync:
- The open() function first checks, if the port is already open. If yes, do nothing and return IGNORED.
- The close() function first checks, if the port is open. If not, do nothing and return IGNORED.
- The close() function only returns, if all read- and write- functions have returned. Thus it should be perfectly ok, to call close() immediately followed by another open().
- First thing in read- and write-fucntions is to check, if the port is currently open. Otherwise return ERROR.
- Reduce compiler warnings, replace the use of "unsecure" functions sprintf(), strcpy(), and fopen() by recommended alternatives.

git-svn-id: svn://localhost/SelfServiceCommon/trunk@883 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/SerialCon/src/matAsyncW32.c    | 182 ++++++++++++++----
 1 file changed, 149 insertions(+), 33 deletions(-)

diff --git a/SelfServiceCommon/Massai/cpp/SerialCon/src/matAsyncW32.c b/SelfServiceCommon/Massai/cpp/SerialCon/src/matAsyncW32.c
index 80c391ad..4a624fb5 100644
--- a/SelfServiceCommon/Massai/cpp/SerialCon/src/matAsyncW32.c
+++ b/SelfServiceCommon/Massai/cpp/SerialCon/src/matAsyncW32.c
@@ -24,9 +24,23 @@
 
 #include <windows.h>
 #include <stdio.h>
+#include <share.h>
 
 
 
+#define BUFSIZE_LASTERR        64
+
+#define ASSERT_SESSION_OPEN( x ) \
+   if( H->SessionStatus != SESSION_STATUS_OPENED ) \
+   { \
+      strcpy_s \
+         ( \
+            H->szLastError, BUFSIZE_LASTERR, \
+            x##" denied - port not opened" \
+         ); \
+      return MATRC_ERROR; \
+   }
+
 #define PREFIX_RX       "        RX:"
 #define PREFIX_TX       "TX:"
 #define TRACE1(X)        if( H->FTrace )\
@@ -113,7 +127,7 @@ struct matAsyncPrivate
    /*
     * Keep the last error string
     */
-   char              szLastError[64];
+   char              szLastError[BUFSIZE_LASTERR];
    /*
     * File handle for low-level traces.
     */
@@ -158,6 +172,18 @@ struct matAsyncPrivate
     */
    mHRTimer_Handle   HandleHRT;
 #endif
+   /*
+    * Plausibility check.
+    */
+   enum
+   {
+      SESSION_STATUS_NONE,
+      SESSION_STATUS_CREATED,
+      SESSION_STATUS_CLOSING,
+      SESSION_STATUS_CLOSED,
+      SESSION_STATUS_OPENING,
+      SESSION_STATUS_OPENED
+   }                 SessionStatus;
 };
 
 
@@ -208,22 +234,52 @@ static void fillError
    switch( LastError )
    {
    case ERROR_INVALID_FUNCTION:             /* 1 */
-      sprintf( H->szLastError, "%s INVALID_FUNCTION", Txt );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s INVALID_FUNCTION",
+            Txt
+         );
       break;
    case ERROR_FILE_NOT_FOUND:               /* 2 */
-      sprintf( H->szLastError, "%s FILE_NOT_FOUND", Txt );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s FILE_NOT_FOUND",
+            Txt
+         );
       break;
    case ERROR_PATH_NOT_FOUND:               /* 3 */
-      sprintf( H->szLastError, "%s PATH_NOT_FOUND", Txt );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s PATH_NOT_FOUND",
+            Txt
+         );
       break;
    case ERROR_ACCESS_DENIED:                /* 5 */
-      sprintf( H->szLastError, "%s ACCESS_DENIED", Txt );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s ACCESS_DENIED",
+            Txt
+         );
       break;
    case ERROR_INVALID_HANDLE:               /* 6 */
-      sprintf( H->szLastError, "%s INVALID_HANDLE", Txt );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s INVALID_HANDLE",
+            Txt
+         );
       break;
    case ERROR_INVALID_PARAMETER:            /* 87 */
-      sprintf( H->szLastError, "%s INVALID_PARAMETER", Txt );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s INVALID_PARAMETER",
+            Txt
+         );
       break;
    case ERROR_OPERATION_ABORTED:            /* 995 */
       {
@@ -233,34 +289,58 @@ static void fillError
             switch( CommError )
             {
             case CE_BREAK:
-               sprintf( H->szLastError, "%s BREAK detected", Txt );
+               sprintf_s
+                  (
+                     H->szLastError, BUFSIZE_LASTERR,
+                     "%s BREAK detected",
+                     Txt
+                  );
                break;
             default:
-               sprintf( H->szLastError, "%s OPERATION_ABORTED %luX",
-                        Txt, CommError );
+               sprintf_s
+                  (
+                     H->szLastError, BUFSIZE_LASTERR,
+                     "%s OPERATION_ABORTED %luX",
+                     Txt, CommError
+                  );
             }
          }
          else
          {
-            sprintf
-            (
-               H->szLastError,
-               "%s OPERATION_ABORTED %luX clr err %lu",
-               Txt,
-               CommError,
-               GetLastError()
-            );
+            sprintf_s
+               (
+                  H->szLastError, BUFSIZE_LASTERR,
+                  "%s OPERATION_ABORTED %luX clr err %lu",
+                  Txt,
+                  CommError,
+                  GetLastError()
+               );
          }
       }
       break;
    case ERROR_IO_INCOMPLETE:                /* 996 */
-      sprintf( H->szLastError, "%s IO_INCOMPLETE", Txt );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s IO_INCOMPLETE",
+            Txt
+         );
       break;
    case ERROR_IO_PENDING:                   /* 997 */
-      sprintf( H->szLastError, "%s IO_PENDING", Txt );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s IO_PENDING",
+            Txt
+         );
       break;
    default:
-      sprintf( H->szLastError, "%s WinError:%lu", Txt, LastError );
+      sprintf_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "%s WinError:%lu",
+            Txt, LastError
+         );
    }
    TRACE2( "Error: %s", H->szLastError )
 }
@@ -542,6 +622,7 @@ mtHdl matAsyncCreate( void )
 #ifdef USE_MHRTIMER
       H->HandleHRT = mHRTimer_Create( HRTIMER_DIGITS );
 #endif
+      H->SessionStatus = SESSION_STATUS_CREATED;
    }
    return H;
 }
@@ -555,13 +636,10 @@ mtHdl matAsyncCreate( void )
 **/
 void matAsyncDelete( mtHdl H )
 {
-   if( H->CommH )
-      matAsyncClose( H );
-   WaitForSingleObject( H->ReadMutex, INFINITE );
-   WaitForSingleObject( H->ReadStateMutex, INFINITE );
-   WaitForSingleObject( H->WriteMutex, INFINITE );
+   matAsyncClose( H );
    if( H->FTrace )
       fclose( H->FTrace );
+   H->SessionStatus = SESSION_STATUS_NONE;
    free( H );
 }
 
@@ -577,6 +655,19 @@ MATRC matAsyncOpen( mtHdl H )
    MATRC Ret;
    DWORD Bitrate;
    TRACE1( "open" )
+   if (
+         ( H->SessionStatus != SESSION_STATUS_CLOSED ) &&
+         ( H->SessionStatus != SESSION_STATUS_CREATED )
+      )
+   {
+      strcpy_s
+         (
+            H->szLastError, BUFSIZE_LASTERR,
+            "Open denied - port not closed"
+         );
+      return MATRC_IGNORED;
+   }
+   H->SessionStatus = SESSION_STATUS_OPENING;
    if( H->szBitrate[0] )
       Bitrate = (DWORD)atol( H->szBitrate );
    else
@@ -715,20 +806,28 @@ MATRC matAsyncOpen( mtHdl H )
    Ret = setupLnRTS( H );
    if( Ret != MATRC_OK )
       return Ret;
+   H->SessionStatus = SESSION_STATUS_OPENED;
    return MATRC_OK;
 }
 
 
-static closeHandle(HANDLE* handle)
+
+/**
+ *
+ * Close a handle, avoid to close it multiple times.
+ *
+**/
+static void closeHandle( HANDLE * handle )
 {
-  if(*handle != INVALID_HANDLE_VALUE)
-  {
-    CloseHandle(*handle);
-    *handle = INVALID_HANDLE_VALUE;
-  }
+   if( *handle != INVALID_HANDLE_VALUE )
+   {
+      CloseHandle( *handle );
+      *handle = INVALID_HANDLE_VALUE;
+   }
 }
 
 
+
 /**
  *
  * Public function.
@@ -737,10 +836,24 @@ static closeHandle(HANDLE* handle)
 MATRC matAsyncClose ( mtHdl H )
 {
    TRACE1( "close" )
+   if( H->SessionStatus != SESSION_STATUS_OPENED )
+   {
+      return MATRC_IGNORED;
+   }
+   H->SessionStatus = SESSION_STATUS_CLOSING;
    closeHandle( &H->OverlapRx.hEvent );
    closeHandle( &H->OverlapSt.hEvent );
    closeHandle( &H->OverlapTx.hEvent );
    closeHandle( &H->CommH );
+   /* Wait for all data calls to return */
+   WaitForSingleObject( H->ReadMutex, INFINITE );
+   WaitForSingleObject( H->ReadStateMutex, INFINITE );
+   WaitForSingleObject( H->WriteMutex, INFINITE );
+   /* And free the mutexes for a possible new session. */
+   ReleaseMutex( H->ReadMutex );
+   ReleaseMutex( H->ReadStateMutex );
+   ReleaseMutex( H->WriteMutex );
+   H->SessionStatus = SESSION_STATUS_CLOSED;
    return MATRC_OK;
 }
 
@@ -847,7 +960,7 @@ MATRC matAsyncSet( mtHdl H, MTCONST char * Key, MTCONST char * Val )
    {
       if( !Val ) return MATRC_PARAMETER_ERROR;
       if( !Val[0] ) return MATRC_PARAMETER_STRING_TOO_SHORT;
-      H->FTrace = fopen( Val, "w" );
+      H->FTrace = _fsopen( Val, "w", _SH_DENYWR );
       if( H->FTrace )
          return MATRC_OK;
       else
@@ -918,6 +1031,7 @@ MATRC matAsyncRead( mtHdl H, mtDta * pDst, mtLen * pMaxNumberRead )
    DWORD NumberRead;
    DWORD const MaxNumberRead = *pMaxNumberRead;
    MATRC Return = MATRC_NO_DATA;
+   ASSERT_SESSION_OPEN( "Read" )
    WaitForSingleObject( H->ReadMutex, INFINITE );
    if
    (
@@ -1044,6 +1158,7 @@ MATRC matAsyncReadStatus( mtHdl H, mtSta * pStateIn )
 {
    mtSta const StateIn = *pStateIn;
    MATRC Return = MATRC_OK;
+   ASSERT_SESSION_OPEN( "ReadStatus" )
    WaitForSingleObject( H->ReadStateMutex, INFINITE );
    TRACE1( "ST ..." )
    if( !(StateIn & MASYNC_LINESTATE_INITIALIZED ) )
@@ -1141,6 +1256,7 @@ MATRC matAsyncWrite( mtHdl H, MTCONST mtDta * pSrc, mtLen *pnSrc )
    DWORD NumberWritten;
    DWORD const NumberToWrite = *pnSrc;
    MATRC Return = MATRC_NO_DATA;
+   ASSERT_SESSION_OPEN( "Write" )
    WaitForSingleObject( H->WriteMutex, INFINITE );
    if
    (
-- 
2.41.0.windows.1

