From ab064e335c4ca029a4a49609d9fe06149bb8c048 Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 15 Dec 2010 17:12:41 +0000
Subject: [PATCH 0071/1076] AEAParser: use TraceInterface

git-svn-id: svn://localhost/SelfServiceCommon/trunk@89 90b65887-3827-0410-9a23-83215b262276
---
 .../inc/AEAParser/aeaBagtagPectab.h           |  22 +-
 .../inc/AEAParser/aeaBoardingPassPectab.h     |  18 +-
 .../inc/AEAParser/aeaBoardingPassTemplate.h   |  16 +-
 .../Interfaces/inc/AEAParser/aeaLogo.h        |   7 +-
 .../Interfaces/inc/AEAParser/aeaSimulator.h   |   9 +-
 .../Interfaces/inc/Tools/TraceClient.h        | 227 ++++++++++++
 .../Interfaces/inc/Tools/TraceDelegate.h      | 227 ++++++++++++
 .../Interfaces/inc/Tools/TraceHandle.h        | 228 ++++++++++++
 .../Interfaces/inc/Tools/TraceInterface.h     | 225 ++++++++++++
 .../Interfaces/inc/trc/TraceClt.h             |  45 +--
 .../Interfaces/inc/trc/TrcHdlClt.h            |  30 +-
 .../Interfaces/inc/trc/tracedef.h             |  42 +++
 .../Massai/cpp/AEAParser/inc/aeaBinSetup.h    |   6 +-
 .../Massai/cpp/AEAParser/inc/aeaContext.h     |  22 +-
 .../AEAParser/inc/aeaSimulator_BagtagImpl.h   |   2 +-
 .../inc/aeaSimulator_BoardingPassImpl.h       |   4 +-
 .../cpp/AEAParser/inc/aeaSimulator_Impl.h     |   8 +
 .../Massai/cpp/AEAParser/makefile.mak         |   4 +-
 .../cpp/AEAParser/src/AEASimulatorTest.cpp    |   6 +-
 .../cpp/AEAParser/src/TestAEASimulator.cpp    |   8 +-
 .../cpp/AEAParser/src/aeaBagtagPectab.cpp     | 155 +++++----
 .../Massai/cpp/AEAParser/src/aeaBinSetup.cpp  |  21 +-
 .../AEAParser/src/aeaBoardingPassPectab.cpp   |  94 ++---
 .../AEAParser/src/aeaBoardingPassTemplate.cpp | 108 +++---
 .../Massai/cpp/AEAParser/src/aeaContext.cpp   | 126 +++----
 .../Massai/cpp/AEAParser/src/aeaLogo.cpp      |  12 +-
 .../Massai/cpp/AEAParser/src/aeaSimulator.cpp |   5 +
 .../AEAParser/src/aeaSimulator_BagtagImpl.cpp |  45 +--
 .../src/aeaSimulator_BoardingPassImpl.cpp     |  73 ++--
 .../cpp/AEAParser/src/aeaSimulator_Impl.cpp   |  19 +-
 .../Massai/cpp/Tools/makefile.mak             |   6 +-
 .../Massai/cpp/Tools/src/TraceClient.cpp      | 300 ++++++++++++++++
 .../Massai/cpp/Tools/src/TraceDelegate.cpp    | 328 ++++++++++++++++++
 .../Massai/cpp/Tools/src/TraceHandle.cpp      | 302 ++++++++++++++++
 .../Massai/cpp/Tools/src/TraceInterface.cpp   | 229 ++++++++++++
 35 files changed, 2540 insertions(+), 439 deletions(-)
 create mode 100644 SelfServiceCommon/Interfaces/inc/Tools/TraceClient.h
 create mode 100644 SelfServiceCommon/Interfaces/inc/Tools/TraceDelegate.h
 create mode 100644 SelfServiceCommon/Interfaces/inc/Tools/TraceHandle.h
 create mode 100644 SelfServiceCommon/Interfaces/inc/Tools/TraceInterface.h
 create mode 100644 SelfServiceCommon/Interfaces/inc/trc/tracedef.h
 create mode 100644 SelfServiceCommon/Massai/cpp/Tools/src/TraceClient.cpp
 create mode 100644 SelfServiceCommon/Massai/cpp/Tools/src/TraceDelegate.cpp
 create mode 100644 SelfServiceCommon/Massai/cpp/Tools/src/TraceHandle.cpp
 create mode 100644 SelfServiceCommon/Massai/cpp/Tools/src/TraceInterface.cpp

diff --git a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBagtagPectab.h b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBagtagPectab.h
index 85c5461a..ddc04186 100644
--- a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBagtagPectab.h
+++ b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBagtagPectab.h
@@ -26,6 +26,10 @@
 
 namespace MASSAI
 {
+  namespace trace
+  {
+    class TraceDelegate;
+  }
   namespace AEA
   {
     class AEAPrintProcessorContext;
@@ -35,13 +39,13 @@ namespace MASSAI
     {
       public:
         BagTagPectabField();
-        static BagTagPectabField* readPectabField(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        static BagTagPectabField* readPectabField(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
         const std::string& getId() const;
         bool mirror() const;
       protected:
         void setMirror(bool mirror);
         std::string incrementContent(const std::string& content, int increment, int fieldLength) const;
-        void readElementReference(char referenceChar, const std::string& text, StringList& referenceList, StringList& textList) const;
+        void readElementReference(char referenceChar, const std::string& text, StringList& referenceList, StringList& textList, MASSAI::trace::TraceDelegate& trace) const;
         std::string m_elementId;
         bool m_mirror;
     };
@@ -51,7 +55,7 @@ namespace MASSAI
     {
       public:
         BagTagCharacter();
-        bool readBagTagCharacter(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readBagTagCharacter(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         Orientation getPrintOrientation() const;
         HorizontalAlignment getHorizontalAlignment() const;
@@ -79,7 +83,7 @@ namespace MASSAI
     {
       public:
         BagTagLogo();
-        bool readBagTagLogo(char referenceChar,char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readBagTagLogo(char referenceChar,char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         Orientation getPrintOrientation() const;
         HorizontalAlignment getHorizontalAlignment() const;
@@ -101,7 +105,7 @@ namespace MASSAI
     {
       public:
         BagTagSeparation();
-        bool readBagTagSeparation(char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readBagTagSeparation(char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         Orientation getPrintOrientation() const;
         HorizontalAlignment getHorizontalAlignment() const;
@@ -119,8 +123,8 @@ namespace MASSAI
     {
       public:
         BagTagBarcodeDefinition();
-        bool readBarcodeType(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
-        bool readBarcodeFormat(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readBarcodeType(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
+        bool readBarcodeFormat(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         int getX() const;
         int getY() const;
@@ -144,7 +148,7 @@ namespace MASSAI
     {
       public:
         BagTagBarcode();
-        bool readBagTagBarcode(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readBagTagBarcode(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         const BagTagBarcodeDefinition& getBarcode() const;
         Orientation getPrintOrientation() const;
@@ -172,7 +176,7 @@ namespace MASSAI
     {
       public:
         BagTagPectabData();
-        bool readPectabData(const std::string& contextId, const std::string& pectabCmd, AEAPrintProcessorContext& processor) throw(ParseException);
+        bool readPectabData(const std::string& contextId, const std::string& pectabCmd, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace) throw(ParseException);
         const std::string& pectab() const;
         const std::string& pectabId() const;
         const std::string& pectabVersion() const;
diff --git a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBoardingPassPectab.h b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBoardingPassPectab.h
index 82fbc9cc..bd70e0f1 100644
--- a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBoardingPassPectab.h
+++ b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBoardingPassPectab.h
@@ -26,6 +26,10 @@
 
 namespace MASSAI
 {
+  namespace trace
+  {
+    class TraceDelegate;
+  }
   namespace AEA
   {
     class AEAPrintProcessorContext;
@@ -33,7 +37,7 @@ namespace MASSAI
     {
       public:
         PectabPrintPosition();
-        bool readPectabPrintPosition(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readPectabPrintPosition(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
         int getRow() const;
         int getColumn() const;
       private:
@@ -44,7 +48,7 @@ namespace MASSAI
     {
       public:
         PectabMagStripePosition();
-        bool readPectabMagStripePosition(int fieldLength, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readPectabMagStripePosition(int fieldLength, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
         int getTrack() const;
         int getBlock() const;
         int getPosition() const;
@@ -60,8 +64,8 @@ namespace MASSAI
     {
       public:
         PectabBarcodeDefinition();
-        bool readBarcodeType(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
-        bool readBarcodeFormat(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readBarcodeType(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
+        bool readBarcodeFormat(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         bool useCheckDigit() const;
         int getHeight() const;
@@ -82,8 +86,8 @@ namespace MASSAI
     {
       public:
         PectabField();
-        bool readPectabField(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
-        bool readFont(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readPectabField(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
+        bool readFont(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
         const std::string& getId() const;
 
         int getMaximumLength() const;
@@ -105,7 +109,7 @@ namespace MASSAI
     {
       public:
         PectabData();
-        bool PectabData::readPectabData(const std::string& contextId, const std::string& pectabCmd, AEAPrintProcessorContext& processor) throw(ParseException);
+        bool PectabData::readPectabData(const std::string& contextId, const std::string& pectabCmd, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace) throw(ParseException);
 
         const std::string& pectab() const;
         const std::string& pectabId() const;
diff --git a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBoardingPassTemplate.h b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBoardingPassTemplate.h
index d9f1aaa9..13ea5d95 100644
--- a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBoardingPassTemplate.h
+++ b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaBoardingPassTemplate.h
@@ -25,6 +25,10 @@
 
 namespace MASSAI
 {
+  namespace trace
+  {
+    class TraceDelegate;
+  }
   namespace AEA
   {
     class AEAPrintProcessorContext;
@@ -32,7 +36,7 @@ namespace MASSAI
     {
       public:
         TemplateField();
-        TemplateField* readTemplateField(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        TemplateField* readTemplateField(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
         const std::string& getId() const;
       private:
         std::string m_elementId;
@@ -41,7 +45,7 @@ namespace MASSAI
     {
       public:
         TemplateLogo();
-        bool readTemplateLogo(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readTemplateLogo(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         int getLeft() const;
         int getBottom() const;
@@ -55,7 +59,7 @@ namespace MASSAI
     {
       public:
         TemplateLine();
-        bool readTemplateLine(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readTemplateLine(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         int getX1() const;
         int getY1() const;
@@ -73,7 +77,7 @@ namespace MASSAI
     {
       public:
         TemplateBox();
-        bool readTemplateBox(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readTemplateBox(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         int getLeft() const;
         int getBottom() const;
@@ -91,7 +95,7 @@ namespace MASSAI
     {
       public:
         TemplateText();
-        bool readTemplateText(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd);
+        bool readTemplateText(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace);
 
         int getLeft() const;
         int getBottom() const;
@@ -123,7 +127,7 @@ namespace MASSAI
     {
       public:
         TemplateData();
-        bool readTemplateData(const std::string& templateCmd, AEAPrintProcessorContext& processor) throw(ParseException);
+        bool readTemplateData(const std::string& templateCmd, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace) throw(ParseException);
         const std::string& templateId() const;
 
         const TemplateFieldMap& getFields() const;
diff --git a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaLogo.h b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaLogo.h
index 20932d44..2204c504 100644
--- a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaLogo.h
+++ b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaLogo.h
@@ -25,14 +25,19 @@
 
 namespace MASSAI
 {
+  namespace trace
+  {
+    class TraceDelegate;
+  }
   namespace AEA
   {
+
     class AEAPrintProcessorContext;
     class LogoData
     {
       public:
         LogoData();
-        bool readLogoData(const std::string& logoCmd, AEAPrintProcessorContext& processor) throw(ParseException);
+        bool readLogoData(const std::string& logoCmd, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace) throw(ParseException);
         const std::string& logo() const;
         // const std::string& logoInBase64() const;
         const std::string& logoId() const;
diff --git a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaSimulator.h b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaSimulator.h
index dad4a1ba..8ce4ac4c 100644
--- a/SelfServiceCommon/Interfaces/inc/AEAParser/aeaSimulator.h
+++ b/SelfServiceCommon/Interfaces/inc/AEAParser/aeaSimulator.h
@@ -22,8 +22,13 @@
 #include "aeaStock.h"
 #include "aeaResponse.h"
 
+
 namespace MASSAI
 {
+  namespace trace
+  {
+    class TraceInterface;
+  }
   namespace AEA
   {
     class AEAPrintProcessor;
@@ -42,7 +47,6 @@ namespace MASSAI
         void setContext(const std::string& contextId, ContextType type= BOARDINGPASS);
         const std::string& getContext(ContextType type= BOARDINGPASS) const;
         AEAResult sendCommand(const std::string& cmd, ContextType type= BOARDINGPASS);
-        void setPrintProcessor(AEAPrintProcessor* pProcessor);
         //  AEAResult sendTracks(const Tracks& tracks);  // type BOARDINGPASS
 
         const LogoData* getLogoData(const std::string& context, const std::string& id, ContextType type= BOARDINGPASS) const;
@@ -52,6 +56,9 @@ namespace MASSAI
 
         StockSet getStocks(Media media) const;
         StockSetting getMedia(Stock stock) const;
+
+        void setPrintProcessor(AEAPrintProcessor* pProcessor);
+        void setTrace(MASSAI::trace::TraceInterface* pTrace);
       private:
         class _AEAPrintSimulation* getSimulation(ContextType type);
         const class _AEAPrintSimulation* getSimulation(ContextType type) const;
diff --git a/SelfServiceCommon/Interfaces/inc/Tools/TraceClient.h b/SelfServiceCommon/Interfaces/inc/Tools/TraceClient.h
new file mode 100644
index 00000000..e982ae88
--- /dev/null
+++ b/SelfServiceCommon/Interfaces/inc/Tools/TraceClient.h
@@ -0,0 +1,227 @@
+//---------------------------------------------------------------------------
+//
+//  file:       TraceClient.h
+//
+//  purpose:    interface for traceing
+//
+//  date:       15.12.2010
+//
+//  author:     Materna Information & Communications
+//
+//  history:
+//---------------------------------------------------------------------------
+
+
+#if defined(SHOW_INCLUDE_FILES)
+#pragma message("including: " __FILE__)
+#endif
+#ifndef TRACECLIENT_H_INCLUDED
+#define TRACECLIENT_H_INCLUDED
+
+#include "Tools/TraceInterface.h"
+
+namespace MASSAI
+{
+  namespace trace
+  {
+    class TraceClient: public TraceInterface
+    {
+      public:
+        TraceClient();
+        TraceClient(const char* pszApplication);
+        virtual ~TraceClient();
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceText
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           const char* pszText
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+           resulting string must be smaller than 4096 byte
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTrace
+        (
+          long lTraceLevel,
+          const char* pszFile,
+          short  sLine,
+          const char* pszFunction,
+          const char* pszFormat,
+          ...
+        );
+        /*
+        ---------------------------------------------------------------------------
+           Trace Dump
+        ---------------------------------------------------------------------------
+        */
+        virtual void dumpTrace
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+        /*
+        ---------------------------------------------------------------------------
+          Start new files
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void startNewTraceFile(long lTraceLevel);
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceTextForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           const char* pszText
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+           resulting string must be smaller than 4096 byte
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceForTopic
+        (
+          const char* pszTopic,
+          const char* pszFile,
+          short  sLine,
+          const char* pszFunction,
+          const char* pszFormat,
+          ...
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Dump
+        ---------------------------------------------------------------------------
+        */
+        virtual void dumpTraceForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+        /*
+        ---------------------------------------------------------------------------
+          Start new files
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void startNewTraceFileForTopic(const char* pszTopic);
+
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace encypted
+        ---------------------------------------------------------------------------
+        */
+        virtual void cryptTrace
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace encypted
+        ---------------------------------------------------------------------------
+        */
+        virtual void cryptTraceForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           move file
+        ---------------------------------------------------------------------------
+        */
+
+        virtual void moveTrace
+        (
+           const char* pszPath
+        );
+
+
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace credit card track
+        ---------------------------------------------------------------------------
+        */
+        virtual void traceTrack
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long trackid,
+           const char* pszTrack
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace credit card track
+        ---------------------------------------------------------------------------
+        */
+        virtual void traceTrackForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long trackid,
+           const char* pszTrack
+        );
+      private:
+        bool m_close;
+    };
+  }
+}
+#endif
\ No newline at end of file
diff --git a/SelfServiceCommon/Interfaces/inc/Tools/TraceDelegate.h b/SelfServiceCommon/Interfaces/inc/Tools/TraceDelegate.h
new file mode 100644
index 00000000..62c56f58
--- /dev/null
+++ b/SelfServiceCommon/Interfaces/inc/Tools/TraceDelegate.h
@@ -0,0 +1,227 @@
+//---------------------------------------------------------------------------
+//
+//  file:       TraceDelegate.h
+//
+//  purpose:    interface for traceing
+//
+//  date:       15.12.2010
+//
+//  author:     Materna Information & Communications
+//
+//  history:
+//---------------------------------------------------------------------------
+
+
+#if defined(SHOW_INCLUDE_FILES)
+#pragma message("including: " __FILE__)
+#endif
+#ifndef TRACEDELEGATE_H_INCLUDED
+#define TRACEDELEGATE_H_INCLUDED
+
+#include "trc/tracedef.h"
+
+namespace MASSAI
+{
+  namespace trace
+  {
+    class TraceInterface;
+    class TraceDelegate
+    {
+      public:
+        TraceDelegate(TraceInterface* pDelegate);
+        ~TraceDelegate();
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+
+        ---------------------------------------------------------------------------
+        */
+        void writeTraceText
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           const char* pszText
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+           resulting string must be smaller than 4096 byte
+        ---------------------------------------------------------------------------
+        */
+        void writeTrace
+        (
+          long lTraceLevel,
+          const char* pszFile,
+          short  sLine,
+          const char* pszFunction,
+          const char* pszFormat,
+          ...
+        );
+        /*
+        ---------------------------------------------------------------------------
+           Trace Dump
+        ---------------------------------------------------------------------------
+        */
+        void dumpTrace
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+        /*
+        ---------------------------------------------------------------------------
+          Start new files
+
+        ---------------------------------------------------------------------------
+        */
+        void _stdcall startNewTraceFile(long lTraceLevel);
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+
+        ---------------------------------------------------------------------------
+        */
+        void writeTraceTextForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           const char* pszText
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+           resulting string must be smaller than 4096 byte
+        ---------------------------------------------------------------------------
+        */
+        void writeTraceForTopic
+        (
+          const char* pszTopic,
+          const char* pszFile,
+          short  sLine,
+          const char* pszFunction,
+          const char* pszFormat,
+          ...
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Dump
+        ---------------------------------------------------------------------------
+        */
+        void dumpTraceForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+        /*
+        ---------------------------------------------------------------------------
+          Start new files
+
+        ---------------------------------------------------------------------------
+        */
+        void startNewTraceFileForTopic(const char* pszTopic);
+
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace encypted
+        ---------------------------------------------------------------------------
+        */
+        void cryptTrace
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace encypted
+        ---------------------------------------------------------------------------
+        */
+        void cryptTraceForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           move file
+        ---------------------------------------------------------------------------
+        */
+
+        void moveTrace
+        (
+           const char* pszPath
+        );
+
+
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace credit card track
+        ---------------------------------------------------------------------------
+        */
+        void traceTrack
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long trackid,
+           const char* pszTrack
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace credit card track
+        ---------------------------------------------------------------------------
+        */
+        void traceTrackForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long trackid,
+           const char* pszTrack
+        );
+      private:
+        MASSAI::trace::TraceInterface* m_pDelegate;
+    };
+  }
+}
+#endif
\ No newline at end of file
diff --git a/SelfServiceCommon/Interfaces/inc/Tools/TraceHandle.h b/SelfServiceCommon/Interfaces/inc/Tools/TraceHandle.h
new file mode 100644
index 00000000..f34ba01b
--- /dev/null
+++ b/SelfServiceCommon/Interfaces/inc/Tools/TraceHandle.h
@@ -0,0 +1,228 @@
+//---------------------------------------------------------------------------
+//
+//  file:       TraceHandle.h
+//
+//  purpose:    interface for traceing
+//
+//  date:       15.12.2010
+//
+//  author:     Materna Information & Communications
+//
+//  history:
+//---------------------------------------------------------------------------
+
+
+#if defined(SHOW_INCLUDE_FILES)
+#pragma message("including: " __FILE__)
+#endif
+#ifndef TRACECLIENT_H_INCLUDED
+#define TRACECLIENT_H_INCLUDED
+
+#include "Tools/TraceInterface.h"
+
+namespace MASSAI
+{
+  namespace trace
+  {
+    class TraceHandle: public TraceInterface
+    {
+      public:
+        TraceHandle(int handle);
+        TraceHandle(const char* pszApplication);
+        virtual ~TraceHandle();
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceText
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           const char* pszText
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+           resulting string must be smaller than 4096 byte
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTrace
+        (
+          long lTraceLevel,
+          const char* pszFile,
+          short  sLine,
+          const char* pszFunction,
+          const char* pszFormat,
+          ...
+        );
+        /*
+        ---------------------------------------------------------------------------
+           Trace Dump
+        ---------------------------------------------------------------------------
+        */
+        virtual void dumpTrace
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+        /*
+        ---------------------------------------------------------------------------
+          Start new files
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void startNewTraceFile(long lTraceLevel);
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceTextForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           const char* pszText
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+           resulting string must be smaller than 4096 byte
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceForTopic
+        (
+          const char* pszTopic,
+          const char* pszFile,
+          short  sLine,
+          const char* pszFunction,
+          const char* pszFormat,
+          ...
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Dump
+        ---------------------------------------------------------------------------
+        */
+        virtual void dumpTraceForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+        /*
+        ---------------------------------------------------------------------------
+          Start new files
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void startNewTraceFileForTopic(const char* pszTopic);
+
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace encypted
+        ---------------------------------------------------------------------------
+        */
+        virtual void cryptTrace
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace encypted
+        ---------------------------------------------------------------------------
+        */
+        virtual void cryptTraceForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           move file
+        ---------------------------------------------------------------------------
+        */
+
+        virtual void moveTrace
+        (
+           const char* pszPath
+        );
+
+
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace credit card track
+        ---------------------------------------------------------------------------
+        */
+        virtual void traceTrack
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long trackid,
+           const char* pszTrack
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace credit card track
+        ---------------------------------------------------------------------------
+        */
+        virtual void traceTrackForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long trackid,
+           const char* pszTrack
+        );
+      private:
+        int m_handle;
+        bool m_close;
+    };
+  }
+}
+#endif
\ No newline at end of file
diff --git a/SelfServiceCommon/Interfaces/inc/Tools/TraceInterface.h b/SelfServiceCommon/Interfaces/inc/Tools/TraceInterface.h
new file mode 100644
index 00000000..258acd72
--- /dev/null
+++ b/SelfServiceCommon/Interfaces/inc/Tools/TraceInterface.h
@@ -0,0 +1,225 @@
+//---------------------------------------------------------------------------
+//
+//  file:       TraceInterface.h
+//
+//  purpose:    interface for traceing
+//
+//  date:       15.12.2010
+//
+//  author:     Materna Information & Communications
+//
+//  history:
+//---------------------------------------------------------------------------
+
+
+#if defined(SHOW_INCLUDE_FILES)
+#pragma message("including: " __FILE__)
+#endif
+#ifndef TRACEINTERFACE_H_INCLUDED
+#define TRACEINTERFACE_H_INCLUDED
+
+#include "trc/tracedef.h"
+
+namespace MASSAI
+{
+  namespace trace
+  {
+
+    class TraceInterface
+    {
+      public:
+        TraceInterface();
+        virtual ~TraceInterface();
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceText
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           const char* pszText
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+           resulting string must be smaller than 4096 byte
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTrace
+        (
+          long lTraceLevel,
+          const char* pszFile,
+          short  sLine,
+          const char* pszFunction,
+          const char* pszFormat,
+          ...
+        );
+        /*
+        ---------------------------------------------------------------------------
+           Trace Dump
+        ---------------------------------------------------------------------------
+        */
+        virtual void dumpTrace
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+        /*
+        ---------------------------------------------------------------------------
+          Start new files
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void startNewTraceFile(long lTraceLevel);
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceTextForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           const char* pszText
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Text
+           resulting string must be smaller than 4096 byte
+        ---------------------------------------------------------------------------
+        */
+        virtual void writeTraceForTopic
+        (
+          const char* pszTopic,
+          const char* pszFile,
+          short  sLine,
+          const char* pszFunction,
+          const char* pszFormat,
+          ...
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace Dump
+        ---------------------------------------------------------------------------
+        */
+        virtual void dumpTraceForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+        /*
+        ---------------------------------------------------------------------------
+          Start new files
+
+        ---------------------------------------------------------------------------
+        */
+        virtual void startNewTraceFileForTopic(const char* pszTopic);
+
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace encypted
+        ---------------------------------------------------------------------------
+        */
+        virtual void cryptTrace
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace encypted
+        ---------------------------------------------------------------------------
+        */
+        virtual void cryptTraceForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long lDumpSize,
+           const char* pDump
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           move file
+        ---------------------------------------------------------------------------
+        */
+
+        virtual void moveTrace
+        (
+           const char* pszPath
+        );
+
+
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace credit card track
+        ---------------------------------------------------------------------------
+        */
+        virtual void traceTrack
+        (
+           long lTraceLevel,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long trackid,
+           const char* pszTrack
+        );
+
+
+        /*
+        ---------------------------------------------------------------------------
+           Trace credit card track
+        ---------------------------------------------------------------------------
+        */
+        virtual void traceTrackForTopic
+        (
+           const char* pszTopic,
+           const char* pszFile,
+           short  sLine,
+           const char* pszFunction,
+           long trackid,
+           const char* pszTrack
+        );
+    };
+  }
+}
+#endif
\ No newline at end of file
diff --git a/SelfServiceCommon/Interfaces/inc/trc/TraceClt.h b/SelfServiceCommon/Interfaces/inc/trc/TraceClt.h
index 6cd77e3a..2a87ac97 100644
--- a/SelfServiceCommon/Interfaces/inc/trc/TraceClt.h
+++ b/SelfServiceCommon/Interfaces/inc/trc/TraceClt.h
@@ -41,50 +41,7 @@ extern "C"
 #define TRC_OK                    0
 #define TRC_ERROR                 1
 
-/*
-   TraceLevel
-*/
-#define      No                   0
-#define      MajorError           1
-#define      MinorError           2
-#define      MajorWarning         3
-#define      MinorWarning         4
-#define      BasicRuntime         5
-#define      BasicProcess         6
-#define      SecondaryRuntime     7
-#define      SecondaryFrequent    8
-#define      All                  9
-
-
-#if defined __FUNCTION__
-/*
-   Some compilers define __FUNCTION__ ...
-*/
-#define TOPIC_HERE              __FILE__,__LINE__,__FUNCTION__
-#define MajorError_HERE         1,__FILE__,__LINE__,__FUNCTION__
-#define MinorError_HERE         2,__FILE__,__LINE__,__FUNCTION__
-#define MajorWarning_HERE       3,__FILE__,__LINE__,__FUNCTION__
-#define MinorWarning_HERE       4,__FILE__,__LINE__,__FUNCTION__
-#define BasicRuntime_HERE       5,__FILE__,__LINE__,__FUNCTION__
-#define BasicProcess_HERE       6,__FILE__,__LINE__,__FUNCTION__
-#define SecondaryRuntime_HERE   7,__FILE__,__LINE__,__FUNCTION__
-#define SecondaryFrequent_HERE  8,__FILE__,__LINE__,__FUNCTION__
-
-#else /* defined __FUNCTION__ */
-/*
-   ... some do not!
-*/
-#define TOPIC_HERE              __FILE__,__LINE__,""
-#define MajorError_HERE         1,__FILE__,__LINE__,""
-#define MinorError_HERE         2,__FILE__,__LINE__,""
-#define MajorWarning_HERE       3,__FILE__,__LINE__,""
-#define MinorWarning_HERE       4,__FILE__,__LINE__,""
-#define BasicRuntime_HERE       5,__FILE__,__LINE__,""
-#define BasicProcess_HERE       6,__FILE__,__LINE__,""
-#define SecondaryRuntime_HERE   7,__FILE__,__LINE__,""
-#define SecondaryFrequent_HERE  8,__FILE__,__LINE__,""
-#endif /* defined __FUNCTION__ */
-
+#include "trc/tracedef.h"
 
 /*
    For pszTopic do not use:
diff --git a/SelfServiceCommon/Interfaces/inc/trc/TrcHdlClt.h b/SelfServiceCommon/Interfaces/inc/trc/TrcHdlClt.h
index 3f988613..14fd5797 100644
--- a/SelfServiceCommon/Interfaces/inc/trc/TrcHdlClt.h
+++ b/SelfServiceCommon/Interfaces/inc/trc/TrcHdlClt.h
@@ -35,6 +35,8 @@ extern "C"
 #define CX_CONSTSTR char *
 #endif
 
+#include "trc/tracedef.h"
+
 /*
    Returncodes
 */
@@ -46,34 +48,6 @@ extern "C"
 #define INVALIDHANDLE_FULL -2
 typedef int trcHandle;
 
-/*
-  TraceLevel
-
-*/
-#define      No                   0
-#define      MajorError           1
-#define      MinorError           2
-#define      MajorWarning         3
-#define      MinorWarning         4
-#define      BasicRuntime         5
-#define      BasicProcess         6
-#define      SecondaryRuntime     7
-#define      SecondaryFrequent    8
-#define      All                  9
-
-#ifndef __FUNCTION__      // __FUNCTION__ is not available on all compilers
-#define __FUNCTION__ ""
-#endif
-
-#define TOPIC_HERE              __FILE__,__LINE__,__FUNCTION__
-#define MajorError_HERE         1,__FILE__,__LINE__,__FUNCTION__
-#define MinorError_HERE         2,__FILE__,__LINE__,__FUNCTION__
-#define MajorWarning_HERE       3,__FILE__,__LINE__,__FUNCTION__
-#define MinorWarning_HERE       4,__FILE__,__LINE__,__FUNCTION__
-#define BasicRuntime_HERE       5,__FILE__,__LINE__,__FUNCTION__
-#define BasicProcess_HERE       6,__FILE__,__LINE__,__FUNCTION__
-#define SecondaryRuntime_HERE   7,__FILE__,__LINE__,__FUNCTION__
-#define SecondaryFrequent_HERE  8,__FILE__,__LINE__,__FUNCTION__
 
 
 /*
diff --git a/SelfServiceCommon/Interfaces/inc/trc/tracedef.h b/SelfServiceCommon/Interfaces/inc/trc/tracedef.h
new file mode 100644
index 00000000..8815a825
--- /dev/null
+++ b/SelfServiceCommon/Interfaces/inc/trc/tracedef.h
@@ -0,0 +1,42 @@
+/*---------------------------------------------------------------------------
+
+ FILE:      tracedef.h
+
+ PURPOSE:   Class definition.
+
+
+---------------------------------------------------------------------------*/
+
+#ifndef TRACEDEF_H
+#define TRACEDEF_H
+#ifdef SHOW_INCLUDE_FILES
+#pragma message("including: " __FILE__)
+#endif
+
+#define      No                   0
+#define      MajorError           1
+#define      MinorError           2
+#define      MajorWarning         3
+#define      MinorWarning         4
+#define      BasicRuntime         5
+#define      BasicProcess         6
+#define      SecondaryRuntime     7
+#define      SecondaryFrequent    8
+#define      All                  9
+
+#ifndef __FUNCTION__      // __FUNCTION__ is not available on all compilers
+#define __FUNCTION__ ""
+#endif
+
+#define TOPIC_HERE              __FILE__,__LINE__,__FUNCTION__
+#define MajorError_HERE         1,__FILE__,__LINE__,__FUNCTION__
+#define MinorError_HERE         2,__FILE__,__LINE__,__FUNCTION__
+#define MajorWarning_HERE       3,__FILE__,__LINE__,__FUNCTION__
+#define MinorWarning_HERE       4,__FILE__,__LINE__,__FUNCTION__
+#define BasicRuntime_HERE       5,__FILE__,__LINE__,__FUNCTION__
+#define BasicProcess_HERE       6,__FILE__,__LINE__,__FUNCTION__
+#define SecondaryRuntime_HERE   7,__FILE__,__LINE__,__FUNCTION__
+#define SecondaryFrequent_HERE  8,__FILE__,__LINE__,__FUNCTION__
+
+#endif // TRACEDEF_H
+
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaBinSetup.h b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaBinSetup.h
index 8ef76fbb..03532c45 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaBinSetup.h
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaBinSetup.h
@@ -24,6 +24,10 @@
 
 namespace MASSAI
 {
+  namespace trace
+  {
+    class TraceDelegate;
+  }
   namespace AEA
   {
     struct MediaCompare
@@ -51,7 +55,7 @@ namespace MASSAI
       public:
         BinSetup();
         ~BinSetup();
-        std::string setup(const std::string& input);
+        std::string setup(const std::string& input, MASSAI::trace::TraceDelegate& trace);
         StockSet getStocks(Media media) const;
         StockSetting getMedia(Stock stock) const;
         std::string status(bool includeSCNRInfo) const;
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaContext.h b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaContext.h
index 3790cfd7..d1df497e 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaContext.h
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaContext.h
@@ -38,11 +38,11 @@ namespace MASSAI
         const std::string& contextId() const;
         const std::string& transactionCode() const;
       protected:
-        bool inputLogo(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
+        bool inputLogo(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
         bool inputTransactionCode(const std::string& cmd, AEAResult& rsp);
       private:
-        bool clearLogos(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
-        bool loadLogo(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
+        bool clearLogos(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
+        bool loadLogo(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
         bool getLogoStatus(const std::string& cmd, AEAResult& rsp);
         void logostatus(std::string& logos);
 
@@ -55,11 +55,11 @@ namespace MASSAI
     {
       public:
         BagtagAEAContext(const std::string& contextId, const std::string& transactionCode);
-        bool input(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
+        bool input(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
         const BagTagPectabData* pectab(const std::string& pectabId, const std::string& pectabVersion) const;
       private:
-        bool clearPectabs(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
-        bool loadPectab(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
+        bool clearPectabs(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
+        bool loadPectab(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
         bool getPectabStatus(const std::string& cmd, AEAResult& rsp);
         void pectabstatus(std::string& pectabs);
 
@@ -70,17 +70,17 @@ namespace MASSAI
     {
       public:
         BoardingAEAContext(const std::string& contextId, const std::string& transactionCode);
-        bool input(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
+        bool input(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
         const PectabData* pectab(const std::string& pectabId) const;
         const TemplateData* template_(const std::string& templateId) const;
       private:
-        bool clearPectabs(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
-        bool loadPectab(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
+        bool clearPectabs(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
+        bool loadPectab(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
         bool getPectabStatus(const std::string& cmd, AEAResult& rsp);
         void pectabstatus(std::string& pectabs);
 
-        bool clearTemplates(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
-        bool loadTemplate(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor);
+        bool clearTemplates(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
+        bool loadTemplate(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace);
         bool getTemplateStatus(const std::string& cmd, AEAResult& rsp);
         void templatestatus(std::string& templates);
 
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_BagtagImpl.h b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_BagtagImpl.h
index df612fa5..847c2234 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_BagtagImpl.h
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_BagtagImpl.h
@@ -36,7 +36,7 @@ namespace MASSAI
       private:
         const BagtagAEAContext* findContext(const std::string& context) const;
         BagtagAEAContext& getContext();
-        bool printTicket(const BagtagAEAContext& context, const std::string& cmd, AEAResult& rsp) throw(ParseException);
+        bool printTicket(const BagtagAEAContext& context, const std::string& cmd, AEAResult& rsp, MASSAI::trace::TraceDelegate& trace) throw(ParseException);
 
         typedef std::map<std::string, BagtagAEAContext> Contexts;
         Contexts m_contexts;
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_BoardingPassImpl.h b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_BoardingPassImpl.h
index 4c198941..8fea20c5 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_BoardingPassImpl.h
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_BoardingPassImpl.h
@@ -36,8 +36,8 @@ namespace MASSAI
       private:
         const BoardingAEAContext* findContext(const std::string& context) const;
         BoardingAEAContext& getContext();
-        bool printTicket(const BoardingAEAContext& context, const std::string& cmd, AEAResult& rsp) throw(ParseException);
-        bool printReceipt(const BoardingAEAContext& context, const std::string& cmd, AEAResult& rsp) throw(ParseException);
+        bool printTicket(const BoardingAEAContext& context, const std::string& cmd, AEAResult& rsp, MASSAI::trace::TraceDelegate& trace) throw(ParseException);
+        bool printReceipt(const BoardingAEAContext& context, const std::string& cmd, AEAResult& rsp, MASSAI::trace::TraceDelegate& trace) throw(ParseException);
 
         typedef std::map<std::string, BoardingAEAContext> Contexts;
         Contexts m_contexts;
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_Impl.h b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_Impl.h
index 8877110d..850c4d30 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_Impl.h
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/inc/aeaSimulator_Impl.h
@@ -22,6 +22,10 @@
 
 namespace MASSAI
 {
+  namespace trace
+  {
+    class TraceInterface;
+  }
   namespace AEA
   {
     class AEAPrintProcessor;
@@ -39,6 +43,9 @@ namespace MASSAI
         void setPrintProcessor(AEAPrintProcessor* processor);
         AEAPrintProcessor* getPrintProcessor();
 
+        void setTrace(MASSAI::trace::TraceInterface* pTrace);
+        MASSAI::trace::TraceInterface* getTrace();
+
       private:
         virtual AEAResult do_input(const std::string& cmd)= 0;
         std::string m_contextId;
@@ -46,6 +53,7 @@ namespace MASSAI
         Materna::MSSD::mutexSemaphore m_access;
         bool m_active;
         AEAPrintProcessor* m_pProcessor;
+        MASSAI::trace::TraceInterface* m_pTrace;
     };
   }
 }
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/makefile.mak b/SelfServiceCommon/Massai/cpp/AEAParser/makefile.mak
index 25205482..7fbb6cd7 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/makefile.mak
@@ -36,7 +36,7 @@ MY_LIB1_OBJS =  $(_OBJ)\local_def.obj \
 
 MY_BIN1 =               $(_BIN)\TestAEASimulator.exe
 
-MY_BIN1_USER_LIBS =     $(_LIB)\aeaParser.lib $(LIB_TRACE) $(LIB_TOOLS) $(LIB_SYSTOOLS)
+MY_BIN1_USER_LIBS =     $(_LIB)\aeaParser.lib $(LIB_TRACEHDL) $(LIB_TOOLS) $(LIB_SYSTOOLS)
 
 MY_BIN1_OBJS =          $(_OBJ)\TestAEASimulator.obj
 
@@ -44,7 +44,7 @@ MY_BIN1_OBJS =          $(_OBJ)\TestAEASimulator.obj
 
 MY_BIN2 =               $(_BIN)\AEASimulatorTest.exe
 
-MY_BIN2_USER_LIBS =     $(_LIB)\aeaParser.lib $(LIB_TRACE) $(LIB_SYSTOOLS)
+MY_BIN2_USER_LIBS =     $(_LIB)\aeaParser.lib $(LIB_TRACE) $(LIB_TOOLS) $(LIB_SYSTOOLS)
 
 MY_BIN2_OBJS =          $(_OBJ)\AEASimulatorTest.obj
 
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/AEASimulatorTest.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/AEASimulatorTest.cpp
index ce749d6f..617f7336 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/AEASimulatorTest.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/AEASimulatorTest.cpp
@@ -12,8 +12,8 @@
 #pragma warning (disable:4786)
 
 #include "AEAParser/aeaSimulator.h"
+#include "Tools/TraceClient.h"
 #include <iostream>
-#include "TraceClt.h"
 
 using namespace MASSAI::AEA;
 
@@ -61,8 +61,8 @@ namespace
 
 int main(int argc, char** argv)
 {
-  openTrace("AEASimulatorTest");
+  MASSAI::trace::TraceClient trace("TestAEASimulator");
+  aeaPrinter.setTrace(&trace);
   sendCommand("CTHX");
-  closeTrace();
   return 0;
 }
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/TestAEASimulator.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/TestAEASimulator.cpp
index 399d2020..1277d27c 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/TestAEASimulator.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/TestAEASimulator.cpp
@@ -16,8 +16,9 @@
 #include "AEAParser/aeaSimulator.h"
 #include "AEAParser/aeaLogo.h"
 #include "Console.h"
-#include "TraceClt.h"
 #include <iostream>
+//#include "Tools/TraceClient.h"
+#include "Tools/TraceHandle.h"
 
 using namespace MASSAI::AEA;
 
@@ -157,7 +158,9 @@ class GetPectab: public Console::SelectionCommandBase
 };
 int main(int argc, char** argv)
 {
-  openTrace("TestAEASimulator");
+  //MASSAI::trace::TraceClient trace("TestAEASimulator");
+  MASSAI::trace::TraceHandle trace("TestAEASimulator");
+  aeaPrinter.setTrace(&trace);
 
   Console::ConsoleSelection selection;
   SendCommand sendCommand;
@@ -199,6 +202,5 @@ int main(int argc, char** argv)
 
   selection.loop();
 
-  closeTrace();
   return 0;
 }
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBagtagPectab.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBagtagPectab.cpp
index 0ae8189e..68d30d61 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBagtagPectab.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBagtagPectab.cpp
@@ -15,7 +15,8 @@
 #include "AEAParser/aeaBagtagPectab.h"
 #include "AEAParser/aeaPrintProcessor.h"
 #include "aeaToken.h"
-#include "TraceClt.h"
+#include "Tools/TraceDelegate.h"
+
 
 namespace
 {
@@ -37,39 +38,39 @@ namespace MASSAI
   {
     BagTagPectabField::BagTagPectabField()
     {}
-    BagTagPectabField* BagTagPectabField::readPectabField(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    BagTagPectabField* BagTagPectabField::readPectabField(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       if(Tokenizer::readFieldId(inBegin, inEnd, outBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "field (%.1000s)", std::string(outBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "field (%.1000s)", std::string(outBegin, inBegin).c_str());
         std::string elementId= std::string(outBegin, inBegin);
         std::auto_ptr<BagTagLogo> logo= std::auto_ptr<BagTagLogo>(new BagTagLogo);
         std::auto_ptr<BagTagSeparation> line= std::auto_ptr<BagTagSeparation>(new BagTagSeparation);
         std::auto_ptr<BagTagBarcode> barcode= std::auto_ptr<BagTagBarcode>(new BagTagBarcode);
         std::auto_ptr<BagTagCharacter> text= std::auto_ptr<BagTagCharacter>(new BagTagCharacter);
         Iterator readBegin;
-        if(logo->readBagTagLogo(referenceChar, delimiter, inBegin, inEnd, readBegin, outEnd))
+        if(logo->readBagTagLogo(referenceChar, delimiter, inBegin, inEnd, readBegin, outEnd, trace))
         {
           static_cast<BagTagPectabField*>(logo.get())->m_elementId= elementId;
           return logo.release();
         }
-        else if(line->readBagTagSeparation(delimiter, inBegin, inEnd, readBegin, outEnd))
+        else if(line->readBagTagSeparation(delimiter, inBegin, inEnd, readBegin, outEnd, trace))
         {
           static_cast<BagTagPectabField*>(line.get())->m_elementId= elementId;
           return line.release();
         }
-        else if(barcode->readBagTagBarcode(referenceChar, delimiter, inBegin, inEnd, readBegin, outEnd))
+        else if(barcode->readBagTagBarcode(referenceChar, delimiter, inBegin, inEnd, readBegin, outEnd, trace))
         {
           static_cast<BagTagPectabField*>(barcode.get())->m_elementId= elementId;
           return barcode.release();
         }
-        else if(text->readBagTagCharacter(referenceChar, delimiter, inBegin, inEnd, readBegin, outEnd))
+        else if(text->readBagTagCharacter(referenceChar, delimiter, inBegin, inEnd, readBegin, outEnd, trace))
         {
           static_cast<BagTagPectabField*>(text.get())->m_elementId= elementId;
           return text.release();
         }
       }
-      wrtTrace(SecondaryRuntime_HERE, "no match");
+      trace.writeTrace(SecondaryRuntime_HERE, "no match");
       return 0;
 
     }
@@ -85,7 +86,7 @@ namespace MASSAI
     {
       m_mirror= mirror;
     }
-    void BagTagPectabField::readElementReference(char referenceChar, const std::string& text, StringList& referenceList, StringList& textList) const
+    void BagTagPectabField::readElementReference(char referenceChar, const std::string& text, StringList& referenceList, StringList& textList, MASSAI::trace::TraceDelegate& trace) const
     {
       std::string::size_type pos= 0;
       std::string::size_type oldPos= pos;
@@ -95,11 +96,11 @@ namespace MASSAI
         pos= text.find(referenceChar, pos);
         if(pos != std::string::npos)
         {
-          wrtTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(text, oldPos, pos-oldPos).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(text, oldPos, pos-oldPos).c_str());
           textList.push_back(std::string(text, oldPos, pos-oldPos));
           if(pos < text.size())
           {
-            wrtTrace(SecondaryRuntime_HERE, "reference (%.1000s)", std::string(text, pos+1, 2).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "reference (%.1000s)", std::string(text, pos+1, 2).c_str());
             referenceList.push_back(std::string(text, pos+1, 2));
             pos+= 3;
           }
@@ -110,7 +111,7 @@ namespace MASSAI
         }
         else
         {
-          wrtTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(text, oldPos, text.size() - oldPos).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(text, oldPos, text.size() - oldPos).c_str());
           textList.push_back(std::string(text, oldPos, text.size() - oldPos));
         }
       }
@@ -148,7 +149,7 @@ namespace MASSAI
 
     BagTagCharacter::BagTagCharacter()
     {}
-    bool BagTagCharacter::readBagTagCharacter(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool BagTagCharacter::readBagTagCharacter(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
@@ -166,39 +167,39 @@ namespace MASSAI
       if(result)
       {
         result= false;
-        wrtTrace(SecondaryRuntime_HERE, "character id (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "character id (%.1000s)", std::string(readBegin, inBegin).c_str());
         if(Tokenizer::readBagTagFont(inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "font (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "font (%.1000s)", std::string(readBegin, inBegin).c_str());
           if(Tokenizer::readMirrorIndicator(inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "mirror (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "mirror (%.1000s)", std::string(readBegin, inBegin).c_str());
             setMirror(Tokenizer::mirrorIndicator(readBegin));
             if(Tokenizer::readBagTagOrientation(inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
               m_printOrientation= Tokenizer::bagTagOrientation(readBegin);
               m_horizontalAlignment= Tokenizer::bagTagAlignment(readBegin);
               m_reverseView= Tokenizer::bagTagReverseView(readBegin);
               if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "vertical position (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "vertical position (%.1000s)", std::string(readBegin, inBegin).c_str());
                 m_y= 10 * Tokenizer::digit(readBegin, inBegin);
                 if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                 {
-                  wrtTrace(SecondaryRuntime_HERE, "horizontal position (%.1000s)", std::string(readBegin, inBegin).c_str());
+                  trace.writeTrace(SecondaryRuntime_HERE, "horizontal position (%.1000s)", std::string(readBegin, inBegin).c_str());
                   m_x= 10 * Tokenizer::digit(readBegin, inBegin);
                   if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
                     m_height= 10 * Tokenizer::digit(readBegin, inBegin);
                     if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                     {
-                      wrtTrace(SecondaryRuntime_HERE, "width (%.1000s)", std::string(readBegin, inBegin).c_str());
+                      trace.writeTrace(SecondaryRuntime_HERE, "width (%.1000s)", std::string(readBegin, inBegin).c_str());
                       m_width= 10 * Tokenizer::digit(readBegin, inBegin);
                       Tokenizer::readToChar(delimiter, inBegin, inEnd, readBegin, inBegin);
-                      wrtTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(readBegin, inBegin).c_str());
-                      readElementReference(referenceChar, std::string(readBegin, inBegin), m_referenceList, m_prefixTextList);
+                      trace.writeTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(readBegin, inBegin).c_str());
+                      readElementReference(referenceChar, std::string(readBegin, inBegin), m_referenceList, m_prefixTextList, trace);
                       outEnd= inBegin;
                       result= true;
                     }
@@ -257,44 +258,44 @@ namespace MASSAI
     BagTagLogo::BagTagLogo()
     {}
 
-    bool BagTagLogo::readBagTagLogo(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool BagTagLogo::readBagTagLogo(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readChar(BTP_PECTAB_LOGO_ID, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "logo (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "logo (%.1000s)", std::string(readBegin, inBegin).c_str());
         if(Tokenizer::readChar('0', inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
           if(Tokenizer::readMirrorIndicator(inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "mirror (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "mirror (%.1000s)", std::string(readBegin, inBegin).c_str());
             setMirror(Tokenizer::mirrorIndicator(readBegin));
             if(Tokenizer::readBagTagOrientation(inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
               m_printOrientation= Tokenizer::bagTagOrientation(readBegin);
               m_horizontalAlignment= Tokenizer::bagTagAlignment(readBegin);
               m_reverseView= Tokenizer::bagTagReverseView(readBegin);
               if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "vertical position (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "vertical position (%.1000s)", std::string(readBegin, inBegin).c_str());
                 m_y= 10 * Tokenizer::digit(readBegin, inBegin);
                 if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                 {
-                  wrtTrace(SecondaryRuntime_HERE, "horizontal position (%.1000s)", std::string(readBegin, inBegin).c_str());
+                  trace.writeTrace(SecondaryRuntime_HERE, "horizontal position (%.1000s)", std::string(readBegin, inBegin).c_str());
                   m_x= 10 * Tokenizer::digit(readBegin, inBegin);
                   if(Tokenizer::readText("00", inBegin, inEnd, readBegin, inBegin))
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
                     if(Tokenizer::readText("00", inBegin, inEnd, readBegin, inBegin))
                     {
-                      wrtTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
+                      trace.writeTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
                       Tokenizer::readToChar(delimiter, inBegin, inEnd, readBegin, inBegin);
-                      wrtTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(readBegin, inBegin).c_str());
-                      readElementReference(referenceChar, std::string(readBegin, inBegin), m_referenceList, m_prefixTextList);
+                      trace.writeTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(readBegin, inBegin).c_str());
+                      readElementReference(referenceChar, std::string(readBegin, inBegin), m_referenceList, m_prefixTextList, trace);
                       result= true;
                       outEnd= inBegin;
                     }
@@ -338,41 +339,41 @@ namespace MASSAI
 
     BagTagSeparation::BagTagSeparation()
     {}
-    bool BagTagSeparation::readBagTagSeparation(char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool BagTagSeparation::readBagTagSeparation(char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readChar(BTP_PECTAB_SEPARATIONLINE_ID, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "separation line (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "separation line (%.1000s)", std::string(readBegin, inBegin).c_str());
         if(Tokenizer::readBagTagFont(inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "font (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "font (%.1000s)", std::string(readBegin, inBegin).c_str());
           if(Tokenizer::readMirrorIndicator(inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "mirror (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "mirror (%.1000s)", std::string(readBegin, inBegin).c_str());
             setMirror(Tokenizer::mirrorIndicator(readBegin));
             if(Tokenizer::readBagTagLineOrientation(inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
               m_printOrientation= Tokenizer::bagTagOrientation(readBegin);
               m_horizontalAlignment= Tokenizer::bagTagAlignment(readBegin);
               if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "vertical position (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "vertical position (%.1000s)", std::string(readBegin, inBegin).c_str());
                 m_y= 10 * Tokenizer::digit(readBegin, inBegin);
                 // if(Tokenizer::readText("00", inBegin, inEnd, readBegin, inBegin)) // should be "00" found "02" => ignore
                 if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                 {
-                  wrtTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
+                  trace.writeTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
                   if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
                     m_height= Tokenizer::digit(readBegin, inBegin);
                     if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                     {
-                      wrtTrace(SecondaryRuntime_HERE, "width (%.1000s)", std::string(readBegin, inBegin).c_str());
+                      trace.writeTrace(SecondaryRuntime_HERE, "width (%.1000s)", std::string(readBegin, inBegin).c_str());
                       m_width= 10 * Tokenizer::digit(readBegin, inBegin);
                       outEnd= inBegin;
                       result= true;
@@ -409,7 +410,7 @@ namespace MASSAI
 
     BagTagBarcodeDefinition::BagTagBarcodeDefinition()
     {}
-    bool BagTagBarcodeDefinition::readBarcodeType(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool BagTagBarcodeDefinition::readBarcodeType(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       outBegin= inBegin;
@@ -463,29 +464,29 @@ namespace MASSAI
         }
         if(result == true)
         {
-          wrtTrace(SecondaryRuntime_HERE, "barcode type(%.c)", *inBegin);
+          trace.writeTrace(SecondaryRuntime_HERE, "barcode type(%.c)", *inBegin);
           ++inBegin;
           outEnd= inBegin;
         }
       }
       return result;
     }
-    bool BagTagBarcodeDefinition::readBarcodeFormat(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool BagTagBarcodeDefinition::readBarcodeFormat(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
         m_height= 10 * Tokenizer::digit(readBegin, inBegin);
         if(Tokenizer::readDigit(inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "magnification (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "magnification (%.1000s)", std::string(readBegin, inBegin).c_str());
           int magnification= Tokenizer::digit(readBegin);
           if(Tokenizer::readDigit(inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "barcodeRatio (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "barcodeRatio (%.1000s)", std::string(readBegin, inBegin).c_str());
             int barcodeRatio= Tokenizer::digit(readBegin);
             if(1 <= m_height && m_height <= 990
               && 1 <= magnification && magnification <= 9
@@ -556,7 +557,7 @@ namespace MASSAI
 
     BagTagBarcode::BagTagBarcode()
     {}
-    bool BagTagBarcode::readBagTagBarcode(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool BagTagBarcode::readBagTagBarcode(char referenceChar, char delimiter, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
@@ -574,32 +575,32 @@ namespace MASSAI
       if(result)
       {
         result= false;
-        wrtTrace(SecondaryRuntime_HERE, "barcode id (%.1000s)", std::string(readBegin, inBegin).c_str());
-        if(m_barcode.readBarcodeType(inBegin, inEnd, readBegin, inBegin))
+        trace.writeTrace(SecondaryRuntime_HERE, "barcode id (%.1000s)", std::string(readBegin, inBegin).c_str());
+        if(m_barcode.readBarcodeType(inBegin, inEnd, readBegin, inBegin, trace))
         {
-          wrtTrace(SecondaryRuntime_HERE, "font (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "font (%.1000s)", std::string(readBegin, inBegin).c_str());
           if(Tokenizer::readMirrorIndicator(inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "mirror (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "mirror (%.1000s)", std::string(readBegin, inBegin).c_str());
             setMirror(Tokenizer::mirrorIndicator(readBegin));
             if(Tokenizer::readBagTagBarcodeOrientation(inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
               m_printOrientation= Tokenizer::bagTagOrientation(readBegin);
               m_horizontalAlignment= Tokenizer::bagTagAlignment(readBegin);
               if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "vertical position (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "vertical position (%.1000s)", std::string(readBegin, inBegin).c_str());
                 m_y= 10 * Tokenizer::digit(readBegin, inBegin);
                 if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                 {
-                  wrtTrace(SecondaryRuntime_HERE, "horizontal position (%.1000s)", std::string(readBegin, inBegin).c_str());
+                  trace.writeTrace(SecondaryRuntime_HERE, "horizontal position (%.1000s)", std::string(readBegin, inBegin).c_str());
                   m_x= 10 * Tokenizer::digit(readBegin, inBegin);
-                  if(m_barcode.readBarcodeFormat(inBegin, inEnd, readBegin, inBegin))
+                  if(m_barcode.readBarcodeFormat(inBegin, inEnd, readBegin, inBegin, trace))
                   {
                     Tokenizer::readToChar(delimiter, inBegin, inEnd, readBegin, inBegin);
-                    wrtTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(readBegin, inBegin).c_str());
-                    readElementReference(referenceChar, std::string(readBegin, inBegin), m_referenceList, m_prefixTextList);
+                    trace.writeTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(readBegin, inBegin).c_str());
+                    readElementReference(referenceChar, std::string(readBegin, inBegin), m_referenceList, m_prefixTextList, trace);
                     outEnd= inBegin;
                     result= true;
                   }
@@ -647,7 +648,7 @@ namespace MASSAI
 
     BagTagPectabData::BagTagPectabData()
     {}
-    bool BagTagPectabData::readPectabData(const std::string& contextId, const std::string& pectabCmd, AEAPrintProcessorContext& processor) throw(ParseException)
+    bool BagTagPectabData::readPectabData(const std::string& contextId, const std::string& pectabCmd, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace) throw(ParseException)
     {
       std::string::const_iterator it= pectabCmd.begin();
       std::string::const_iterator end= pectabCmd.end();
@@ -660,45 +661,45 @@ namespace MASSAI
         case false:
         {
           if(!Tokenizer::readText(BTP_PECTAB_LOAD, it, end, readBegin, it)) break; // BTT
-          wrtTrace(SecondaryRuntime_HERE, "Pectab_Load (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Pectab_Load (%.1000s)", std::string(readBegin, it).c_str());
           isPectab= true;
 
           if(!Tokenizer::readDigit(2, it, end, readBegin, it)) break; // table number
-          wrtTrace(SecondaryRuntime_HERE, "Table number (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Table number (%.1000s)", std::string(readBegin, it).c_str());
           m_pectabId= std::string(readBegin, it).c_str();
 
           if(!Tokenizer::readDigit(2, it, end, readBegin, it)) break; // table table version
-          wrtTrace(SecondaryRuntime_HERE, "Table version (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Table version (%.1000s)", std::string(readBegin, it).c_str());
           m_pectabVersion= std::string(readBegin, it).c_str();
           m_version= Tokenizer::digit(readBegin, it);
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // continuation Character
-          wrtTrace(SecondaryRuntime_HERE, "Continuation character (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Continuation character (%.1000s)", std::string(readBegin, it).c_str());
           m_continuationCharacter= *readBegin;
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // auto incement field length
-          wrtTrace(SecondaryRuntime_HERE, "AutoIncrement field length (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "AutoIncrement field length (%.1000s)", std::string(readBegin, it).c_str());
           m_autoIncrementFieldLength= Tokenizer::characterValue(readBegin);
-          wrtTrace(SecondaryRuntime_HERE, "AutoIncrement field length (%d)", m_autoIncrementFieldLength);
+          trace.writeTrace(SecondaryRuntime_HERE, "AutoIncrement field length (%d)", m_autoIncrementFieldLength);
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // colour Character
-          wrtTrace(SecondaryRuntime_HERE, "Colour character (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Colour character (%.1000s)", std::string(readBegin, it).c_str());
           m_colorSteering= *readBegin;
 
           if(!Tokenizer::readDigit(3, it, end, readBegin, it)) break; // Tag width
-          wrtTrace(SecondaryRuntime_HERE, "Tag width (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Tag width (%.1000s)", std::string(readBegin, it).c_str());
           m_width_tenth_mm= Tokenizer::digit(readBegin, it);
 
           if(!Tokenizer::readDigit(3, it, end, readBegin, it)) break; // Mirror Point
-          wrtTrace(SecondaryRuntime_HERE, "Mirror Point (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Mirror Point (%.1000s)", std::string(readBegin, it).c_str());
           m_mirrorPoint_tenth_mm= Tokenizer::digit(readBegin, it) * 10;
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // Element reference character
-          wrtTrace(SecondaryRuntime_HERE, "Element reference character (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Element reference character (%.1000s)", std::string(readBegin, it).c_str());
           m_elementReferenceCharacter= *readBegin;
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // Delimiter
-          wrtTrace(SecondaryRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
           m_delimiter= *readBegin;
 
           success= true;
@@ -715,8 +716,8 @@ namespace MASSAI
             while(it != end)
             {
               Tokenizer::readToChar(m_delimiter, it, end, readBegin, it);   // Field Definition
-              wrtTrace(SecondaryRuntime_HERE, "Field (%.1000s)", std::string(readBegin, it).c_str());
-              std::auto_ptr<BagTagPectabField> field=  std::auto_ptr<BagTagPectabField>(BagTagPectabField::readPectabField(m_elementReferenceCharacter, m_delimiter, readBegin, it, readBegin2, readEnd));
+              trace.writeTrace(SecondaryRuntime_HERE, "Field (%.1000s)", std::string(readBegin, it).c_str());
+              std::auto_ptr<BagTagPectabField> field=  std::auto_ptr<BagTagPectabField>(BagTagPectabField::readPectabField(m_elementReferenceCharacter, m_delimiter, readBegin, it, readBegin2, readEnd, trace));
               if(field.get() != 0 && readEnd == it)
               {
                 if(fieldId < field->getId())
@@ -750,11 +751,11 @@ namespace MASSAI
       }
       if(isPectab && !success)
       {
-        writeTraceText(MajorWarning_HERE, "Invalid Pectab");
-        dumpTrace(MajorWarning_HERE, pectabCmd.size(), pectabCmd.data());
+        trace.writeTraceText(MajorWarning_HERE, "Invalid Pectab");
+        trace.dumpTrace(MajorWarning_HERE, pectabCmd.size(), pectabCmd.data());
         if(fieldId != BEFORE_FIRST_FIELD)
         {
-          wrtTrace(MajorWarning_HERE, "Invalid Field (%s)", fieldId.c_str());
+          trace.writeTrace(MajorWarning_HERE, "Invalid Field (%s)", fieldId.c_str());
           throw InvalidField("Invalid Field", fieldId);
         }
         else
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBinSetup.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBinSetup.cpp
index 14368e9c..d72dcbca 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBinSetup.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBinSetup.cpp
@@ -14,8 +14,9 @@
 #pragma warning (disable:4786)
 
 #include "aeaBinSetup.h"
-#include "TraceClt.h"
 #include "aeaToken.h"
+#include "Tools/TraceDelegate.h"
+
 
 namespace
 {
@@ -157,7 +158,7 @@ namespace MASSAI
     {}
     BinSetup::~BinSetup()
     {}
-    std::string BinSetup::setup(const std::string& input)
+    std::string BinSetup::setup(const std::string& input, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string response;
@@ -170,16 +171,16 @@ namespace MASSAI
       if(Tokenizer::readText(BIN_SETUP, it, end, readBegin, it))
       {
         result= true;
-        wrtTrace(BasicRuntime_HERE, "Bin Setup (%.1000s)", std::string(readBegin, it).c_str());
+        trace.writeTrace(BasicRuntime_HERE, "Bin Setup (%.1000s)", std::string(readBegin, it).c_str());
         int currentStock= 0;
         while(Tokenizer::readDigit(it, end, readBegin, it))  // Stock Setup
         {
           Iterator setupBegin= readBegin;
-          wrtTrace(BasicRuntime_HERE, "Stock (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(BasicRuntime_HERE, "Stock (%.1000s)", std::string(readBegin, it).c_str());
           Stock stock= Tokenizer::digit(readBegin);
           if(stock <= currentStock)
           {
-            wrtTrace(MajorWarning_HERE, "Invalid stock order (%.1000s)", std::string(readBegin, it).c_str());
+            trace.writeTrace(MajorWarning_HERE, "Invalid stock order (%.1000s)", std::string(readBegin, it).c_str());
             return false;
           }
           else
@@ -188,13 +189,13 @@ namespace MASSAI
             BinSetupData setting;
             if(setting.readMedia(it, end, readBegin, it)) // Media Type
             {
-              wrtTrace(BasicRuntime_HERE, "Media Type (%.1000s)", std::string(readBegin, it).c_str());
+              trace.writeTrace(BasicRuntime_HERE, "Media Type (%.1000s)", std::string(readBegin, it).c_str());
               if(setting.readVerify(it, end, readBegin, it))  // Verify
               {
-                wrtTrace(BasicRuntime_HERE, "Verify (%.1000s)", std::string(readBegin, it).c_str());
+                trace.writeTrace(BasicRuntime_HERE, "Verify (%.1000s)", std::string(readBegin, it).c_str());
                 if(setting.readSCNR(it, end, readBegin, it)) // delimiter
                 {
-                  wrtTrace(SecondaryRuntime_HERE, "SCNR (%.1000s)", std::string(readBegin, it).c_str());
+                  trace.writeTrace(SecondaryRuntime_HERE, "SCNR (%.1000s)", std::string(readBegin, it).c_str());
                   mediaMap[currentStock]= setting;
                 }
               }
@@ -223,7 +224,7 @@ namespace MASSAI
           {}
           else
           {
-            wrtTrace(MajorWarning_HERE, "Invalid front feed setup");
+            trace.writeTrace(MajorWarning_HERE, "Invalid front feed setup");
             result= false;
           }
         }
@@ -238,7 +239,7 @@ namespace MASSAI
           }
           else
           {
-            wrtTrace(MajorWarning_HERE, "Invalid status query");
+            trace.writeTrace(MajorWarning_HERE, "Invalid status query");
             result= false;
           }
         }
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBoardingPassPectab.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBoardingPassPectab.cpp
index 2a210224..6f582ea3 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBoardingPassPectab.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBoardingPassPectab.cpp
@@ -15,7 +15,7 @@
 #include "AEAParser/aeaBoardingPassPectab.h"
 #include "AEAParser/aeaPrintProcessor.h"
 #include "aeaToken.h"
-#include "TraceClt.h"
+#include "Tools/TraceDelegate.h"
 
 namespace
 {
@@ -32,18 +32,18 @@ namespace MASSAI
   {
     PectabPrintPosition::PectabPrintPosition()
     {}
-    bool PectabPrintPosition::readPectabPrintPosition(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool PectabPrintPosition::readPectabPrintPosition(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readRow(inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "row (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "row (%.1000s)", std::string(readBegin, inBegin).c_str());
         m_row= Tokenizer::row(readBegin);
         if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "column (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "column (%.1000s)", std::string(readBegin, inBegin).c_str());
           m_column= Tokenizer::digit(readBegin, inBegin);
           if(1 <= m_column && m_column <= 72)
           {
@@ -64,22 +64,22 @@ namespace MASSAI
     }
     PectabMagStripePosition::PectabMagStripePosition()
     {}
-    bool PectabMagStripePosition::readPectabMagStripePosition(int fieldLength, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool PectabMagStripePosition::readPectabMagStripePosition(int fieldLength, Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readDigit(inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "track (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "track (%.1000s)", std::string(readBegin, inBegin).c_str());
         m_track= Tokenizer::digit(readBegin);
         if(Tokenizer::readDigit(inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "block (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "block (%.1000s)", std::string(readBegin, inBegin).c_str());
           m_block= Tokenizer::digit(readBegin);
           if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "position (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "position (%.1000s)", std::string(readBegin, inBegin).c_str());
             m_position= Tokenizer::digit(readBegin, inBegin);
             /* accept invalid track/block/position, values are not used
             if(1 <= m_track && m_track <= 4
@@ -109,7 +109,7 @@ namespace MASSAI
     }
     PectabBarcodeDefinition::PectabBarcodeDefinition()
     {}
-    bool PectabBarcodeDefinition::readBarcodeType(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool PectabBarcodeDefinition::readBarcodeType(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       outBegin= inBegin;
@@ -223,29 +223,29 @@ namespace MASSAI
         }
         if(result == true)
         {
-          wrtTrace(SecondaryRuntime_HERE, "barcode type(%.c)", *inBegin);
+          trace.writeTrace(SecondaryRuntime_HERE, "barcode type(%.c)", *inBegin);
           ++inBegin;
           outEnd= inBegin;
         }
       }
       return result;
     }
-    bool PectabBarcodeDefinition::readBarcodeFormat(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool PectabBarcodeDefinition::readBarcodeFormat(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
         m_height= Tokenizer::digit(readBegin, inBegin);
         if(Tokenizer::readDigit(inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "magnification (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "magnification (%.1000s)", std::string(readBegin, inBegin).c_str());
           int magnification= Tokenizer::digit(readBegin);
           if(Tokenizer::readDigit(inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "barcodeRatio (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "barcodeRatio (%.1000s)", std::string(readBegin, inBegin).c_str());
             int barcodeRatio= Tokenizer::digit(readBegin);
             if(1 <= m_height && m_height <= 99
               && 1 <= magnification && magnification <= 9
@@ -307,18 +307,18 @@ namespace MASSAI
 
     PectabField::PectabField()
     {}
-    bool PectabField::readPectabField(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool PectabField::readPectabField(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readFieldId(inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "fieldId (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "fieldId (%.1000s)", std::string(readBegin, inBegin).c_str());
         m_elementId= std::string(readBegin, inBegin);
         if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "maximumLength (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "maximumLength (%.1000s)", std::string(readBegin, inBegin).c_str());
           m_font= PT_FONT_NORMAL;
           m_maximumLength= Tokenizer::digit(readBegin, inBegin);
           result= true;
@@ -326,15 +326,15 @@ namespace MASSAI
           {
             PectabPrintPosition printPosition;
             PectabMagStripePosition magStripePosition;
-            if(printPosition.readPectabPrintPosition(inBegin, inEnd, readBegin, inBegin))
+            if(printPosition.readPectabPrintPosition(inBegin, inEnd, readBegin, inBegin, trace))
             {
               m_printPositions.push_back(printPosition);
             }
-            else if(magStripePosition.readPectabMagStripePosition(m_maximumLength, inBegin, inEnd, readBegin, inBegin))
+            else if(magStripePosition.readPectabMagStripePosition(m_maximumLength, inBegin, inEnd, readBegin, inBegin, trace))
             {
               m_magStripePositions.push_back(magStripePosition);
             }
-            else if(readFont(inBegin, inEnd, readBegin, inBegin))
+            else if(readFont(inBegin, inEnd, readBegin, inBegin, trace))
             {
               break;
             }
@@ -347,25 +347,25 @@ namespace MASSAI
         }
         else if(Tokenizer::readChar(PECTAB_BARCODE_ID, inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "barcode (%.c)", *inBegin);
+          trace.writeTrace(SecondaryRuntime_HERE, "barcode (%.c)", *inBegin);
           m_font= PT_FONT_BARCODE;
-          if(m_barcodeDefinition.readBarcodeType(inBegin, inEnd, readBegin, inBegin))
+          if(m_barcodeDefinition.readBarcodeType(inBegin, inEnd, readBegin, inBegin, trace))
           {
-            wrtTrace(SecondaryRuntime_HERE, "barcodeType (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "barcodeType (%.1000s)", std::string(readBegin, inBegin).c_str());
             bool formatFound= false;
             result= true;
             while(inBegin != inEnd)
             {
               PectabPrintPosition printPosition;
-              if(printPosition.readPectabPrintPosition(inBegin, inEnd, readBegin, inBegin))
+              if(printPosition.readPectabPrintPosition(inBegin, inEnd, readBegin, inBegin, trace))
               {
                 m_printPositions.push_back(printPosition);
               }
-              else if(!formatFound && m_barcodeDefinition.readBarcodeFormat(inBegin, inEnd, readBegin, inBegin))
+              else if(!formatFound && m_barcodeDefinition.readBarcodeFormat(inBegin, inEnd, readBegin, inBegin, trace))
               {
                 formatFound= true;
               }
-              else if(readFont(inBegin, inEnd, readBegin, inBegin))
+              else if(readFont(inBegin, inEnd, readBegin, inBegin, trace))
               {
                 break;
               }
@@ -384,7 +384,7 @@ namespace MASSAI
       }
       return result;
     }
-    bool PectabField::readFont(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool PectabField::readFont(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       outBegin= inBegin;
@@ -459,7 +459,7 @@ namespace MASSAI
         }
         if(result == true)
         {
-          wrtTrace(SecondaryRuntime_HERE, "font (%.c)", *inBegin);
+          trace.writeTrace(SecondaryRuntime_HERE, "font (%.c)", *inBegin);
           ++inBegin;
           outEnd= inBegin;
         }
@@ -494,7 +494,7 @@ namespace MASSAI
 
     PectabData::PectabData()
     {}
-    bool PectabData::readPectabData(const std::string& contextId, const std::string& pectabCmd, AEAPrintProcessorContext& processor) throw(ParseException)
+    bool PectabData::readPectabData(const std::string& contextId, const std::string& pectabCmd, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace) throw(ParseException)
     {
       std::string::const_iterator it= pectabCmd.begin();
       std::string::const_iterator end= pectabCmd.end();
@@ -507,52 +507,52 @@ namespace MASSAI
         case false:
         {
           if(!Tokenizer::readText(PECTAB_LOAD, it, end, readBegin, it)) break;// PT
-          wrtTrace(SecondaryRuntime_HERE, "Pectab_Load (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Pectab_Load (%.1000s)", std::string(readBegin, it).c_str());
           isPectab= true;
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // delimiter for this command
-          wrtTrace(SecondaryRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
           char delimiter= *readBegin;
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // delimiter for messages from atb to host
-          wrtTrace(SecondaryRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
           m_delimiter= *readBegin;
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // character for unreadable data
-          wrtTrace(SecondaryRuntime_HERE, "Unreadable (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Unreadable (%.1000s)", std::string(readBegin, it).c_str());
           m_unreadable= *readBegin;
 
           if(!Tokenizer::readPectab(it, end, readBegin, it)) break; // pectab id
-          wrtTrace(SecondaryRuntime_HERE, "Pectab id (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Pectab id (%.1000s)", std::string(readBegin, it).c_str());
           m_pectabId= std::string(readBegin, it);
 
           if(!Tokenizer::readPectabVersion(it, end, readBegin, it)) break; // pectab version
-          wrtTrace(SecondaryRuntime_HERE, "Pectab version (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Pectab version (%.1000s)", std::string(readBegin, it).c_str());
           m_version= Tokenizer::pectabVersion(readBegin, it);
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // atb steering
           if(!Tokenizer::readChar(delimiter, it, end, readBegin, it)) break; // delimiter
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // load logo command char
-          wrtTrace(SecondaryRuntime_HERE, "Logo Steering (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Logo Steering (%.1000s)", std::string(readBegin, it).c_str());
           m_logoSteering= *readBegin;
 
           if(!Tokenizer::readChar(it, end, readBegin, it)) break; // set color command char
-          wrtTrace(SecondaryRuntime_HERE, "Color Steering (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Color Steering (%.1000s)", std::string(readBegin, it).c_str());
           m_colorSteering= *readBegin;
 
           if(!Tokenizer::readChar(delimiter, it, end, readBegin, it)) break; // delimiter
           if(!Tokenizer::readTransactionCode(delimiter, it, end, readBegin, it)) break; // ticket transaction code
-          wrtTrace(SecondaryRuntime_HERE, "Ticket Transaction Code (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Ticket Transaction Code (%.1000s)", std::string(readBegin, it).c_str());
           m_transactionCodeTicket= std::string(readBegin, it);
 
           if(!Tokenizer::readChar(delimiter, it, end, readBegin, it)) break;// delimiter
           if(!Tokenizer::readTransactionCode(delimiter, it, end, readBegin, it)) break; // checkin transaction code
-          wrtTrace(SecondaryRuntime_HERE, "Checkin Transaction Code (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Checkin Transaction Code (%.1000s)", std::string(readBegin, it).c_str());
           m_transactionCodeCheckin= std::string(readBegin, it);
 
           if(!Tokenizer::readChar(delimiter, it, end, readBegin, it)) break; // delimiter
           if(!Tokenizer::readTransactionCode(delimiter, it, end, readBegin, it)) break;// boarding transaction code
-          wrtTrace(SecondaryRuntime_HERE, "Boarding Transaction Code (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "Boarding Transaction Code (%.1000s)", std::string(readBegin, it).c_str());
           m_transactionCodeBoarding= std::string(readBegin, it);
 
           success= true;
@@ -569,9 +569,9 @@ namespace MASSAI
             while(it != end)
             {
               Tokenizer::readToChar(delimiter, it, end, readBegin, it);   // Field Definition
-              wrtTrace(SecondaryRuntime_HERE, "Field (%.1000s)", std::string(readBegin, it).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "Field (%.1000s)", std::string(readBegin, it).c_str());
               PectabField field;
-              if(field.readPectabField(readBegin, it, readBegin2, readEnd) && readEnd == it)
+              if(field.readPectabField(readBegin, it, readBegin2, readEnd, trace) && readEnd == it)
               {
                 if(fieldId < field.getId())
                   m_fieldMap[field.getId()]= field;
@@ -592,7 +592,7 @@ namespace MASSAI
               }
               else if(Tokenizer::readCLF(readBegin, it, readBegin2, readEnd) && readEnd == it)
               {
-                wrtTrace(SecondaryRuntime_HERE, "clf (%.1000s)", std::string(readBegin2, readEnd).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "clf (%.1000s)", std::string(readBegin2, readEnd).c_str());
                 fieldId= Tokenizer::clf(readBegin2, readEnd);
                 if(readEnd != it)
                   success= false;
@@ -611,7 +611,7 @@ namespace MASSAI
               Tokenizer::readToChar(delimiter, it, end, readBegin, it);   // Field Definition
               if(Tokenizer::readCLF(readBegin, it, readBegin, readEnd) && readEnd == it)
               {
-                wrtTrace(SecondaryRuntime_HERE, "clf (%.1000s)", std::string(readBegin, readEnd).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "clf (%.1000s)", std::string(readBegin, readEnd).c_str());
                 fieldId= Tokenizer::clf(readBegin, readEnd);
                 if(readEnd != it)
                 {
@@ -633,11 +633,11 @@ namespace MASSAI
       }
       if(isPectab && !success)
       {
-        writeTraceText(MajorWarning_HERE, "Invalid Pectab");
-        dumpTrace(MajorWarning_HERE, pectabCmd.size(), pectabCmd.data());
+        trace.writeTraceText(MajorWarning_HERE, "Invalid Pectab");
+        trace.dumpTrace(MajorWarning_HERE, pectabCmd.size(), pectabCmd.data());
         if(fieldId != LAST_FIELD)
         {
-          wrtTrace(MajorWarning_HERE, "Invalid Field (%s)", fieldId.c_str());
+          trace.writeTrace(MajorWarning_HERE, "Invalid Field (%s)", fieldId.c_str());
           throw InvalidField("Invalid Field", fieldId);
         }
         else
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBoardingPassTemplate.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBoardingPassTemplate.cpp
index ccef89d8..65d8b38d 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBoardingPassTemplate.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaBoardingPassTemplate.cpp
@@ -15,7 +15,7 @@
 #include "AEAParser/aeaBoardingPassTemplate.h"
 #include "AEAParser/aeaPrintProcessor.h"
 #include "aeaToken.h"
-#include "TraceClt.h"
+#include "Tools/TraceDelegate.h"
 
 namespace
 {
@@ -34,39 +34,39 @@ namespace MASSAI
   {
     TemplateField::TemplateField()
     {}
-    TemplateField* TemplateField::readTemplateField(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    TemplateField* TemplateField::readTemplateField(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       if(Tokenizer::readFieldId(inBegin, inEnd, outBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "field (%.1000s)", std::string(outBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "field (%.1000s)", std::string(outBegin, inBegin).c_str());
         std::string elementId= std::string(outBegin, inBegin);
         std::auto_ptr<TemplateLogo> logo= std::auto_ptr<TemplateLogo>(new TemplateLogo);
         std::auto_ptr<TemplateLine> line= std::auto_ptr<TemplateLine>(new TemplateLine);
         std::auto_ptr<TemplateBox> box= std::auto_ptr<TemplateBox>(new TemplateBox);
         std::auto_ptr<TemplateText> text= std::auto_ptr<TemplateText>(new TemplateText);
         Iterator readBegin;
-        if(logo->readTemplateLogo(inBegin, inEnd, readBegin, outEnd))
+        if(logo->readTemplateLogo(inBegin, inEnd, readBegin, outEnd, trace))
         {
           static_cast<TemplateField*>(logo.get())->m_elementId= elementId;
           return logo.release();
         }
-        else if(line->readTemplateLine(inBegin, inEnd, readBegin, outEnd))
+        else if(line->readTemplateLine(inBegin, inEnd, readBegin, outEnd, trace))
         {
           static_cast<TemplateField*>(line.get())->m_elementId= elementId;
           return line.release();
         }
-        else if(box->readTemplateBox(inBegin, inEnd, readBegin, outEnd))
+        else if(box->readTemplateBox(inBegin, inEnd, readBegin, outEnd, trace))
         {
           static_cast<TemplateField*>(box.get())->m_elementId= elementId;
           return box.release();
         }
-        else if(text->readTemplateText(inBegin, inEnd, readBegin, outEnd))
+        else if(text->readTemplateText(inBegin, inEnd, readBegin, outEnd, trace))
         {
           static_cast<TemplateField*>(text.get())->m_elementId= elementId;
           return text.release();
         }
       }
-      wrtTrace(SecondaryRuntime_HERE, "no match");
+      trace.writeTrace(SecondaryRuntime_HERE, "no match");
       return 0;
     }
     const std::string& TemplateField::getId() const
@@ -76,29 +76,29 @@ namespace MASSAI
 
     TemplateLogo::TemplateLogo()
     {}
-    bool TemplateLogo::readTemplateLogo(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool TemplateLogo::readTemplateLogo(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readChar(TEMPLATE_LOGO_ID, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "template logo (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "template logo (%.1000s)", std::string(readBegin, inBegin).c_str());
         if(Tokenizer::readDigit(4, inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "left (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "left (%.1000s)", std::string(readBegin, inBegin).c_str());
           m_left= Tokenizer::digit(readBegin, inBegin);
           if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "bottom (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "bottom (%.1000s)", std::string(readBegin, inBegin).c_str());
             m_bottom= Tokenizer::digit(readBegin, inBegin);
             if(Tokenizer::readLogoId(inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "logoid (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "logoid (%.1000s)", std::string(readBegin, inBegin).c_str());
               m_logoId= std::string(readBegin, inBegin);
               if(Tokenizer::readDigit(5, inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
                 result= true;
                 outEnd= inBegin;
               }
@@ -124,29 +124,29 @@ namespace MASSAI
 
     TemplateLine::TemplateLine()
     {}
-    bool TemplateLine::readTemplateLine(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool TemplateLine::readTemplateLine(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readChar(TEMPLATE_LINE_ID, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "template line (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "template line (%.1000s)", std::string(readBegin, inBegin).c_str());
         if(Tokenizer::readDigit(4, inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "x1 (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "x1 (%.1000s)", std::string(readBegin, inBegin).c_str());
           m_x1= Tokenizer::digit(readBegin, inBegin);
           if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "y1 (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "y1 (%.1000s)", std::string(readBegin, inBegin).c_str());
             m_y1= Tokenizer::digit(readBegin, inBegin);
             if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
               int height= Tokenizer::digit(readBegin, inBegin);
               if(Tokenizer::readDigit(4, inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "length (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "length (%.1000s)", std::string(readBegin, inBegin).c_str());
                 int length= Tokenizer::digit(readBegin, inBegin);
                 if(Tokenizer::readDigit(5, inBegin, inEnd, readBegin, inBegin))
                 {
@@ -172,30 +172,30 @@ namespace MASSAI
       }
       else if(Tokenizer::readChar(TEMPLATE_OBLIQUE_LINE_ID, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "line id (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "line id (%.1000s)", std::string(readBegin, inBegin).c_str());
         if(Tokenizer::readDigit(4, inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "x1 (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "x1 (%.1000s)", std::string(readBegin, inBegin).c_str());
           m_x1= Tokenizer::digit(readBegin, inBegin);
           if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "y1 (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "y1 (%.1000s)", std::string(readBegin, inBegin).c_str());
             m_y1= Tokenizer::digit(readBegin, inBegin);
             if(Tokenizer::readDigit(4, inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "x2 (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "x2 (%.1000s)", std::string(readBegin, inBegin).c_str());
               m_x2= Tokenizer::digit(readBegin, inBegin);
               if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "y2 (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "y2 (%.1000s)", std::string(readBegin, inBegin).c_str());
                 m_y2= Tokenizer::digit(readBegin, inBegin);
                 if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
                 {
-                  wrtTrace(SecondaryRuntime_HERE, "thickness (%.1000s)", std::string(readBegin, inBegin).c_str());
+                  trace.writeTrace(SecondaryRuntime_HERE, "thickness (%.1000s)", std::string(readBegin, inBegin).c_str());
                   m_thickness= Tokenizer::digit(readBegin, inBegin);
                   if(Tokenizer::readDigit(5, inBegin, inEnd, readBegin, inBegin))
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
                     result= true;
                     outEnd= inBegin;
                   }
@@ -231,37 +231,37 @@ namespace MASSAI
 
     TemplateBox::TemplateBox()
     {}
-    bool TemplateBox::readTemplateBox(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool TemplateBox::readTemplateBox(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readChar(TEMPLATE_BOX_ID, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "box id (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "box id (%.1000s)", std::string(readBegin, inBegin).c_str());
         if(Tokenizer::readDigit(4, inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "left (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "left (%.1000s)", std::string(readBegin, inBegin).c_str());
           m_left= Tokenizer::digit(readBegin, inBegin);
           if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "bottom (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "bottom (%.1000s)", std::string(readBegin, inBegin).c_str());
             m_bottom= Tokenizer::digit(readBegin, inBegin);
             if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "height (%.1000s)", std::string(readBegin, inBegin).c_str());
               m_height= Tokenizer::digit(readBegin, inBegin);
               if(Tokenizer::readDigit(4, inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "width (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "width (%.1000s)", std::string(readBegin, inBegin).c_str());
                 m_width= Tokenizer::digit(readBegin, inBegin);
                 if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
                 {
-                  wrtTrace(SecondaryRuntime_HERE, "thickness (%.1000s)", std::string(readBegin, inBegin).c_str());
+                  trace.writeTrace(SecondaryRuntime_HERE, "thickness (%.1000s)", std::string(readBegin, inBegin).c_str());
                   m_thickness= Tokenizer::digit(readBegin, inBegin);
                   if(Tokenizer::readDigit(5, inBegin, inEnd, readBegin, inBegin))
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
                     result= true;
                     outEnd= inBegin;
                   }
@@ -296,37 +296,37 @@ namespace MASSAI
 
     TemplateText::TemplateText()
     {}
-    bool TemplateText::readTemplateText(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd)
+    bool TemplateText::readTemplateText(Iterator inBegin, Iterator inEnd, Iterator& outBegin, Iterator& outEnd, MASSAI::trace::TraceDelegate& trace)
     {
       bool result= false;
       std::string::const_iterator readBegin;
       outBegin= inBegin;
       if(Tokenizer::readChar(TEMPLATE_TEXT_ID, inBegin, inEnd, readBegin, inBegin))
       {
-        wrtTrace(SecondaryRuntime_HERE, "text id (%.1000s)", std::string(readBegin, inBegin).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "text id (%.1000s)", std::string(readBegin, inBegin).c_str());
         if(Tokenizer::readDigit(4, inBegin, inEnd, readBegin, inBegin))
         {
-          wrtTrace(SecondaryRuntime_HERE, "left (%.1000s)", std::string(readBegin, inBegin).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "left (%.1000s)", std::string(readBegin, inBegin).c_str());
           m_left= Tokenizer::digit(readBegin, inBegin);
           if(Tokenizer::readDigit(3, inBegin, inEnd, readBegin, inBegin))
           {
-            wrtTrace(SecondaryRuntime_HERE, "bottom (%.1000s)", std::string(readBegin, inBegin).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "bottom (%.1000s)", std::string(readBegin, inBegin).c_str());
             m_bottom= Tokenizer::digit(readBegin, inBegin);
             if(Tokenizer::readOrientation(inBegin, inEnd, readBegin, inBegin))
             {
-              wrtTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "print orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
               m_printOrientation= Tokenizer::orientation(readBegin);
               if(Tokenizer::readOrientation(inBegin, inEnd, readBegin, inBegin))
               {
-                wrtTrace(SecondaryRuntime_HERE, "character orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "character orientation (%.1000s)", std::string(readBegin, inBegin).c_str());
                 m_characterOrientation= Tokenizer::orientation(readBegin);
                 if(Tokenizer::readTemplateFontDomain(inBegin, inEnd, readBegin, inBegin))
                 {
-                  wrtTrace(SecondaryRuntime_HERE, "font domain (%.1000s)", std::string(readBegin, inBegin).c_str());
+                  trace.writeTrace(SecondaryRuntime_HERE, "font domain (%.1000s)", std::string(readBegin, inBegin).c_str());
                   m_fontDomain= Tokenizer::fontDomain(readBegin);
                   if(Tokenizer::readTemplateFont(inBegin, inEnd, readBegin, inBegin))
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "template font (%.1000s)", std::string(readBegin, inBegin).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "template font (%.1000s)", std::string(readBegin, inBegin).c_str());
                     m_aeafont= Tokenizer::font(readBegin);
                     m_usePitchInsteadOfAeaFont= false;
                     if(m_fontDomain != FD_PITCH)
@@ -334,7 +334,7 @@ namespace MASSAI
                   }
                   else if(Tokenizer::readDigit(2, inBegin, inEnd, readBegin, inBegin))
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "pitch (%.1000s)", std::string(readBegin, inBegin).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "pitch (%.1000s)", std::string(readBegin, inBegin).c_str());
                     m_pitch= Tokenizer::digit(readBegin, inBegin);
                     m_usePitchInsteadOfAeaFont= true;
                     if(m_fontDomain != FD_AEA && m_pitch != 0)
@@ -345,15 +345,15 @@ namespace MASSAI
                     result= false;
                     if(Tokenizer::readTemplateCharFactor(inBegin, inEnd, readBegin, inBegin))
                     {
-                      wrtTrace(SecondaryRuntime_HERE, "factor (%.1000s)", std::string(readBegin, inBegin).c_str());
+                      trace.writeTrace(SecondaryRuntime_HERE, "factor (%.1000s)", std::string(readBegin, inBegin).c_str());
                       Tokenizer::charFactor(readBegin, m_width_factor, m_height_factor);
                       if(m_usePitchInsteadOfAeaFont || m_aeafont != PT_FONT_OCR || (m_width_factor == 1 && m_height_factor == 1))
                       {
                         if(Tokenizer::readDigit(5, inBegin, inEnd, readBegin, inBegin))
                         {
-                          wrtTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
+                          trace.writeTrace(SecondaryRuntime_HERE, "reserved (%.1000s)", std::string(readBegin, inBegin).c_str());
                           m_text= std::string(inBegin, inEnd);
-                          wrtTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(inBegin, inEnd).c_str());
+                          trace.writeTrace(SecondaryRuntime_HERE, "text (%.1000s)", std::string(inBegin, inEnd).c_str());
                           result= true;
                           outEnd= inEnd;
                         }
@@ -415,7 +415,7 @@ namespace MASSAI
 
     TemplateData::TemplateData()
     {}
-    bool TemplateData::readTemplateData(const std::string& templateCmd, AEAPrintProcessorContext& processor) throw(ParseException)
+    bool TemplateData::readTemplateData(const std::string& templateCmd, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace) throw(ParseException)
     {
       std::string::const_iterator it= templateCmd.begin();
       std::string::const_iterator end= templateCmd.end();
@@ -427,15 +427,15 @@ namespace MASSAI
 
       if(Tokenizer::readText(TEMPLATE_LOAD, it, end, readBegin, it))  // TT
       {
-        wrtTrace(SecondaryRuntime_HERE, "Template_Load (%.1000s)", std::string(readBegin, it).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "Template_Load (%.1000s)", std::string(readBegin, it).c_str());
         isTemplateCmd= true;
         if(Tokenizer::readTemplateId(it, end, readBegin, it))
         {
-          wrtTrace(SecondaryRuntime_HERE, "TemplateId: (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "TemplateId: (%.1000s)", std::string(readBegin, it).c_str());
           m_templateId= std::string(readBegin, it);
           if(Tokenizer::readChar(it, end, readBegin, it)) // delimiter for this command
           {
-            wrtTrace(SecondaryRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
             if(!processor.parseContent(*this))
             {
               success= true;
@@ -450,8 +450,8 @@ namespace MASSAI
               while(it != end)
               {
                 Tokenizer::readToChar(delimiter, it, end, readBegin, it);   // Field Definition
-                wrtTrace(SecondaryRuntime_HERE, "field (%.1000s)", std::string(readBegin, it).c_str());
-                std::auto_ptr<TemplateField> pField= std::auto_ptr<TemplateField>(field.readTemplateField(readBegin, it, readBegin2, readEnd));
+                trace.writeTrace(SecondaryRuntime_HERE, "field (%.1000s)", std::string(readBegin, it).c_str());
+                std::auto_ptr<TemplateField> pField= std::auto_ptr<TemplateField>(field.readTemplateField(readBegin, it, readBegin2, readEnd, trace));
                 if(pField.get() == 0)
                 {
                   success= false;
@@ -481,7 +481,7 @@ namespace MASSAI
       }
       if(isTemplateCmd && !success)
       {
-        writeTraceText(MajorWarning_HERE, "Invalid Template");
+        trace.writeTraceText(MajorWarning_HERE, "Invalid Template");
         if(m_templateId == "")
           throw InvalidField("Invalid Template", m_templateId);
         else
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaContext.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaContext.cpp
index 04032b54..d7d27d43 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaContext.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaContext.cpp
@@ -15,8 +15,8 @@
 
 #include "aeaContext.h"
 #include "aeaToken.h"
-#include "TraceClt.h"
 #include "AEAParser/aeaPrintProcessor.h"
+#include "Tools/TraceDelegate.h"
 
 using namespace MASSAI::AEA;
 
@@ -47,20 +47,20 @@ namespace MASSAI
       m_contextId(contextId),
       m_transactionCode(transactionCode)
     {}
-    bool AEAContextBase::inputLogo(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool AEAContextBase::inputLogo(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool acceptInput= true;
-      if(loadLogo(cmd, rsp, processor))
+      if(loadLogo(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext LoadLogo");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext LoadLogo");
       }
-      else if(clearLogos(cmd, rsp, processor))
+      else if(clearLogos(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext ClearLogos");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext ClearLogos");
       }
       else if(getLogoStatus(cmd, rsp))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext LogoStatus");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext LogoStatus");
       }
       else
       {
@@ -81,7 +81,7 @@ namespace MASSAI
       }
       return isTransactionCodeRequest;
     }
-    bool AEAContextBase::clearLogos(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool AEAContextBase::clearLogos(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool isClearLogo= false;
       std::string::const_iterator it= cmd.begin();
@@ -92,7 +92,7 @@ namespace MASSAI
         isClearLogo= true;
         if(lcEnd == end)
         {
-          wrtTrace(BasicRuntime_HERE, "ClearLogos clear all logos");
+          trace.writeTrace(BasicRuntime_HERE, "ClearLogos clear all logos");
           Logos::iterator it= m_logos.begin();
           Logos::iterator end= m_logos.end();
           for(; it != end; it++)
@@ -111,11 +111,11 @@ namespace MASSAI
             Logos::iterator logoIt= m_logos.find(std::string(logoBegin, logoEnd));
             if(logoIt == m_logos.end())
             {
-              wrtTrace(BasicRuntime_HERE, "Ignore ClearLogos (%.1000s): not found", std::string(logoBegin, logoEnd).c_str());
+              trace.writeTrace(BasicRuntime_HERE, "Ignore ClearLogos (%.1000s): not found", std::string(logoBegin, logoEnd).c_str());
             }
             else
             {
-              wrtTrace(BasicRuntime_HERE, "ClearLogos (%.1000s)", std::string(logoBegin, logoEnd).c_str());
+              trace.writeTrace(BasicRuntime_HERE, "ClearLogos (%.1000s)", std::string(logoBegin, logoEnd).c_str());
               processor.processClear(logoIt->second);
               m_logos.erase(logoIt);
             }
@@ -127,13 +127,13 @@ namespace MASSAI
       }
       return isClearLogo;
     }
-    bool AEAContextBase::loadLogo(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool AEAContextBase::loadLogo(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool isLoadLogo= true;
       try
       {
         LogoData lg;
-        isLoadLogo= lg.readLogoData(cmd, processor);
+        isLoadLogo= lg.readLogoData(cmd, processor, trace);
         if(isLoadLogo)
         {
           processor.processLoad(lg);
@@ -147,13 +147,13 @@ namespace MASSAI
       {
         std::string response= m_transactionCode + LOGO_LOAD + RETURN_LOADLOGOERROR + ex.field;
         rsp= AEAResult(new AEAConstResponse(COMMAND_SETUP, RESULT_FORMAT_ERROR, response));
-        wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
+        trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
       }
       catch(ParseException& ex)
       {
         std::string response= m_transactionCode + LOGO_LOAD + RETURN_LOADLOGOERROR + "00";
         rsp= AEAResult(new AEAConstResponse(COMMAND_SETUP, RESULT_FORMAT_ERROR, response));
-        wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
+        trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
       }
       return isLoadLogo;
     }
@@ -214,28 +214,28 @@ namespace MASSAI
     BagtagAEAContext::BagtagAEAContext(const std::string& contextId, const std::string& transactionCode):
       AEAContextBase(contextId, transactionCode)
     {}
-    bool BagtagAEAContext::input(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool BagtagAEAContext::input(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool acceptInput= true;
       if(inputTransactionCode(cmd, rsp))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext TransactionCode");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext TransactionCode");
       }
-      else if(inputLogo(cmd, rsp, processor))
+      else if(inputLogo(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext Logo");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext Logo");
       }
-      else if(loadPectab(cmd, rsp, processor))
+      else if(loadPectab(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext LoadPectab");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext LoadPectab");
       }
-      else if(clearPectabs(cmd, rsp, processor))
+      else if(clearPectabs(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext ClearPectabs");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext ClearPectabs");
       }
       else if(getPectabStatus(cmd, rsp))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext PectabStatus");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext PectabStatus");
       }
       else
       {
@@ -255,7 +255,7 @@ namespace MASSAI
         return &((*it).second);
       }
     }
-    bool BagtagAEAContext::clearPectabs(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool BagtagAEAContext::clearPectabs(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool isClearPectab= false;
       std::string::const_iterator it= cmd.begin();
@@ -266,7 +266,7 @@ namespace MASSAI
         isClearPectab= true;
         if(pcEnd == end)
         {
-          wrtTrace(BasicRuntime_HERE, "ClearPectabs clear all pectabs");
+          trace.writeTrace(BasicRuntime_HERE, "ClearPectabs clear all pectabs");
           BagTagPectabDatas::iterator it= m_pectabs.begin();
           BagTagPectabDatas::iterator end= m_pectabs.end();
           for(; it != end; it++)
@@ -287,11 +287,11 @@ namespace MASSAI
             BagTagPectabDatas::iterator pectabIt= m_pectabs.find(std::make_pair(pectabId, pectabVersion));
             if(pectabIt == m_pectabs.end())
             {
-              wrtTrace(BasicRuntime_HERE, "Ignore ClearPectabs (%.1000s) (%.1000s) : not found", pectabId.c_str(), pectabVersion.c_str());
+              trace.writeTrace(BasicRuntime_HERE, "Ignore ClearPectabs (%.1000s) (%.1000s) : not found", pectabId.c_str(), pectabVersion.c_str());
             }
             else
             {
-              wrtTrace(BasicRuntime_HERE, "ClearPectabs (%.1000s) %d", pectabId.c_str(), pectabIt->second.version());
+              trace.writeTrace(BasicRuntime_HERE, "ClearPectabs (%.1000s) %d", pectabId.c_str(), pectabIt->second.version());
               processor.processClear(pectabIt->second);
               m_pectabs.erase(pectabIt);
             }
@@ -303,13 +303,13 @@ namespace MASSAI
       }
       return isClearPectab;
     }
-    bool BagtagAEAContext::loadPectab(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool BagtagAEAContext::loadPectab(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool isLoadPectab= true;
       try
       {
         BagTagPectabData pt;
-        isLoadPectab= pt.readPectabData(contextId(), cmd, processor);
+        isLoadPectab= pt.readPectabData(contextId(), cmd, processor, trace);
         if(isLoadPectab)
         {
           processor.processLoad(pt);
@@ -323,13 +323,13 @@ namespace MASSAI
       {
         std::string response= transactionCode() + PECTAB_LOAD + RETURN_FORMATERROR + ex.field;
         rsp= AEAResult(new AEAConstResponse(COMMAND_SETUP, RESULT_FORMAT_ERROR, response));
-        wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
+        trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
       }
       catch(ParseException& ex)
       {
         std::string response= transactionCode() + PECTAB_LOAD + RETURN_FORMATERROR + "00";
         rsp= AEAResult(new AEAConstResponse(COMMAND_SETUP, RESULT_FORMAT_ERROR, response));
-        wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
+        trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
       }
       return isLoadPectab;
 
@@ -363,40 +363,40 @@ namespace MASSAI
     BoardingAEAContext::BoardingAEAContext(const std::string& contextId, const std::string& transactionCode):
       AEAContextBase(contextId, transactionCode)
     {}
-    bool BoardingAEAContext::input(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool BoardingAEAContext::input(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool acceptInput= true;
       if(inputTransactionCode(cmd, rsp))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext TransactionCode");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext TransactionCode");
       }
-      else if(inputLogo(cmd, rsp, processor))
+      else if(inputLogo(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext Logo");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext Logo");
       }
-      else if(clearPectabs(cmd, rsp, processor))
+      else if(clearPectabs(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext ClearPectabs");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext ClearPectabs");
       }
-      else if(loadPectab(cmd, rsp, processor))
+      else if(loadPectab(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext LoadPectab");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext LoadPectab");
       }
       else if(getPectabStatus(cmd, rsp))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext PectabStatus");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext PectabStatus");
       }
-      else if(loadTemplate(cmd, rsp, processor))
+      else if(loadTemplate(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext LoadTemplate");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext LoadTemplate");
       }
-      else if(clearTemplates(cmd, rsp, processor))
+      else if(clearTemplates(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext ClearTemplates");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext ClearTemplates");
       }
       else if(getTemplateStatus(cmd, rsp))
       {
-        writeTraceText(BasicRuntime_HERE, "AEAContext TemplateStatus");
+        trace.writeTraceText(BasicRuntime_HERE, "AEAContext TemplateStatus");
       }
       else
       {
@@ -405,7 +405,7 @@ namespace MASSAI
       return acceptInput;
     }
 
-    bool BoardingAEAContext::clearPectabs(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool BoardingAEAContext::clearPectabs(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool isClearPectab= false;
       std::string::const_iterator it= cmd.begin();
@@ -416,7 +416,7 @@ namespace MASSAI
         isClearPectab= true;
         if(pcEnd == end)
         {
-          wrtTrace(BasicRuntime_HERE, "ClearPectabs clear all pectabs");
+          trace.writeTrace(BasicRuntime_HERE, "ClearPectabs clear all pectabs");
           Pectabs::iterator it= m_pectabs.begin();
           Pectabs::iterator end= m_pectabs.end();
           for(; it != end; it++)
@@ -435,17 +435,17 @@ namespace MASSAI
             Pectabs::iterator pectabIt= m_pectabs.find(std::string(pectabBegin, pectabEnd));
             if(pectabIt == m_pectabs.end())
             {
-              wrtTrace(BasicRuntime_HERE, "Ignore ClearPectabs (%.1000s) %d: not found", std::string(pectabBegin, pectabEnd).c_str(), Tokenizer::pectabVersion(versionBegin, versionEnd));
+              trace.writeTrace(BasicRuntime_HERE, "Ignore ClearPectabs (%.1000s) %d: not found", std::string(pectabBegin, pectabEnd).c_str(), Tokenizer::pectabVersion(versionBegin, versionEnd));
             }
             else if((*pectabIt).second.version() == Tokenizer::pectabVersion(versionBegin, versionEnd))
             {
-              wrtTrace(BasicRuntime_HERE, "ClearPectabs (%.1000s) %d", std::string(pectabBegin, pectabEnd).c_str(), Tokenizer::pectabVersion(versionBegin, versionEnd));
+              trace.writeTrace(BasicRuntime_HERE, "ClearPectabs (%.1000s) %d", std::string(pectabBegin, pectabEnd).c_str(), Tokenizer::pectabVersion(versionBegin, versionEnd));
               processor.processClear(pectabIt->second);
               m_pectabs.erase(pectabIt);
             }
             else
             {
-              wrtTrace(BasicRuntime_HERE, "Ignore ClearPectabs (%.1000s) %d: version is %d", std::string(pectabBegin, pectabEnd).c_str(), Tokenizer::pectabVersion(versionBegin, versionEnd), (*pectabIt).second.version());
+              trace.writeTrace(BasicRuntime_HERE, "Ignore ClearPectabs (%.1000s) %d: version is %d", std::string(pectabBegin, pectabEnd).c_str(), Tokenizer::pectabVersion(versionBegin, versionEnd), (*pectabIt).second.version());
             }
           }
         }
@@ -470,13 +470,13 @@ namespace MASSAI
       }
       return isPectabStatusRequest;
     }
-    bool BoardingAEAContext::loadPectab(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool BoardingAEAContext::loadPectab(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool isLoadPectab= true;
       try
       {
         PectabData pt;
-        isLoadPectab= pt.readPectabData(contextId(), cmd, processor);
+        isLoadPectab= pt.readPectabData(contextId(), cmd, processor, trace);
         if(isLoadPectab)
         {
           processor.processLoad(pt);
@@ -490,13 +490,13 @@ namespace MASSAI
       {
         std::string response= transactionCode() + PECTAB_LOAD + RETURN_FORMATERROR + ex.field;
         rsp= AEAResult(new AEAConstResponse(COMMAND_SETUP, RESULT_FORMAT_ERROR, response));
-        wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
+        trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
       }
       catch(ParseException& ex)
       {
         std::string response= transactionCode() + PECTAB_LOAD + RETURN_FORMATERROR + "00";
         rsp= AEAResult(new AEAConstResponse(COMMAND_SETUP, RESULT_FORMAT_ERROR, response));
-        wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
+        trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
       }
       return isLoadPectab;
     }
@@ -510,7 +510,7 @@ namespace MASSAI
         (*it).second.getVersion(pectabs);
       }
     }
-    bool BoardingAEAContext::clearTemplates(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool BoardingAEAContext::clearTemplates(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool isClearTemplate= false;
       std::string::const_iterator it= cmd.begin();
@@ -521,7 +521,7 @@ namespace MASSAI
         isClearTemplate= true;
         if(lcEnd == end)
         {
-          wrtTrace(BasicRuntime_HERE, "ClearTemplates clear all templates");
+          trace.writeTrace(BasicRuntime_HERE, "ClearTemplates clear all templates");
           Templates::iterator it= m_templates.begin();
           Templates::iterator end= m_templates.end();
           for(; it != end; it++)
@@ -540,11 +540,11 @@ namespace MASSAI
             Templates::iterator templateIt= m_templates.find(std::string(templateBegin, templateEnd));
             if(templateIt == m_templates.end())
             {
-              wrtTrace(BasicRuntime_HERE, "Ignore ClearTemplates (%.1000s): not found", std::string(templateBegin, templateEnd).c_str());
+              trace.writeTrace(BasicRuntime_HERE, "Ignore ClearTemplates (%.1000s): not found", std::string(templateBegin, templateEnd).c_str());
             }
             else
             {
-              wrtTrace(BasicRuntime_HERE, "ClearTemplates (%.1000s)", std::string(templateBegin, templateEnd).c_str());
+              trace.writeTrace(BasicRuntime_HERE, "ClearTemplates (%.1000s)", std::string(templateBegin, templateEnd).c_str());
               processor.processClear(templateIt->second);
               m_templates.erase(templateIt);
             }
@@ -556,13 +556,13 @@ namespace MASSAI
       }
       return isClearTemplate;
     }
-    bool BoardingAEAContext::loadTemplate(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor)
+    bool BoardingAEAContext::loadTemplate(const std::string& cmd, AEAResult& rsp, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace)
     {
       bool isLoadTemplate= true;
       try
       {
         TemplateData td;
-        isLoadTemplate= td.readTemplateData(cmd, processor);
+        isLoadTemplate= td.readTemplateData(cmd, processor, trace);
         if(isLoadTemplate)
         {
           processor.processLoad(td);
@@ -576,13 +576,13 @@ namespace MASSAI
       {
         std::string response= transactionCode() + TEMPLATE_LOAD + RETURN_LOADTEMPLATEERROR + ex.field;
         rsp= AEAResult(new AEAConstResponse(COMMAND_SETUP, RESULT_FORMAT_ERROR, response));
-        wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
+        trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
       }
       catch(ParseException& ex)
       {
         std::string response= transactionCode() + TEMPLATE_LOAD + RETURN_LOADTEMPLATEERROR;
         rsp= AEAResult(new AEAConstResponse(COMMAND_SETUP, RESULT_FORMAT_ERROR, response));
-        wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
+        trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
       }
       return isLoadTemplate;
     }
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaLogo.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaLogo.cpp
index c8720d39..06e9b5f6 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaLogo.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaLogo.cpp
@@ -17,7 +17,7 @@
 #include "AEAParser/aeaLogo.h"
 #include "AEAParser/aeaPrintProcessor.h"
 #include "aeaToken.h"
-#include "TraceClt.h"
+#include "Tools/TraceDelegate.h"
 
 namespace
 {
@@ -32,7 +32,7 @@ namespace MASSAI
   {
     LogoData::LogoData()
     {}
-    bool LogoData::readLogoData(const std::string& logoCmd, AEAPrintProcessorContext& processor) throw(ParseException)
+    bool LogoData::readLogoData(const std::string& logoCmd, AEAPrintProcessorContext& processor, MASSAI::trace::TraceDelegate& trace) throw(ParseException)
     {
       std::string::const_iterator it= logoCmd.begin();
       std::string::const_iterator end= logoCmd.end();
@@ -43,11 +43,11 @@ namespace MASSAI
 
       if(Tokenizer::readText(LOGO_LOAD, it, end, readBegin, it))  // LT
       {
-        wrtTrace(SecondaryRuntime_HERE, "Logo_Load (%.1000s)", std::string(readBegin, it).c_str());
+        trace.writeTrace(SecondaryRuntime_HERE, "Logo_Load (%.1000s)", std::string(readBegin, it).c_str());
         isLogoCmd= true;
         if(Tokenizer::readLogoId(it, end, readBegin, it))
         {
-          wrtTrace(SecondaryRuntime_HERE, "LogoId: (%.1000s)", std::string(readBegin, it).c_str());
+          trace.writeTrace(SecondaryRuntime_HERE, "LogoId: (%.1000s)", std::string(readBegin, it).c_str());
           m_logoId= std::string(readBegin, it);
           if(Tokenizer::readDigit(4, it, end, readBegin, it))
           {
@@ -65,7 +65,7 @@ namespace MASSAI
                 m_logoData= Tokenizer::fromHexLittleEndian(logoData);
               else if(logoData.size() >= 2 && (logoData.data()[0] == '0') && (logoData.data()[1] == 'A')) // hex format
                 m_logoData= Tokenizer::fromHexBigEndian(logoData);
-              dumpTrace(SecondaryRuntime_HERE, m_logoData.size(), m_logoData.data());
+              trace.dumpTrace(SecondaryRuntime_HERE, m_logoData.size(), m_logoData.data());
               success= true;
             }
           }
@@ -73,7 +73,7 @@ namespace MASSAI
       }
       if(isLogoCmd && !success)
       {
-        writeTraceText(MajorWarning_HERE, "Invalid Logo");
+        trace.writeTraceText(MajorWarning_HERE, "Invalid Logo");
         if(m_logoId == "")
           throw InvalidField("Invalid Logo", m_logoId);
         else
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator.cpp
index ffc814f9..8508e410 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator.cpp
@@ -79,6 +79,11 @@ namespace MASSAI
       m_pBagtag->setPrintProcessor(pProcessor);
       m_pBoardingPass->setPrintProcessor(pProcessor);
     }
+    void AEAPrintSimulation::setTrace(MASSAI::trace::TraceInterface* pTrace)
+    {
+      m_pBagtag->setTrace(pTrace);
+      m_pBoardingPass->setTrace(pTrace);
+    }
     const LogoData* AEAPrintSimulation::getLogoData(const std::string& context, const std::string& id, ContextType type) const
     {
       switch(type)
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_BagtagImpl.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_BagtagImpl.cpp
index 2b6e0411..d0b6194e 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_BagtagImpl.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_BagtagImpl.cpp
@@ -11,13 +11,13 @@
 
 #pragma warning (disable:4786)
 
-#include "TraceClt.h"
 #include "aeaSimulator_BagtagImpl.h"
 #include "aeaToken.h"
 #include "aeaBagtagResponse.h"
 #include "AEAParser/aeaBagtagPrintJob.h"
 #include "AEAParser/aeaPrintProcessor.h"
 #include <vector>
+#include "Tools/TraceDelegate.h"
 
 namespace
 {
@@ -39,21 +39,22 @@ namespace MASSAI
     AEAResult BagtagAEAPrintSimulation::do_input(const std::string& cmd)
     {
       AEAResult rsp;
-      writeTraceText(BasicRuntime_HERE, "BagtagAEAPrintSimulation::input()");
-      dumpTrace(BasicRuntime_HERE, cmd.size(), cmd.data());
+      MASSAI::trace::TraceDelegate trace(getTrace());
+      trace.writeTraceText(BasicRuntime_HERE, "BagtagAEAPrintSimulation::input()");
+      trace.dumpTrace(BasicRuntime_HERE, cmd.size(), cmd.data());
       // rsp.printJobs.clear();
       AEAPrintProcessorContext processor(getContextId(), BAGTAG, getPrintProcessor());
-      if(getContext().input(cmd, rsp, processor))
+      if(getContext().input(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "Setup command");
+        trace.writeTraceText(BasicRuntime_HERE, "Setup command");
       }
-      else if(printTicket(getContext(), cmd, rsp))
+      else if(printTicket(getContext(), cmd, rsp, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "Print Coupon");
+        trace.writeTraceText(BasicRuntime_HERE, "Print Coupon");
       }
       else
       {
-        writeTraceText(BasicRuntime_HERE, "Unknown input");
+        trace.writeTraceText(BasicRuntime_HERE, "Unknown input");
       }
       return rsp;
     }
@@ -80,7 +81,7 @@ namespace MASSAI
       }
     }
 
-    bool BagtagAEAPrintSimulation::printTicket(const BagtagAEAContext& context, const std::string& cmd, AEAResult& rsp) throw(ParseException)
+    bool BagtagAEAPrintSimulation::printTicket(const BagtagAEAContext& context, const std::string& cmd, AEAResult& rsp, MASSAI::trace::TraceDelegate& trace) throw(ParseException)
     {
       AEAPrintProcessorContext processor(context.contextId(), BOARDINGPASS, getPrintProcessor());
       bool isPrintCommand= false;
@@ -99,15 +100,15 @@ namespace MASSAI
         {
           if(Tokenizer::readDigit(2, it, end, readBegin, it))
           {
-            wrtTrace(SecondaryRuntime_HERE, "Table number (%.1000s)", std::string(readBegin, it).c_str());
+            trace.writeTrace(SecondaryRuntime_HERE, "Table number (%.1000s)", std::string(readBegin, it).c_str());
             std::string pectabId= std::string(readBegin, it).c_str();
             if(Tokenizer::readDigit(2, it, end, readBegin, it))
             {
-              wrtTrace(SecondaryRuntime_HERE, "Table version (%.1000s)", std::string(readBegin, it).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "Table version (%.1000s)", std::string(readBegin, it).c_str());
               std::string pectabVersion= std::string(readBegin, it).c_str();
               if(Tokenizer::readDigit(2, it, end, readBegin, it))
               {
-                wrtTrace(SecondaryRuntime_HERE, "Number of tags (%.1000s)", std::string(readBegin, it).c_str());
+                trace.writeTrace(SecondaryRuntime_HERE, "Number of tags (%.1000s)", std::string(readBegin, it).c_str());
                 int printCount= Tokenizer::digit(readBegin, it);
                 printJob.printCount= printCount;
                 if(Tokenizer::readChar(it, end, readBegin, it))  // delimiter for this command
@@ -115,7 +116,7 @@ namespace MASSAI
                   typedef std::vector<std::auto_ptr<AEABagtagPrintJobPart> > JobList;
                   typedef std::list<JobList> JobListList;
                   JobListList jobs;
-                  wrtTrace(BasicRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
+                  trace.writeTrace(BasicRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
                   char delimiter= *readBegin;
 
                   bool endOfJob= false;
@@ -137,24 +138,24 @@ namespace MASSAI
                       delimiters.append(1, pPectab->continuationCharacter());
                       while(Tokenizer::readFieldId(it, end, readBegin, it)) // Field Loop
                       {
-                        wrtTrace(SecondaryRuntime_HERE, "Field (%.1000s)", std::string(readBegin, it).c_str());
+                        trace.writeTrace(SecondaryRuntime_HERE, "Field (%.1000s)", std::string(readBegin, it).c_str());
                         std::string fieldId= std::string(readBegin, it);
                         Tokenizer::readToChar(delimiter, it, end, readBegin, it);   // Field Content
-                        wrtTrace(SecondaryRuntime_HERE, "Field Content (%.1000s)", std::string(readBegin, it).c_str());
+                        trace.writeTrace(SecondaryRuntime_HERE, "Field Content (%.1000s)", std::string(readBegin, it).c_str());
                         jobBase->fields[fieldId]= std::string(readBegin, it);
 
 
                         if(Tokenizer::readChar(pPectab->continuationCharacter(), it, end, readBegin, it))
                         {
                           Iterator continuationBegin= readBegin;
-                          wrtTrace(SecondaryRuntime_HERE, "Continuation (%.1000s)", std::string(readBegin, it).c_str());
+                          trace.writeTrace(SecondaryRuntime_HERE, "Continuation (%.1000s)", std::string(readBegin, it).c_str());
                           if(Tokenizer::readDigit(2, it, end, readBegin, it))
                           {
-                            wrtTrace(SecondaryRuntime_HERE, "Table number (%.1000s)", std::string(readBegin, it).c_str());
+                            trace.writeTrace(SecondaryRuntime_HERE, "Table number (%.1000s)", std::string(readBegin, it).c_str());
                             pectabId= std::string(readBegin, it).c_str();
                             if(Tokenizer::readDigit(2, it, end, readBegin, it))
                             {
-                              wrtTrace(SecondaryRuntime_HERE, "Table version (%.1000s)", std::string(readBegin, it).c_str());
+                              trace.writeTrace(SecondaryRuntime_HERE, "Table version (%.1000s)", std::string(readBegin, it).c_str());
                               std::string pectabVersion= std::string(readBegin, it).c_str();
                               endOfJob= false; // continue in Print Job Loop
                             }
@@ -246,25 +247,25 @@ namespace MASSAI
         {
           std::string response= getTransactionCode() + RETURN_PECTABNOTFOUNDERROR + ex.pectab;
           rsp= AEAResult(new AEAConstResponse(COMMAND_PRINT, RESULT_FORMAT_ERROR, response));
-          wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.pectab.c_str());
+          trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.pectab.c_str());
         }
         catch(InvalidFieldContent& ex)
         {
           std::string response= getTransactionCode() + RETURN_PECTABNOTFOUNDERROR + ex.field + ex.content;
           rsp= AEAResult(new AEAConstResponse(COMMAND_PRINT, RESULT_FORMAT_ERROR, response));
-          wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s) (%.100s)", ex.what(), ex.field.c_str(), ex.content.c_str());
+          trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s) (%.100s)", ex.what(), ex.field.c_str(), ex.content.c_str());
         }
         catch(InvalidField& ex)
         {
           std::string response= getTransactionCode() + RETURN_PECTABNOTFOUNDERROR + ex.field;
           rsp= AEAResult(new AEAConstResponse(COMMAND_PRINT, RESULT_FORMAT_ERROR, response));
-          wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
+          trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
         }
         catch(ParseException& ex)
         {
           std::string response= getTransactionCode() + RETURN_PECTABNOTFOUNDERROR + "00";
           rsp= AEAResult(new AEAConstResponse(COMMAND_PRINT, RESULT_FORMAT_ERROR, response));
-          wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
+          trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
         }
       }
       return isPrintCommand;
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_BoardingPassImpl.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_BoardingPassImpl.cpp
index daa7cd95..1f9d5fc3 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_BoardingPassImpl.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_BoardingPassImpl.cpp
@@ -12,12 +12,12 @@
 #pragma warning (disable:4786)
 
 #include "aeaSimulator_BoardingPassImpl.h"
-#include "TraceClt.h"
 #include "aeaToken.h"
 #include "AEAParser/aeaResponse.h"
 #include "aeaBoardingPassResponse.h"
 #include "AEAParser/aeaBoardingPassPrintJob.h"
 #include "AEAParser/aeaPrintProcessor.h"
+#include "Tools/TraceDelegate.h"
 
 using namespace MASSAI::AEA;
 
@@ -56,24 +56,25 @@ namespace MASSAI
     AEAResult BoardingPassAEAPrintSimulation::do_input(const std::string& cmd)
     {
       AEAResult rsp;
-      writeTraceText(BasicRuntime_HERE, "BoardingPassAEAPrintSimulation::input()");
-      dumpTrace(BasicRuntime_HERE, cmd.size(), cmd.data());
+      MASSAI::trace::TraceDelegate trace(getTrace());
+      trace.writeTraceText(BasicRuntime_HERE, "BoardingPassAEAPrintSimulation::input()");
+      trace.dumpTrace(BasicRuntime_HERE, cmd.size(), cmd.data());
       AEAPrintProcessorContext processor(getContextId(), BOARDINGPASS, getPrintProcessor());
-      if(getContext().input(cmd, rsp, processor))
+      if(getContext().input(cmd, rsp, processor, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "Setup command");
+        trace.writeTraceText(BasicRuntime_HERE, "Setup command");
       }
-      else if(printTicket(getContext(), cmd, rsp))
+      else if(printTicket(getContext(), cmd, rsp, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "Print Coupon");
+        trace.writeTraceText(BasicRuntime_HERE, "Print Coupon");
       }
-      else if(printReceipt(getContext(), cmd, rsp))
+      else if(printReceipt(getContext(), cmd, rsp, trace))
       {
-        writeTraceText(BasicRuntime_HERE, "Print Receipt");
+        trace.writeTraceText(BasicRuntime_HERE, "Print Receipt");
       }
       else
       {
-        writeTraceText(BasicRuntime_HERE, "Unknown input");
+        trace.writeTraceText(BasicRuntime_HERE, "Unknown input");
       }
       return rsp;
     }
@@ -100,7 +101,7 @@ namespace MASSAI
       }
     }
 
-    bool BoardingPassAEAPrintSimulation::printTicket(const BoardingAEAContext& context, const std::string& cmd, AEAResult& rsp) throw(ParseException)
+    bool BoardingPassAEAPrintSimulation::printTicket(const BoardingAEAContext& context, const std::string& cmd, AEAResult& rsp, MASSAI::trace::TraceDelegate& trace) throw(ParseException)
     {
       AEAPrintProcessorContext processor(context.contextId(), BOARDINGPASS, getPrintProcessor());
       bool isPrintCommand= true;
@@ -138,15 +139,15 @@ namespace MASSAI
         {
           while(Tokenizer::readText(actionCode, it, end, readBegin, it))  // Document Begin
           {
-            wrtTrace(BasicRuntime_HERE, "Print Ticket (%.1000s)", std::string(readBegin, it).c_str());
+            trace.writeTrace(BasicRuntime_HERE, "Print Ticket (%.1000s)", std::string(readBegin, it).c_str());
             job= std::auto_ptr<AEATicketPrintJobPart>(new AEATicketPrintJobPart());
             if(Tokenizer::readChar(it, end, readBegin, it))  // delimiter for this command
             {
-              wrtTrace(BasicRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
+              trace.writeTrace(BasicRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
               delimiter= *readBegin;
               if(Tokenizer::readDocumentType(it, end, readBegin, it)) // Document Type
               {
-                wrtTrace(BasicRuntime_HERE, "Document Type (%.1000s)", std::string(readBegin, it).c_str());
+                trace.writeTrace(BasicRuntime_HERE, "Document Type (%.1000s)", std::string(readBegin, it).c_str());
                 job->paperType= Tokenizer::documentType(readBegin, it);
                 if(job->paperType.size() > 0 && job->paperType[job->paperType.size()-1] == 'X')
                 {
@@ -170,7 +171,7 @@ namespace MASSAI
 
                 if(Tokenizer::readDigit(it, end, readBegin, it))  // Document Repeat
                 {
-                  wrtTrace(BasicRuntime_HERE, "Document Repeat (%.1000s)", std::string(readBegin, it).c_str());
+                  trace.writeTrace(BasicRuntime_HERE, "Document Repeat (%.1000s)", std::string(readBegin, it).c_str());
                   job->printCount= Tokenizer::digit(readBegin);
                 }
                 else
@@ -182,10 +183,10 @@ namespace MASSAI
                 {
                   while(Tokenizer::readFieldId(it, end, readBegin, it)) // Field Id
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "Field (%.1000s)", std::string(readBegin, it).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "Field (%.1000s)", std::string(readBegin, it).c_str());
                     std::string fieldId= std::string(readBegin, it);
                     Tokenizer::readToChar(delimiter, it, end, readBegin, it);   // Field Content
-                    wrtTrace(SecondaryRuntime_HERE, "Field Content (%.1000s)", std::string(readBegin, it).c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "Field Content (%.1000s)", std::string(readBegin, it).c_str());
                     std::string content;
                     if(pPectab)
                     {
@@ -214,7 +215,7 @@ namespace MASSAI
                     {
                       content= std::string(readBegin, it);
                     }
-                    wrtTrace(SecondaryRuntime_HERE, "Field Content (%.1000s)", content.c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "Field Content (%.1000s)", content.c_str());
                     if(fieldId == FIRST_FIELD)
                     {
                       Iterator pectabBegin, pectabEnd;
@@ -236,11 +237,11 @@ namespace MASSAI
                         else
                           throw InvalidPectab("Pectab Not found", std::string(pectabBegin, pectabEnd));
                         job->formatCode= std::string(pectabBegin, pectabEnd);
-                        wrtTrace(BasicRuntime_HERE, "Pectab (%.1000s)", std::string(pectabBegin, pectabEnd).c_str());
+                        trace.writeTrace(BasicRuntime_HERE, "Pectab (%.1000s)", std::string(pectabBegin, pectabEnd).c_str());
                       }
                       else
                       {
-                        wrtTrace(MajorWarning_HERE, "Field 01 not pectab (%.1000s)", std::string(pectabBegin, pectabEnd).c_str());
+                        trace.writeTrace(MajorWarning_HERE, "Field 01 not pectab (%.1000s)", std::string(pectabBegin, pectabEnd).c_str());
                       }
                     }
 
@@ -348,7 +349,7 @@ namespace MASSAI
                   // CLF::fillFields(pPectab, job.get());
                 }
               }
-              wrtTrace(BasicRuntime_HERE, "Add Job (%.1000s)", job->paperType.c_str());
+              trace.writeTrace(BasicRuntime_HERE, "Add Job (%.1000s)", job->paperType.c_str());
               // rsp.printJobs.push_back(job);
               printJob.printJobParts.push_back(job);
             }
@@ -371,29 +372,29 @@ namespace MASSAI
         {
           std::string response= responseTransactionCode + RETURN_PECTABNOTFOUNDERROR + ex.pectab;
           rsp= AEAResult(new AEAConstResponse(COMMAND_PRINT, RESULT_FORMAT_ERROR, response));
-          wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.pectab.c_str());
+          trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.pectab.c_str());
         }
         catch(InvalidFieldContent& ex)
         {
           rsp= responseIncorrectField(responseTransactionCode, responseDelimiter, ex.field + ex.content);
-          wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s) (%.100s)", ex.what(), ex.field.c_str(), ex.content.c_str());
+          trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s) (%.100s)", ex.what(), ex.field.c_str(), ex.content.c_str());
         }
         catch(InvalidField& ex)
         {
           rsp= responseIncorrectField(responseTransactionCode, responseDelimiter, ex.field);
-          wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
+          trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s), (%.10s)", ex.what(), ex.field.c_str());
         }
         catch(ParseException& ex)
         {
           rsp= responseIncorrectField(responseTransactionCode, responseDelimiter, "00");
-          wrtTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
+          trace.writeTrace(MajorWarning_HERE, "ParseException: (%.4000s)", ex.what());
         }
       }
       return isPrintCommand;
     }
     // Example:
     // RD#FONT0#SIZE3#FREEBOARDING-RECEIPT#FONT1#SIZE2#NAMEHASSELHORN/DIETRICHM#ALCDLH#FONT3#SIZE7#FLNR404
-    bool BoardingPassAEAPrintSimulation::printReceipt(const BoardingAEAContext& context, const std::string& cmd, AEAResult& rsp) throw(ParseException)
+    bool BoardingPassAEAPrintSimulation::printReceipt(const BoardingAEAContext& context, const std::string& cmd, AEAResult& rsp, MASSAI::trace::TraceDelegate& trace) throw(ParseException)
     {
       AEAPrintProcessorContext processor(context.contextId(), BOARDINGPASS, getPrintProcessor());
       bool isPrintCommand= false;
@@ -405,7 +406,7 @@ namespace MASSAI
 
       if(Tokenizer::readText(PRINT_RECEIPT, it, end, readBegin, it))
       {
-        wrtTrace(BasicRuntime_HERE, "Print Receipt (%.1000s)", std::string(readBegin, it).c_str());
+        trace.writeTrace(BasicRuntime_HERE, "Print Receipt (%.1000s)", std::string(readBegin, it).c_str());
         isPrintCommand= true;
         try
         {
@@ -418,11 +419,11 @@ namespace MASSAI
 
           if(Tokenizer::readChar(it, end, readBegin, it))  // delimiter for this command
           {
-            wrtTrace(BasicRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
+            trace.writeTrace(BasicRuntime_HERE, "Delimiter (%.1000s)", std::string(readBegin, it).c_str());
             delimiter= *readBegin;
             while(Tokenizer::readToChar(delimiter, it, end, readBegin, it)) // Field Content
             {
-              wrtTrace(SecondaryRuntime_HERE, "Field Content (%.1000s)", std::string(readBegin, it).c_str());
+              trace.writeTrace(SecondaryRuntime_HERE, "Field Content (%.1000s)", std::string(readBegin, it).c_str());
               std::string content= std::string(readBegin, it);
               receipt::ReceiptCommand command= receiptPrinting.parseCLF(content);
               if(command.pCommand == 0)
@@ -436,7 +437,7 @@ namespace MASSAI
                   case receipt::RC_PRINT_CONTENT:
                   case receipt::RC_PRINT_LABEL_CONTENT:
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "Print (%.100s)->(%.100s)", command.pCommand->code, command.content.c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "Print (%.100s)->(%.100s)", command.pCommand->code, command.content.c_str());
                     // receiptPrinting.svg(svgContext, context, command, contentFont, labelFont);
                     if(contentFont.fontId == 0)
                     {
@@ -451,18 +452,18 @@ namespace MASSAI
                   }
                   case receipt::RC_SET_FONTSIZE:
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "FontSize (%.100s)->(%.100s)", command.pCommand->code, command.content.c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "FontSize (%.100s)->(%.100s)", command.pCommand->code, command.content.c_str());
                     contentFont.fontSizeId= receiptPrinting.getFontSize(command.content);
                     break;
                   }
                   case receipt::RC_SET_FONTNAME:
                   {
-                    wrtTrace(SecondaryRuntime_HERE, "FontName (%.100s)->(%.100s)", command.pCommand->code, command.content.c_str());
+                    trace.writeTrace(SecondaryRuntime_HERE, "FontName (%.100s)->(%.100s)", command.pCommand->code, command.content.c_str());
                     contentFont.fontId= receiptPrinting.getFont(command.content);
                     break;
                   }
                   default:
-                    wrtTrace(MinorWarning_HERE, "Field (%.100s)->(%.100s) command: (%d)", command.pCommand->code, command.content.c_str(), command.pCommand->command);
+                    trace.writeTrace(MinorWarning_HERE, "Field (%.100s)->(%.100s) command: (%d)", command.pCommand->code, command.content.c_str(), command.pCommand->command);
                 }
               }
               Tokenizer::readChar(delimiter, it, end, readBegin, it); // delimiter
@@ -479,19 +480,19 @@ namespace MASSAI
         {
           std::string response= getTransactionCode() + RETURN_CLF_INVALID;
           rsp= AEAResult(new AEAConstResponse(COMMAND_PRINT, RESULT_FORMAT_ERROR, response));
-          wrtTrace(MajorWarning_HERE, "PrintReceiptInvalidCLFException: (%.4000s)", ex.what());
+          trace.writeTrace(MajorWarning_HERE, "PrintReceiptInvalidCLFException: (%.4000s)", ex.what());
         }
         catch(receipt::PrintReceiptInvalidFontException& ex)
         {
           std::string response= getTransactionCode() + RETURN_FONT_UNAVAILABLE;
           rsp= AEAResult(new AEAConstResponse(COMMAND_PRINT, RESULT_FORMAT_ERROR, response));
-          wrtTrace(MajorWarning_HERE, "PrintReceiptInvalidFontException: (%.4000s)", ex.what());
+          trace.writeTrace(MajorWarning_HERE, "PrintReceiptInvalidFontException: (%.4000s)", ex.what());
         }
         catch(receipt::PrintReceiptInvalidFontSizeException& ex)
         {
           std::string response= getTransactionCode() + RETURN_FONTSIZE_UNAVAILABLE;
           rsp= AEAResult(new AEAConstResponse(COMMAND_PRINT, RESULT_FORMAT_ERROR, response));
-          wrtTrace(MajorWarning_HERE, "PrintReceiptInvalidFontSizeException: (%.4000s)", ex.what());
+          trace.writeTrace(MajorWarning_HERE, "PrintReceiptInvalidFontSizeException: (%.4000s)", ex.what());
         }
       }
       return isPrintCommand;
diff --git a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_Impl.cpp b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_Impl.cpp
index 07eb316a..0f8b9b64 100644
--- a/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_Impl.cpp
+++ b/SelfServiceCommon/Massai/cpp/AEAParser/src/aeaSimulator_Impl.cpp
@@ -10,8 +10,8 @@
 //---------------------------------------------------------------------------
 
 #include "aeaSimulator_Impl.h"
-#include "TraceClt.h"
 #include "mAutoMutex.hpp"
+#include "Tools/TraceDelegate.h"
 
 namespace
 {
@@ -28,7 +28,8 @@ namespace MASSAI
       m_contextId(assign.m_contextId),
       m_transactionCode(assign.m_transactionCode),
       m_active(false),
-      m_pProcessor(0)
+      m_pProcessor(0),
+      m_pTrace(0)
     {}
     _AEAPrintSimulation& _AEAPrintSimulation::operator=(const _AEAPrintSimulation& assign)
     {
@@ -52,10 +53,11 @@ namespace MASSAI
     {}
     void _AEAPrintSimulation::setContext(const std::string& contextId)
     {
-      wrtTrace(BasicRuntime_HERE, "Set Context (%.4000s)", contextId.c_str());
+      MASSAI::trace::TraceDelegate trace(getTrace());
+      trace.writeTrace(BasicRuntime_HERE, "Set Context (%.4000s)", contextId.c_str());
       if(contextId.size() == 0)
       {
-        wrtTrace(BasicRuntime_HERE, "Set Context (GID) for ()");
+        trace.writeTrace(BasicRuntime_HERE, "Set Context (GID) for ()");
         m_contextId= "GID";
       }
       else
@@ -107,5 +109,14 @@ namespace MASSAI
     {
       return m_pProcessor;
     }
+    void _AEAPrintSimulation::setTrace(MASSAI::trace::TraceInterface* pTrace)
+    {
+      m_pTrace= pTrace;
+    }
+    MASSAI::trace::TraceInterface* _AEAPrintSimulation::getTrace()
+    {
+      return m_pTrace;
+    }
+
   }
 }
diff --git a/SelfServiceCommon/Massai/cpp/Tools/makefile.mak b/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
index 4b35928d..66a9ae2c 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
@@ -21,7 +21,11 @@ MY_LIB1_OBJS =          $(_OBJ)\mHRTimerW32.obj \
                         $(_OBJ)\bitarray.obj \
                         $(_OBJ)\localtrace.obj \
                         $(_OBJ)\stringbuffer.obj \
-                        $(_OBJ)\log.obj
+                        $(_OBJ)\log.obj \
+                        $(_OBJ)\TraceInterface.obj \
+                        $(_OBJ)\TraceDelegate.obj \
+                        $(_OBJ)\TraceClient.obj \
+                        $(_OBJ)\TraceHandle.obj
 
 ######################################################################
 
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/TraceClient.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/TraceClient.cpp
new file mode 100644
index 00000000..dae8c313
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/TraceClient.cpp
@@ -0,0 +1,300 @@
+//---------------------------------------------------------------------------
+//
+//  file:       TraceClient.cpp
+//
+//  purpose:    interface for traceing
+//
+//  date:       15.12.2010
+//
+//  author:     Materna Information & Communications
+//
+//  history:
+//---------------------------------------------------------------------------
+
+
+#include "Tools/TraceClient.h"
+#include "Tools/TraceInterface.h"
+#include "TraceClt.h"
+#include <stdarg.h>
+#include <stdio.h>
+
+namespace
+{
+  enum CONSTS
+  {
+    BUFFERSIZE= 4096
+  };
+}
+
+namespace MASSAI
+{
+  namespace trace
+  {
+    TraceClient::TraceClient():
+      m_close(false)
+    {}
+    TraceClient::TraceClient(const char* pszApplication):
+      m_close(true)
+    {
+      ::openTrace(pszApplication);
+    }
+
+    TraceClient::~TraceClient()
+    {
+      if(m_close)
+      {
+        ::closeTrace();
+      }
+    }
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::writeTraceText
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       const char* pszText
+    )
+    {
+      ::writeTraceText(lTraceLevel, pszFile, sLine, pszFunction, pszText);
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+       resulting string must be smaller than 4096 byte
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::writeTrace
+    (
+      long lTraceLevel,
+      const char* pszFile,
+      short  sLine,
+      const char* pszFunction,
+      const char* pszFormat,
+      ...
+    )
+    {
+      va_list arg_ptr;
+      va_start(arg_ptr, pszFormat);
+      char buffer[BUFFERSIZE];
+      _vsnprintf(buffer, sizeof(buffer), pszFormat, arg_ptr);
+      buffer[sizeof(buffer)-1]= 0;
+      ::writeTraceText(lTraceLevel, pszFile, sLine, pszFunction, buffer);
+      va_end( arg_ptr);
+    }
+    /*
+    ---------------------------------------------------------------------------
+       Trace Dump
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::dumpTrace
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      ::dumpTrace(lTraceLevel, pszFile, sLine, pszFunction, lDumpSize, pDump);
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+      Start new files
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::startNewTraceFile(long lTraceLevel)
+    {
+      ::startNewTraceFile(lTraceLevel);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::writeTraceTextForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       const char* pszText
+    )
+    {
+      ::writeTraceTextForTopic(pszTopic, pszFile, sLine, pszFunction, pszText);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+       resulting string must be smaller than 4096 byte
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::writeTraceForTopic
+    (
+      const char* pszTopic,
+      const char* pszFile,
+      short  sLine,
+      const char* pszFunction,
+      const char* pszFormat,
+      ...
+    )
+    {
+      va_list arg_ptr;
+      va_start(arg_ptr, pszFormat);
+      char buffer[BUFFERSIZE];
+      _vsnprintf(buffer, sizeof(buffer), pszFormat, arg_ptr);
+      buffer[sizeof(buffer)-1]= 0;
+      ::writeTraceTextForTopic(pszTopic, pszFile, sLine, pszFunction, buffer);
+      va_end( arg_ptr);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Dump
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::dumpTraceForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      ::dumpTraceForTopic(pszTopic, pszFile, sLine, pszFunction, lDumpSize, pDump);
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+      Start new files
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::startNewTraceFileForTopic(const char* pszTopic)
+    {
+      ::startNewTraceFileForTopic(pszTopic);
+    }
+
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace encypted
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::cryptTrace
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      ::cryptTrace(lTraceLevel, pszFile, sLine, pszFunction, lDumpSize, pDump);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace encypted
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::cryptTraceForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      ::cryptTraceForTopic(pszTopic, pszFile, sLine, pszFunction, lDumpSize, pDump);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       move file
+    ---------------------------------------------------------------------------
+    */
+
+    void TraceClient::moveTrace
+    (
+       const char* pszPath
+    )
+    {
+      ::moveTrace(pszPath);
+    }
+
+
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace credit card track
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::traceTrack
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long trackid,
+       const char* pszTrack
+    )
+    {
+      ::traceTrack(lTraceLevel, pszFile, sLine, pszFunction, trackid, pszTrack);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace credit card track
+    ---------------------------------------------------------------------------
+    */
+    void TraceClient::traceTrackForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long trackid,
+       const char* pszTrack
+    )
+    {
+      ::traceTrackForTopic(pszTopic, pszFile, sLine, pszFunction, trackid, pszTrack);
+    }
+  }
+}
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/TraceDelegate.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/TraceDelegate.cpp
new file mode 100644
index 00000000..f5aedf34
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/TraceDelegate.cpp
@@ -0,0 +1,328 @@
+//---------------------------------------------------------------------------
+//
+//  file:       TraceDelegate.cpp
+//
+//  purpose:    interface for traceing
+//
+//  date:       15.12.2010
+//
+//  author:     Materna Information & Communications
+//
+//  history:
+//---------------------------------------------------------------------------
+
+
+#include "Tools/TraceDelegate.h"
+#include "Tools/TraceInterface.h"
+#include <stdarg.h>
+#include <stdio.h>
+
+namespace
+{
+  enum CONSTS
+  {
+    BUFFERSIZE= 4096
+  };
+}
+
+namespace MASSAI
+{
+  namespace trace
+  {
+    TraceDelegate::TraceDelegate(TraceInterface* pDelegate):
+      m_pDelegate(pDelegate)
+    {}
+    TraceDelegate::~TraceDelegate()
+    {}
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::writeTraceText
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       const char* pszText
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->writeTraceText(lTraceLevel, pszFile, sLine, pszFunction, pszText);
+      }
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+       resulting string must be smaller than 4096 byte
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::writeTrace
+    (
+      long lTraceLevel,
+      const char* pszFile,
+      short  sLine,
+      const char* pszFunction,
+      const char* pszFormat,
+      ...
+    )
+    {
+      va_list arg_ptr;
+      va_start(arg_ptr, pszFormat);
+      if(m_pDelegate)
+      {
+        char buffer[BUFFERSIZE];
+        _vsnprintf(buffer, sizeof(buffer), pszFormat, arg_ptr);
+        buffer[sizeof(buffer)-1]= 0;
+        m_pDelegate->writeTraceText(lTraceLevel, pszFile, sLine, pszFunction, buffer);
+      }
+      va_end( arg_ptr);
+    }
+    /*
+    ---------------------------------------------------------------------------
+       Trace Dump
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::dumpTrace
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->dumpTrace(lTraceLevel, pszFile, sLine, pszFunction, lDumpSize, pDump);
+      }
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+      Start new files
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::startNewTraceFile(long lTraceLevel)
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->startNewTraceFile(lTraceLevel);
+      }
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::writeTraceTextForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       const char* pszText
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->writeTraceTextForTopic(pszTopic, pszFile, sLine, pszFunction, pszText);
+      }
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+       resulting string must be smaller than 4096 byte
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::writeTraceForTopic
+    (
+      const char* pszTopic,
+      const char* pszFile,
+      short  sLine,
+      const char* pszFunction,
+      const char* pszFormat,
+      ...
+    )
+    {
+      va_list arg_ptr;
+      va_start(arg_ptr, pszFormat);
+      if(m_pDelegate)
+      {
+        char buffer[BUFFERSIZE];
+        _vsnprintf(buffer, sizeof(buffer), pszFormat, arg_ptr);
+        buffer[sizeof(buffer)-1]= 0;
+        m_pDelegate->writeTraceTextForTopic(pszTopic, pszFile, sLine, pszFunction, buffer);
+      }
+      va_end( arg_ptr);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Dump
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::dumpTraceForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->dumpTraceForTopic(pszTopic, pszFile, sLine, pszFunction, lDumpSize, pDump);
+      }
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+      Start new files
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::startNewTraceFileForTopic(const char* pszTopic)
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->startNewTraceFileForTopic(pszTopic);
+      }
+    }
+
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace encypted
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::cryptTrace
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->cryptTrace(lTraceLevel, pszFile, sLine, pszFunction, lDumpSize, pDump);
+      }
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace encypted
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::cryptTraceForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->cryptTraceForTopic(pszTopic, pszFile, sLine, pszFunction, lDumpSize, pDump);
+      }
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       move file
+    ---------------------------------------------------------------------------
+    */
+
+    void TraceDelegate::moveTrace
+    (
+       const char* pszPath
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->moveTrace(pszPath);
+      }
+    }
+
+
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace credit card track
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::traceTrack
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long trackid,
+       const char* pszTrack
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->traceTrack(lTraceLevel, pszFile, sLine, pszFunction, trackid, pszTrack);
+      }
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace credit card track
+    ---------------------------------------------------------------------------
+    */
+    void TraceDelegate::traceTrackForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long trackid,
+       const char* pszTrack
+    )
+    {
+      if(m_pDelegate)
+      {
+        m_pDelegate->traceTrackForTopic(pszTopic, pszFile, sLine, pszFunction, trackid, pszTrack);
+      }
+    }
+
+  }
+}
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/TraceHandle.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/TraceHandle.cpp
new file mode 100644
index 00000000..8493c460
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/TraceHandle.cpp
@@ -0,0 +1,302 @@
+//---------------------------------------------------------------------------
+//
+//  file:       TraceHandle.cpp
+//
+//  purpose:    interface for traceing
+//
+//  date:       15.12.2010
+//
+//  author:     Materna Information & Communications
+//
+//  history:
+//---------------------------------------------------------------------------
+
+
+#include "Tools/TraceHandle.h"
+#include "Tools/TraceInterface.h"
+#include "TrcHdlClt.h"
+#include <stdarg.h>
+#include <stdio.h>
+
+namespace
+{
+  enum CONSTS
+  {
+    BUFFERSIZE= 4096
+  };
+}
+
+namespace MASSAI
+{
+  namespace trace
+  {
+    TraceHandle::TraceHandle(int handle):
+      m_handle(handle),
+      m_close(false)
+    {}
+    TraceHandle::TraceHandle(const char* pszApplication):
+      m_close(true)
+    {
+      m_handle= ::openTrace(pszApplication);
+    }
+
+    TraceHandle::~TraceHandle()
+    {
+      if(m_close)
+      {
+        ::closeTrace(m_handle);
+      }
+    }
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::writeTraceText
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       const char* pszText
+    )
+    {
+      ::writeTraceText(m_handle, lTraceLevel, pszFile, sLine, pszFunction, pszText);
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+       resulting string must be smaller than 4096 byte
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::writeTrace
+    (
+      long lTraceLevel,
+      const char* pszFile,
+      short  sLine,
+      const char* pszFunction,
+      const char* pszFormat,
+      ...
+    )
+    {
+      va_list arg_ptr;
+      va_start(arg_ptr, pszFormat);
+      char buffer[BUFFERSIZE];
+      _vsnprintf(buffer, sizeof(buffer), pszFormat, arg_ptr);
+      buffer[sizeof(buffer)-1]= 0;
+      ::writeTraceText(m_handle, lTraceLevel, pszFile, sLine, pszFunction, buffer);
+      va_end( arg_ptr);
+    }
+    /*
+    ---------------------------------------------------------------------------
+       Trace Dump
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::dumpTrace
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      ::dumpTrace(m_handle, lTraceLevel, pszFile, sLine, pszFunction, lDumpSize, pDump);
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+      Start new files
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::startNewTraceFile(long lTraceLevel)
+    {
+      ::startNewTraceFile(m_handle, lTraceLevel);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::writeTraceTextForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       const char* pszText
+    )
+    {
+      ::writeTraceTextForTopic(m_handle, pszTopic, pszFile, sLine, pszFunction, pszText);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+       resulting string must be smaller than 4096 byte
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::writeTraceForTopic
+    (
+      const char* pszTopic,
+      const char* pszFile,
+      short  sLine,
+      const char* pszFunction,
+      const char* pszFormat,
+      ...
+    )
+    {
+      va_list arg_ptr;
+      va_start(arg_ptr, pszFormat);
+      char buffer[BUFFERSIZE];
+      _vsnprintf(buffer, sizeof(buffer), pszFormat, arg_ptr);
+      buffer[sizeof(buffer)-1]= 0;
+      ::writeTraceTextForTopic(m_handle, pszTopic, pszFile, sLine, pszFunction, buffer);
+      va_end( arg_ptr);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Dump
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::dumpTraceForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      ::dumpTraceForTopic(m_handle, pszTopic, pszFile, sLine, pszFunction, lDumpSize, pDump);
+    }
+
+
+    /*
+    ---------------------------------------------------------------------------
+      Start new files
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::startNewTraceFileForTopic(const char* pszTopic)
+    {
+      ::startNewTraceFileForTopic(m_handle, pszTopic);
+    }
+
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace encypted
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::cryptTrace
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      ::cryptTrace(m_handle, lTraceLevel, pszFile, sLine, pszFunction, lDumpSize, pDump);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace encypted
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::cryptTraceForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {
+      ::cryptTraceForTopic(m_handle, pszTopic, pszFile, sLine, pszFunction, lDumpSize, pDump);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       move file
+    ---------------------------------------------------------------------------
+    */
+
+    void TraceHandle::moveTrace
+    (
+       const char* pszPath
+    )
+    {
+      ::moveTrace(m_handle, pszPath);
+    }
+
+
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace credit card track
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::traceTrack
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long trackid,
+       const char* pszTrack
+    )
+    {
+      ::traceTrack(m_handle, lTraceLevel, pszFile, sLine, pszFunction, trackid, pszTrack);
+    }
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace credit card track
+    ---------------------------------------------------------------------------
+    */
+    void TraceHandle::traceTrackForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long trackid,
+       const char* pszTrack
+    )
+    {
+      ::traceTrackForTopic(m_handle, pszTopic, pszFile, sLine, pszFunction, trackid, pszTrack);
+    }
+
+  }
+}
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/TraceInterface.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/TraceInterface.cpp
new file mode 100644
index 00000000..fd454f86
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/TraceInterface.cpp
@@ -0,0 +1,229 @@
+//---------------------------------------------------------------------------
+//
+//  file:       TraceInterface.cpp
+//
+//  purpose:    interface for traceing
+//
+//  date:       15.12.2010
+//
+//  author:     Materna Information & Communications
+//
+//  history:
+//---------------------------------------------------------------------------
+
+
+#include "Tools/TraceInterface.h"
+
+
+namespace MASSAI
+{
+  namespace trace
+  {
+    TraceInterface::TraceInterface()
+    {}
+    TraceInterface::~TraceInterface()
+    {}
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::writeTraceText
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       const char* pszText
+    )
+    {}
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+       resulting string must be smaller than 4096 byte
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::writeTrace
+    (
+      long lTraceLevel,
+      const char* pszFile,
+      short  sLine,
+      const char* pszFunction,
+      const char* pszFormat,
+      ...
+    )
+    {}
+    /*
+    ---------------------------------------------------------------------------
+       Trace Dump
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::dumpTrace
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {}
+
+    /*
+    ---------------------------------------------------------------------------
+      Start new files
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::startNewTraceFile(long lTraceLevel)
+    {}
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::writeTraceTextForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       const char* pszText
+    )
+    {}
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Text
+       resulting string must be smaller than 4096 byte
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::writeTraceForTopic
+    (
+      const char* pszTopic,
+      const char* pszFile,
+      short  sLine,
+      const char* pszFunction,
+      const char* pszFormat,
+      ...
+    )
+    {}
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace Dump
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::dumpTraceForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {}
+
+    /*
+    ---------------------------------------------------------------------------
+      Start new files
+
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::startNewTraceFileForTopic(const char* pszTopic)
+    {}
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace encypted
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::cryptTrace
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {}
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace encypted
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::cryptTraceForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long lDumpSize,
+       const char* pDump
+    )
+    {}
+
+
+    /*
+    ---------------------------------------------------------------------------
+       move file
+    ---------------------------------------------------------------------------
+    */
+
+    void TraceInterface::moveTrace
+    (
+       const char* pszPath
+    )
+    {}
+
+
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace credit card track
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::traceTrack
+    (
+       long lTraceLevel,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long trackid,
+       const char* pszTrack
+    )
+    {}
+
+
+    /*
+    ---------------------------------------------------------------------------
+       Trace credit card track
+    ---------------------------------------------------------------------------
+    */
+    void TraceInterface::traceTrackForTopic
+    (
+       const char* pszTopic,
+       const char* pszFile,
+       short  sLine,
+       const char* pszFunction,
+       long trackid,
+       const char* pszTrack
+    )
+    {}
+  }
+}
-- 
2.41.0.windows.1

