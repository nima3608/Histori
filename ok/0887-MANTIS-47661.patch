From b3eb61a415ed56c27761b642a65cd52e2f925d4f Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Mon, 25 Sep 2017 13:04:14 +0000
Subject: [PATCH 0887/1077] MANTIS 47661 Mantis 47661: Extend C++ config
 wrapper - Let legacy applications use the old interface

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1271 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/CfgClnt/src/NCSelBasic.cpp     | 23 +++++
 .../Massai/cpp/CfgClnt/src/NCTxtLstGCL.cpp    | 16 ++++
 .../cpp/CfgClnt/src/nConfigBasicText.cpp      | 77 ++++++++++++---
 .../cpp/CfgClnt/src/nConfigBasicTextList.cpp  | 95 ++++++++++++++++---
 .../Massai/cpp/CfgClnt/src/nConfigText.cpp    | 31 ++++--
 .../cpp/CfgClnt/src/nConfigTextList.cpp       | 31 ++++--
 6 files changed, 227 insertions(+), 46 deletions(-)

diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/NCSelBasic.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/NCSelBasic.cpp
index cb6e0c18..7ab25e17 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/NCSelBasic.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/NCSelBasic.cpp
@@ -44,6 +44,29 @@ int main( int argc, char ** argv )
                << std::endl;
             SelectionItem.setString( argv[1], argv[2] );
          }
+#if 1
+         // Set new meta
+         static nConfig::selection const SellistNew[] =
+         {
+            nConfig::selection( 1,  "A",       "One A" ),
+            nConfig::selection( 2,  "BB",      "Two Bs" ),
+            nConfig::selection( 4,  "CCCC",    "Lots of Cs" ),
+            nConfig::selection( 8,  "DDDDDDDD","A fucking huge amount of Ds" ),
+            nConfig::selection( 16,  "EEE",    "Extension" )
+         };
+         SelectionItem.setMeta
+                  (
+                     argv[1],
+                     "rwl",
+                     "Whatever ...",
+                     SellistNew,
+                     SellistNew + 5
+                  );
+         std::cout
+            << "setMeta of " << argv[1] << " successful."
+            << std::endl;
+#endif
+         
       }
       catch( nConfig::exception & X )
       {
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/NCTxtLstGCL.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/NCTxtLstGCL.cpp
index f74d131c..c7ade576 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/NCTxtLstGCL.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/NCTxtLstGCL.cpp
@@ -87,6 +87,7 @@ class cfgTextListGCL :
     * create a new confuguration item.
     *
    **/
+#if 0
    void create
         (
            char const * &               Rights,
@@ -106,6 +107,21 @@ class cfgTextListGCL :
       RegEx = "*";
       Semantic = nConfig::SEMANTIC_NONE;
    }
+#else
+   void create
+        (
+           char const * &               Rights,
+           char const * &               Explanation,
+           std::list<std::string> &     Default,
+           long &                       Max
+        )
+   {
+      Rights = 0;         // Use the default
+      Explanation = "Text list test item.";
+      Default = M_Default;
+      Max = 123;
+   }
+#endif
 
 public:
 
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicText.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicText.cpp
index ebd1c69a..ce295338 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicText.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicText.cpp
@@ -86,7 +86,10 @@ namespace nConfig
       std::string                       M_Auth;
 
       //! Configuration proxy.
-      corbaClient<Config::Text2>        M_TextClnt;
+      corbaClient<Config::Text>         M_Text1Clnt;
+
+      //! Configuration proxy.
+      corbaClient<Config::Text2>        M_Text2Clnt;
 
       /**
        *
@@ -95,9 +98,24 @@ namespace nConfig
        * @return The proxy.
        *
       **/
-      Config::Text2 * validProxy()
+      Config::Text * valid1Proxy()
       {
-         Config::Text2 * const Ret = M_TextClnt.proxy();
+         Config::Text * const Ret = M_Text1Clnt.proxy();
+         if( !Ret )
+            THROW_( "?", " - no Proxy" );
+         return Ret;
+      }
+
+      /**
+       *
+       * Return a valid proxy or throw.
+       *
+       * @return The proxy.
+       *
+      **/
+      Config::Text2 * valid2Proxy()
+      {
+         Config::Text2 * const Ret = M_Text2Clnt.proxy();
          if( !Ret )
             THROW_( "?", " - no Proxy" );
          return Ret;
@@ -115,7 +133,8 @@ namespace nConfig
          M_Got( 0 ),
          M_GotMutex(),
          M_Auth( System->auth() ),
-         M_TextClnt( System->host(), CFGMGR_PORT, CFGMGR_SRVNAME_TEXT2 )
+         M_Text1Clnt( System->host(), CFGMGR_PORT, CFGMGR_SRVNAME_TEXT ),
+         M_Text2Clnt( System->host(), CFGMGR_PORT, CFGMGR_SRVNAME_TEXT2 )
       {
       }
 
@@ -129,7 +148,8 @@ namespace nConfig
          M_Got( 0 ),
          M_GotMutex(),
          M_Auth( Auth ),
-         M_TextClnt( CFGMGR_HOST, CFGMGR_PORT, CFGMGR_SRVNAME_TEXT2 )
+         M_Text1Clnt( CFGMGR_HOST, CFGMGR_PORT, CFGMGR_SRVNAME_TEXT ),
+         M_Text2Clnt( CFGMGR_HOST, CFGMGR_PORT, CFGMGR_SRVNAME_TEXT2 )
       {
       }
 
@@ -148,11 +168,38 @@ namespace nConfig
       )
          throw( exception )
       {
-         create
-            (
-               Item, Rights, Explanation, Value, MaxLength,
-               0, "", SEMANTIC_UNKNOWN
-            );
+         if( M_pOS ) *M_pOS << CBTCR " ..." << std::endl;
+         try
+         {
+            Config::access Access;
+            Access.Item = CORBA::string_dup( Item );
+            Access.Authorization = CORBA::string_dup( M_Auth.c_str() );
+            Config::description Description;
+            Description.Rights = CORBA::string_dup( Rights );
+            Description.Explanation = CORBA::string_dup( Explanation );
+            valid1Proxy()->create( Access, Description, Value, MaxLength );
+            if( M_pOS ) *M_pOS << CBTCR "." << std::endl;
+         }
+         catch( Config::Node::alreadyExists & )
+         {
+            THROW_E( Item, CBTCR " - alreadyExists exception" );
+         }
+         catch( Config::Node::noConfiguration & )
+         {
+            THROW_S( Item, CBTCR " - noConfiguration exception" );
+         }
+         catch( Config::Node::notCreated & )
+         {
+            THROW_( Item, CBTCR " - notCreated exception" );
+         }
+         catch( CORBA::Exception & )
+         {
+            THROW_S( Item, CBTCR " - CORBA::Exception" );
+         }
+         catch( ... )
+         {
+            THROW_( Item, CBTCR " - Unknown exception" );
+         }
       }
 
       /**
@@ -186,7 +233,7 @@ namespace nConfig
             md.MinLength = MinLenght;
             md.RegEx = CORBA::string_dup( RegEx );
             md.Semantic = static_cast<Config::semanticType>( Semantic );
-            validProxy()->create2( Access, md, Value );
+            valid2Proxy()->create2( Access, md, Value );
             if( M_pOS ) *M_pOS << CBTCR "." << std::endl;
          }
          catch( Config::Node::alreadyExists & )
@@ -231,7 +278,7 @@ namespace nConfig
             Config::access Access;
             Access.Item = CORBA::string_dup( Item );
             Access.Authorization = CORBA::string_dup( M_Auth.c_str() );
-            M_Got = validProxy()->get( Access );
+            M_Got = valid1Proxy()->get( Access );
             if( M_pOS ) *M_pOS << CBTGT "." << std::endl;
          }
          catch( Config::Node::noConfiguration & )
@@ -275,7 +322,7 @@ namespace nConfig
             Config::access Access;
             Access.Item = CORBA::string_dup( Item );
             Access.Authorization = CORBA::string_dup( M_Auth.c_str() );
-            validProxy()->set( Access, Val );
+            valid1Proxy()->set( Access, Val );
             if( M_pOS ) *M_pOS << CBTST "." << std::endl;
          }
          catch( Config::Node::noConfiguration & )
@@ -318,7 +365,7 @@ namespace nConfig
             Config::access Access;
             Access.Item = CORBA::string_dup( Item );
             Access.Authorization = CORBA::string_dup( M_Auth.c_str() );
-            validProxy()->setInitial( Access, Val );
+            valid1Proxy()->setInitial( Access, Val );
             if( M_pOS ) *M_pOS << CBTSI "." << std::endl;
          }
          catch( Config::Node::alreadyExists & )
@@ -366,7 +413,7 @@ namespace nConfig
             Config::description Description;
             Description.Rights = CORBA::string_dup( Rights );
             Description.Explanation = CORBA::string_dup( Explanation );
-            validProxy()->setMeta( Access, Description, MaxLength );
+            valid1Proxy()->setMeta( Access, Description, MaxLength );
             if( M_pOS ) *M_pOS << CBTSM "." << std::endl;
          }
          catch( Config::Node::noConfiguration & )
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicTextList.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicTextList.cpp
index 7078f234..e2085740 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicTextList.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigBasicTextList.cpp
@@ -158,7 +158,25 @@ namespace nConfig
       std::string                       m_auth;
 
       //! Configuration proxy.
-      corbaClient<Config::Textlist2>    M_TextListClnt;
+      corbaClient<Config::Textlist>     M_TextList1Clnt;
+
+      //! Configuration proxy.
+      corbaClient<Config::Textlist2>    M_TextList2Clnt;
+
+      /**
+       *
+       * Return a valid proxy or throw.
+       *
+       * @return The proxy.
+       *
+      **/
+      Config::Textlist * valid1Proxy()
+      {
+         Config::Textlist * const Ret = M_TextList1Clnt.proxy();
+         if( !Ret )
+            THROW_( "?", " - no Proxy" );
+         return Ret;
+      }
 
       /**
        *
@@ -167,9 +185,9 @@ namespace nConfig
        * @return The proxy.
        *
       **/
-      Config::Textlist2 * validProxy()
+      Config::Textlist2 * valid2Proxy()
       {
-         Config::Textlist2 * const Ret = M_TextListClnt.proxy();
+         Config::Textlist2 * const Ret = M_TextList2Clnt.proxy();
          if( !Ret )
             THROW_( "?", " - no Proxy" );
          return Ret;
@@ -187,7 +205,13 @@ namespace nConfig
          m_got( 0 ),
          m_got_mutex(),
          m_auth( System->auth() ),
-         M_TextListClnt
+         M_TextList1Clnt
+            (
+               System->host(),
+               CFGMGR_PORT,
+               CFGMGR_SRVNAME_TEXTLIST
+            ),
+         M_TextList2Clnt
             (
                System->host(),
                CFGMGR_PORT,
@@ -210,7 +234,13 @@ namespace nConfig
          m_got(),
          m_got_mutex(),
          m_auth( Auth ),
-         M_TextListClnt
+         M_TextList1Clnt
+            (
+               CFGMGR_HOST,
+               CFGMGR_PORT,
+               CFGMGR_SRVNAME_TEXTLIST
+            ),
+         M_TextList2Clnt
             (
                CFGMGR_HOST,
                CFGMGR_PORT,
@@ -234,11 +264,46 @@ namespace nConfig
       )
          throw( exception )
       {
-         create
-            (
-               item, rights, explanation, value, max_length,
-               0, "", SEMANTIC_UNKNOWN
-            );
+         if( m_os ) *m_os << CBTLCR " ..." << std::endl;
+         try
+         {
+            Config::access Access;
+            Access.Item = CORBA::string_dup( item );
+            Access.Authorization = CORBA::string_dup( m_auth.c_str() );
+            Config::description Description;
+            Description.Rights = CORBA::string_dup( rights );
+            Description.Explanation = CORBA::string_dup( explanation );
+            Config::Textlist::strings proxy_value;
+            copy( proxy_value, value );
+            valid1Proxy()->create
+               (
+                  Access,
+                  Description,
+                  proxy_value,
+                  max_length
+               );
+            if( m_os ) *m_os << CBTLCR "." << std::endl;
+         }
+         catch( Config::Node::alreadyExists & )
+         {
+            THROW_E( item, CBTLCR " - alreadyExists exception" );
+         }
+         catch( Config::Node::noConfiguration & )
+         {
+            THROW_S( item, CBTLCR " - noConfiguration exception" );
+         }
+         catch( Config::Node::notCreated & )
+         {
+            THROW_( item, CBTLCR " - notCreated exception" );
+         }
+         catch( CORBA::Exception & )
+         {
+            THROW_S( item, CBTLCR " - CORBA::Exception" );
+         }
+         catch( ... )
+         {
+            THROW_( item, CBTLCR " - Unknown exception" );
+         }
       }
 
       /**
@@ -274,7 +339,7 @@ namespace nConfig
             md.Semantic = static_cast<Config::semanticType>( semantic );
             Config::Textlist::strings proxy_value;
             copy( proxy_value, value );
-            validProxy()->create2
+            valid2Proxy()->create2
                (
                   Access,
                   md,
@@ -320,7 +385,7 @@ namespace nConfig
             Access.Item = CORBA::string_dup( item );
             Access.Authorization = CORBA::string_dup( m_auth.c_str() );
             Config::Textlist::/*strings_var */strings const Strings
-               = *validProxy()->get( Access );
+               = *valid1Proxy()->get( Access );
             copy( (cfgTxtLst&)m_got, Strings );
             if( m_os ) *m_os << CBTLGT "." << std::endl;
          }
@@ -371,7 +436,7 @@ namespace nConfig
             Access.Authorization = CORBA::string_dup( m_auth.c_str() );
             Config::Textlist::strings proxy_value;
             copy( proxy_value, value );
-            validProxy()->set( Access, proxy_value );
+            valid1Proxy()->set( Access, proxy_value );
             if( m_os ) *m_os << CBTLST "." << std::endl;
          }
          catch( Config::Node::noConfiguration & )
@@ -420,7 +485,7 @@ namespace nConfig
             Access.Authorization = CORBA::string_dup( m_auth.c_str() );
             Config::Textlist::strings proxy_value;
             copy( proxy_value, value );
-            validProxy()->setInitial( Access, proxy_value );
+            valid1Proxy()->setInitial( Access, proxy_value );
             if( m_os ) *m_os << CBTLSI "." << std::endl;
          }
          catch( Config::Node::alreadyExists & )
@@ -468,7 +533,7 @@ namespace nConfig
           Config::description Description;
           Description.Rights = CORBA::string_dup( rights );
           Description.Explanation = CORBA::string_dup( explanation );
-          validProxy()->setMeta( Access, Description, max_length );
+          valid1Proxy()->setMeta( Access, Description, max_length );
           if (m_os) *m_os << CBTSM "." << std::endl;
         }
         catch( Config::Node::noConfiguration & )
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigText.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigText.cpp
index 90ccb0f9..f3bcc84e 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigText.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigText.cpp
@@ -211,6 +211,7 @@ namespace nConfig
             long         Min = 0;
             char const * RegEx = "";
             semanticType Semantic = SEMANTIC_UNKNOWN;
+            bool use_v2_interface = true;
             //
             // Ask heir about create parameters
             //
@@ -218,6 +219,7 @@ namespace nConfig
             if( !( E && Value ) )
             {
                // Trap users of old style in config file
+               use_v2_interface = false;
                create( R, E, Value, Max );
                if( !( E && Value ) )
                {
@@ -243,14 +245,27 @@ namespace nConfig
                *M_Traceout
                   << CTG " create Default=" << Value << " ..."
                   << std::endl;
-            M_Basic.create
-               (
-                  M_Item.c_str(),
-                  R,
-                  E,
-                  Value, Max,
-                  Min, RegEx, Semantic
-               );
+            if( use_v2_interface )
+            {
+               M_Basic.create
+                  (
+                     M_Item.c_str(),
+                     R,
+                     E,
+                     Value, Max,
+                     Min, RegEx, Semantic
+                  );
+            }
+            else
+            {
+               M_Basic.create
+                  (
+                     M_Item.c_str(),
+                     R,
+                     E,
+                     Value, Max
+                  );
+            }
             if( M_Traceout )
                *M_Traceout << CTG " created." << std::endl;
             //
diff --git a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigTextList.cpp b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigTextList.cpp
index 9581c262..e249e8be 100644
--- a/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigTextList.cpp
+++ b/SelfServiceCommon/Massai/cpp/CfgClnt/src/nConfigTextList.cpp
@@ -215,6 +215,7 @@ namespace nConfig
             long         Min = 0;
             char const * RegEx = "";
             semanticType Semantic = SEMANTIC_UNKNOWN;
+            bool use_v2_interface = true;
             //
             // Ask heir about create parameters
             //
@@ -222,6 +223,7 @@ namespace nConfig
             if( !E  )
             {
                // Trap users of old style in config file
+               use_v2_interface = false;
                create( R, E, Value, Max );
                if( !E )
                {
@@ -247,14 +249,27 @@ namespace nConfig
                *M_Traceout
                   << CTLG " create ..."
                   << std::endl;
-            M_Basic.create
-               (
-                  M_Item.c_str(),
-                  R,
-                  E,
-                  Value, Max,
-                  Min, RegEx, Semantic
-               );
+            if( use_v2_interface )
+            {
+               M_Basic.create
+                  (
+                     M_Item.c_str(),
+                     R,
+                     E,
+                     Value, Max,
+                     Min, RegEx, Semantic
+                  );
+            }
+            else
+            {
+               M_Basic.create
+                  (
+                     M_Item.c_str(),
+                     R,
+                     E,
+                     Value, Max
+                  );
+            }
             if( M_Traceout )
                *M_Traceout << CTLG " created." << std::endl;
             //
-- 
2.41.0.windows.1

