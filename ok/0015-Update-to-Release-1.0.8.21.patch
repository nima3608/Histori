From f6f4d051252d36f8cb742b4f7886c57f6692db46 Mon Sep 17 00:00:00 2001
From: mpatzer <mpatzer@90b65887-3827-0410-9a23-83215b262276>
Date: Mon, 26 Jul 2010 14:13:31 +0000
Subject: [PATCH 0015/1077] Update to Release 1.0.8.21

git-svn-id: svn://localhost/SelfServiceCommon/trunk@15 90b65887-3827-0410-9a23-83215b262276
---
 Interfaces/inc/MassaiDevice.hpp        | 260 ---------------
 Interfaces/inc/devicesDotStrDotStr.hpp |  39 ---
 Interfaces/inc/mCCC.hpp                | 443 -------------------------
 Interfaces/inc/mCCCmdci.hpp            | 156 ---------
 Interfaces/inc/mPEtxAck.hpp            | 400 ----------------------
 Interfaces/inc/mPTrace.hpp             | 149 ---------
 Interfaces/inc/massaiDeviceAlert.hpp   |  97 ------
 Interfaces/inc/massaiDeviceMonitor.hpp | 184 ----------
 Interfaces/inc/massaiDevicePersist.hpp |  93 ------
 Interfaces/inc/massaiDeviceStock.hpp   | 176 ----------
 10 files changed, 1997 deletions(-)
 delete mode 100644 Interfaces/inc/MassaiDevice.hpp
 delete mode 100644 Interfaces/inc/devicesDotStrDotStr.hpp
 delete mode 100644 Interfaces/inc/mCCC.hpp
 delete mode 100644 Interfaces/inc/mCCCmdci.hpp
 delete mode 100644 Interfaces/inc/mPEtxAck.hpp
 delete mode 100644 Interfaces/inc/mPTrace.hpp
 delete mode 100644 Interfaces/inc/massaiDeviceAlert.hpp
 delete mode 100644 Interfaces/inc/massaiDeviceMonitor.hpp
 delete mode 100644 Interfaces/inc/massaiDevicePersist.hpp
 delete mode 100644 Interfaces/inc/massaiDeviceStock.hpp

diff --git a/Interfaces/inc/MassaiDevice.hpp b/Interfaces/inc/MassaiDevice.hpp
deleted file mode 100644
index f370cd77..00000000
--- a/Interfaces/inc/MassaiDevice.hpp
+++ /dev/null
@@ -1,260 +0,0 @@
-/**
- **************************************************************************
- *
- * @file MassaiDevice.hpp
- *
- * Massai device tools.
- *
- * @author JK
- *
- * Copyright (c) 2002 MATERNA Information & Communications
- *
- **************************************************************************
-**/
-#ifndef MASSAIDEVICE_HPP
-#define MASSAIDEVICE_HPP
-
-
-#define USE_CFGMGR
-
-#include "mArgScan.hpp"
-
-#ifdef USE_CFGMGR
-#include "nConfigText.hpp"
-#else
-#include "massai.hpp"
-#endif
-
-
-
-namespace Materna
-{
-
-   //! massai device handler tools
-   namespace MassaiDevice
-   {
-
-
-
-      /**
-       *
-       * Issue a warning to the console and to the tracer. This function
-       * should be called in extreme situations, e.g. if the application
-       * cannot continue properly.
-       *
-       * @param Msg:            Warning string
-       *
-       * @param Detail:         Warning detail string (optional)
-       *
-      **/
-      void warning( char const * Msg, char const * Detail = 0 );
-
-
-      /**
-       ********************************************************************
-       *
-       * Retrive device configuration parameter.
-       *
-       ********************************************************************
-      **/
-      class params : public argScan
-      {
-
-         //! The device name a.k.a. configuration subsection.
-         std::string M_Sub;
-
-
-      public:
-
-         /**
-          *
-          * Standard constructor - intentionally not implemented.
-          *
-         **/
-         params();
-
-         /**
-          *
-          * Copy constructor - intentionally not implemented.
-          *
-         **/
-         params( params const & );
-
-         /**
-          *
-          * Constructor
-          *
-          * @param argc:        The argument vector length
-          *
-          * @param argv:        The argument vector
-          *
-          * @param DefName:     The default device name
-          *
-         **/
-         params( int argc, char ** argv, char const * DefName );
-
-         /**
-          *
-          * Assignment operator - intentionally not implemented.
-          *
-         **/
-         params & operator=( params const & );
-
-         /**
-          *
-          * Retrieve the device name.
-          *
-          * @return The device name
-          *
-         **/
-         char const * deviceName()
-         {
-            return M_Sub.c_str();
-         }
-
-         /**
-          *
-          * Retrieve a comport value for a name specified.
-          *
-          * @param Item:        The comport name
-          *
-          * @param Configurabl: The string describing the configurable
-          *                     parameters B = Baudrate, P=Parity,
-          *                     D=Databits, S=Stopbits
-          *
-          * @return The comport value
-          *
-         **/
-         char const * comport
-         (
-            char const * Item,
-            char const * Configurabl = "BPDS"
-         );
-
-      };
-
-
-
-      /**
-       ********************************************************************
-       *
-       * Async communication configuration parser.
-       *
-       ********************************************************************
-      **/
-      class parseAsyncConfig
-      {
-         //! The portname
-         char M_Port[16];
-
-         //! The speed
-         char M_Speed[8];
-
-         //! The parity
-         char M_Parity[2];
-
-         //! The number of stopbits
-         char M_Databits[2];
-
-         //! The number of databits
-         char M_Stopbits[2];
-
-      public:
-
-         /**
-          *
-          * Standard constructor - intentionally not implemented.
-          *
-         **/
-         parseAsyncConfig();
-
-         /**
-          *
-          * Copy constructor - intentionally not implemented.
-          *
-         **/
-         parseAsyncConfig( parseAsyncConfig const & );
-
-         /**
-          *
-          * Constructor. Built from a communication configuration string.
-          * The string e.g. can be:
-          * - COM1
-          * - COM6:9600
-          * - COM1:9600n
-          * - COM1:9600n8
-          * - COM1:9600n81
-          *
-          * @param Src:         The input string.
-          *
-         **/
-         explicit parseAsyncConfig( char const * Src );
-
-         /**
-          *
-          * Return the portname.
-          *
-         **/
-         char const * port() const
-         {
-            return M_Port;
-         }
-
-         /**
-          *
-          * Return the speed.
-          *
-         **/
-         char const * speed() const
-         {
-            return M_Speed;
-         }
-
-         /**
-          *
-          * Return the parity.
-          *
-         **/
-         char const * parity() const
-         {
-            return M_Parity;
-         }
-
-         /**
-          *
-          * Return the number of databits.
-          *
-         **/
-         char const * databits() const
-         {
-            return M_Databits;
-         }
-
-         /**
-          *
-          * Return the number of stopbits.
-          *
-         **/
-         char const * stopbits() const
-         {
-            return M_Stopbits;
-         }
-
-      };
-
-
-
-   } // namespace MassaiDevice
-} // namespace Materna
-
-
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- *
- **************************************************************************
-**/
-
diff --git a/Interfaces/inc/devicesDotStrDotStr.hpp b/Interfaces/inc/devicesDotStrDotStr.hpp
deleted file mode 100644
index 4e66eab2..00000000
--- a/Interfaces/inc/devicesDotStrDotStr.hpp
+++ /dev/null
@@ -1,39 +0,0 @@
-#ifndef DEVICESDOTSTRDOTSTR_HPP
-#define DEVICESDOTSTRDOTSTR_HPP
-
-
-
-#include <string>
-
-
-
-class devicesDotStrDotStr
-{
-
-   std::string M_Str;
-
-public:
-
-   devicesDotStrDotStr( char const * A, char const * B ) :
-      M_Str( "DEVICES." )
-   {
-      M_Str += A;
-      M_Str += ".";
-      M_Str += B;
-   }
-
-   devicesDotStrDotStr();
-
-   virtual ~devicesDotStrDotStr()
-   {
-   }
-
-   char const * c_str() const
-   {
-      return M_Str.c_str();
-   }
-
-};
-
-
-#endif
diff --git a/Interfaces/inc/mCCC.hpp b/Interfaces/inc/mCCC.hpp
deleted file mode 100644
index aea3c257..00000000
--- a/Interfaces/inc/mCCC.hpp
+++ /dev/null
@@ -1,443 +0,0 @@
-/**
- **************************************************************************
- * 
- * @file mCCC.hpp
- * 
- * Contains the declaration for class mCCC and implementation of template
- * class * mCCCInterface.
- *
- * @author JK
- * 
- * Copyright (c) 2000-2001 MATERNA Information & Communications
- * 
- **************************************************************************
-**/
-#ifndef MCCC_HPP
-#define MCCC_HPP
-
-#include "OB\CORBAClient.h"
-#include "OB\POAInterface.h"
-#include "OB\BootManager.h"
-#include "OB\ORB_init.h"
-#include "OB\OBORB.h"
-
-#include <iostream>
-#include <fstream>
-#include <string>
-#include "mException.hpp"
-
-
-
-/**
- **************************************************************************
- * 
- * Massai C++ CORBA communication root class
- * 
- **************************************************************************
-**/
-class mCCC
-{
-   
-   //! Refers the trace ostream
-   std::ostream *                  M_pOS;
-   
-   //! CORBA reference
-   CORBA::ORB_var                  M_Orb;
-   
-   //! CORBA reference
-   CORBA::Object_var               M_PoaObj;
-   
-   //! CORBA reference
-   PortableServer::POA_var         M_RootPoa;
-   
-   //! CORBA reference
-   PortableServer::POAManager_var  M_RootMgr;
-   
-   //! CORBA reference
-   CORBA::PolicyList               M_Policies;
-   
-   //! CORBA reference
-   CORBA::Object_var               M_BootObj;
-   
-   //! CORBA reference
-   OB::BootManager_var             M_BootVar;
-   
-   //! The application name
-   std::string const               M_Name;
-   
-public:
-
-   /**
-    * 
-    * Exception "resource already in use"
-    * 
-    */
-   class xcptnAlreadyInUse :
-      public mException
-   {
-      //! The resource name
-      std::string M_Resource;
-      
-   public:
-
-      //! Standard constructor
-      xcptnAlreadyInUse() :
-         mException( "AlreadyInUse" ),
-         M_Resource()
-      {}
-      
-      //! Constructor
-      explicit xcptnAlreadyInUse( char const * Resource ) :
-         mException( "AlreadyInUse" ),
-         M_Resource( Resource )
-      {}
-
-      //! Return resource name.
-      char const * reason() const
-      {
-         return M_Resource.c_str();
-      }
-      
-   };
-   
-   /**
-    * 
-    * Constructor.
-    * 
-    * @param pcszName The name of the servant.
-    * 
-    * @param argc     Commandline argument count.
-    * 
-    * @param argv     Comandline argument vector.
-    * 
-    * @param pOS      Optional an ostream for debugging purposes.
-    * 
-   **/
-   mCCC
-   (
-      char const * pcszName,       // Servant name
-      int argc, char **argv,       // Commandline arguments
-      std::ostream * pOS = 0       // Trace stream
-   )
-      throw( mException, xcptnAlreadyInUse )
-      ;
-
-   /**
-    * 
-    * Standard constructor - intentionally not implemented.
-    * 
-   **/
-   mCCC();
-
-   /**
-    * 
-    * Copy constructor - intentionally not implemented.
-    * 
-   **/
-   mCCC( mCCC const & );
-
-   /**
-    * 
-    * Destructor
-    * 
-   **/
-   virtual ~mCCC();
-
-   /**
-    * 
-    * Assignment operator - intentionally not implemented.
-    * 
-   **/
-   mCCC & operator=( mCCC const & );
-
-   /**
-    * 
-    * Bind a client object to a server object. Client and server name are
-    * given by the parameters, eventually a server interface can be named
-    * as well. If not given, it will default to the server name.
-    * 
-    * @param Objject   The client object to bind.
-    * 
-    * @param Server    The server name.
-    * 
-    * @param Interface Optionally the name of the server interface to use.
-    * 
-   **/
-   int bind
-   (
-      CORBA::Object_var & Object,
-      char const *        Server,
-      char const *        Interface = 0
-   ) const;
-
-   /**
-    * 
-    * Returns the CORBA boot manager
-    * 
-    * @return A reference to the boot manager
-    * 
-   **/
-   OB::BootManager_var & bootManager()
-   {
-      return M_BootVar;
-   }
-
-   /**
-    * 
-    * Returns the communication root name
-    * 
-    * @return A reference to the name
-    * 
-   **/
-   char const * name() const
-   {
-      return M_Name.c_str();
-   }
-
-   /**
-    * 
-    * Returns the CORBA POA manager
-    * 
-    * @return A reference to the POA manager
-    * 
-   **/
-   PortableServer::POAManager_var & poaManager()
-   {
-      return M_RootMgr;
-   }
-
-   /**
-    * 
-    * Returns the CORBA POA
-    * 
-    * @return A reference to the POA
-    * 
-   **/
-   PortableServer::POA_var & poa()
-   {
-      return M_RootPoa;
-   }
-
-   /**
-    * 
-    * Returns the CORBA policy list
-    * 
-    * @return A reference to the list
-    * 
-   **/
-   CORBA::PolicyList & policies()
-   {
-      return M_Policies;
-   }
-
-   /**
-    * 
-    * Loops over CORBA events, until terminate() is called. Obviously that
-    * can happen only, if it operates in a different thread.
-    * 
-    * @return 0, if successfully.
-    * 
-   **/
-   int run();
-
-   /**
-    * 
-    * Terminates run() call
-    * 
-    * @return 0, if successfully.
-    * 
-   **/
-   int terminate();
-   
-};
-
-
-
-/**
- **************************************************************************
- * 
- * Massai C++ CORBA communication interface template class. The template
- * argument should be a class derived from a massai MDCI generated
- * interface class.
- * 
- **************************************************************************
-**/
-template<class T>
-class mCCCInterface
-{
-
-   //! Trace ostream, may be 0
-   std::ostream *                  M_pOS;
-   
-   //! The CORBA servant class
-   T                               M_Server;
-   
-   //! CORBA reference
-   PortableServer::POA_var         M_IfPoa;
-   
-   //! CORBA reference
-   PortableServer::ObjectId_var    M_OId;
-   
-   //! CORBA reference
-   PortableServer::ObjectId_var    M_BObjId;
-   
-public:
-
-   /**
-    * 
-    * Standard constructor
-    * 
-   **/
-   mCCCInterface() :
-        M_pOS( 0 ),
-        M_Server(),
-        M_IfPoa(),
-        M_OId(),
-        M_BObjId()
-   {
-   }
-
-   /**
-    * 
-    * Constructor with trace stream
-    * 
-    * @param pOS ostream for event traces.
-    * 
-   **/
-   explicit mCCCInterface( std::ostream * pOS ) :
-        M_pOS( pOS ),
-        M_Server(),
-        M_IfPoa(),
-        M_OId(),
-        M_BObjId()
-   {
-   }
-
-   /**
-    * 
-    * Copy constructor - intentionally not implemented.
-    * 
-   **/
-   mCCCInterface( mCCCInterface const & );
-
-   /**
-    * 
-    * Assignment operator - intentionally not implemented.
-    * 
-   **/
-   mCCCInterface & operator=( mCCCInterface const & );
-
-   /**
-    * 
-    * Activate the interface.
-    * 
-    * @param Root Refers the communocation root object.
-    * 
-    * @param pcszName An optional name to be given to the interface.
-    * 
-    * @return 0, when successfully, 1 else.
-    * 
-   **/
-   int activate( mCCC & Root, char const * pcszName = 0 )
-   {
-      try
-      {
-         char const * Name;
-         if( pcszName )
-         {
-            Name = pcszName;
-         }
-         else
-         {
-            Name = Root.name();
-         }
-         if( !Name )
-         {
-            if( M_pOS )
-               *M_pOS << "mCCCInterface::activate() - no name."
-                      << std::endl;
-            return 1;
-         }
-         if( M_pOS )
-            *M_pOS << "mCCCInterface::activate( "
-                   << Name << " ) ..."
-                   << std::endl;
-         char * PoaName = new char[ strlen( Name ) + 16 ];
-         if( !PoaName )
-         {
-            if( M_pOS )
-               *M_pOS << "mCCCInterface::activate() - no buffer."
-                      << std::endl;
-            return 1;
-         }
-         strcpy( PoaName, "POA_" );
-         strcat( PoaName, Name );
-         M_IfPoa = Root.poa()->create_POA
-                   (
-                      PoaName, Root.poaManager(), Root.policies()
-                   );
-         delete[] PoaName;
-         M_OId = PortableServer::string_to_ObjectId( Name );
-         M_IfPoa->activate_object_with_id( M_OId, &M_Server );
-         M_BObjId = PortableServer::string_to_ObjectId( Name );
-         Root.bootManager()->add_binding( M_BObjId, M_Server._this() );
-      }
-      catch( CORBA::Exception const & X )
-      {
-         if( M_pOS )
-         {
-            *M_pOS << "mCCCInterface::activate - CORBA exception:"
-                   << std::endl;
-            *M_pOS << X << std::endl;
-         }
-         return 1;
-      }
-      catch( ... )
-      {
-         if( M_pOS )
-         {
-            *M_pOS << "mCCCInterface::activate - exception" << std::endl;
-         }
-         return 1;
-      }
-      if( M_pOS )
-         *M_pOS << "mCCCInterface::activate." << std::endl;
-      return 0;
-   }
-
-   /**
-    * 
-    * Retrieve server object.
-    * 
-    * @return Pointer to the server object.
-    * 
-   **/
-   T * server()
-   {
-      return &M_Server;
-   }
-   
-   /**
-    * 
-    * Send an indication to all interface listeners
-    * 
-    * @param Indication The indication to be sent.
-    * 
-   **/
-   void send( CORBA::Any const & Indication )
-   {
-      M_Server.send( Indication );
-   }
-   
-};
-
-
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- * 
- **************************************************************************
-**/
diff --git a/Interfaces/inc/mCCCmdci.hpp b/Interfaces/inc/mCCCmdci.hpp
deleted file mode 100644
index b78ac09b..00000000
--- a/Interfaces/inc/mCCCmdci.hpp
+++ /dev/null
@@ -1,156 +0,0 @@
-/**
- **************************************************************************
- *
- * @file mCCCmdci.hpp
- *
- * Contains class massaiCMListener.
- *
- * @author JK
- *
- * Copyright (c) 2000 MATERNA Information & Communications
- *
- **************************************************************************
-**/
-#ifndef MCCCMDCI_HPP
-#define MCCCMDCI_HPP
-
-//#include "MCCC.hpp" -- useless for MCORBA programs
-
-#include "mdci.h"
-#include "mutex.hpp"
-
-/**
- *
- * Use a macro to specify the listener method
- *
-**/
-#define MLISTEN_METHOD indication
-
-#include "mListen.hpp"
-
-/**
- **************************************************************************
- *
- * MDCI indication listener management class. Can be used by MDCI-based
- * service implementations.
- *
- **************************************************************************
-**/
-class massaiCMListener :
-   private mListen
-           <
-             DeviceComponents::indicationListener_ptr,
-             CORBA::Any
-           >
-{
-   /**
-    *
-    * Protect access to listener list against simultaneous access from
-    * different threads.
-    *
-   **/
-   mutexSemaphore Mutex;
-
-public:
-
-   /**
-    *
-    * Standard constructor
-    *
-   **/
-   massaiCMListener() :
-      mListen
-           <
-             DeviceComponents::indicationListener_ptr,
-             CORBA::Any
-           >()
-   {
-   }
-
-   /**
-    *
-    * Copy constructor - intentionally not implemented.
-    *
-   **/
-   massaiCMListener( massaiCMListener const & );
-
-   /**
-    *
-    * Assignment operator - intentionally not implemented.
-    *
-   **/
-   massaiCMListener & operator=( massaiCMListener const & );
-
-   /**
-    *
-    * Add an indication listener to the indication receiver list.
-    *
-    * @param Listener The listener to be added.
-    *
-   **/
-   DeviceComponents::RC setListener
-   (
-      DeviceComponents::indicationListener_ptr Listener
-   )
-   {
-      Mutex.request();
-      set( Listener->_duplicate( Listener ) );
-      Mutex.release();
-      return DeviceComponents::RC_OK;
-   }
-
-   /**
-    *
-    * Remove an indication listener from the indication receiver list.
-    *
-    * @param Listener The listener to be removed.
-    *
-   **/
-   DeviceComponents::RC rmvListener
-   (
-      DeviceComponents::indicationListener_ptr Listener
-   )
-   {
-      Mutex.request();
-      clr( Listener );
-      Mutex.release();
-      return DeviceComponents::RC_OK;
-   }
-
-   /**
-    *
-    * Returns if one or more Listener are available
-    *
-    * @param Listener The listener to be removed.
-    *
-   **/
-   BOOL ListenerAvail()
-   {
-      return number();
-   }
-
-   /**
-    *
-    * Send an indication to all indication listeners currently in the
-    * receiver list. Unreachable listeners will be removed from the list.
-    *
-    * @param Indication The indication to be broadcasted.
-    *
-   **/
-   void send( CORBA::Any const & Indication )
-   {
-      Mutex.request();
-      indication( Indication );
-      Mutex.release();
-   }
-};
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- *
- **************************************************************************
-**/
-
diff --git a/Interfaces/inc/mPEtxAck.hpp b/Interfaces/inc/mPEtxAck.hpp
deleted file mode 100644
index 18045a97..00000000
--- a/Interfaces/inc/mPEtxAck.hpp
+++ /dev/null
@@ -1,400 +0,0 @@
-/**
- **************************************************************************
- *
- * @file mPEtxAck.hpp
- *
- * Contains template class mPEtxAck.
- *
- * @author Juergen Kreierhoff
- *
- * Copyright (c) 2001-2004 MATERNA Information & Communications
- *
- **************************************************************************
-**/
-#ifndef METXACK_HPP
-#define METXACK_HPP
-
-#include "mFMTQueue.hpp"
-#include "ASCII.h"
-
-
-
-//! Do not check received checksum
-#define CHK_RX_CHK 0
-
-
-
-/**
- *
- * This is an ETX-ACK protocol implementation class. Generally we consider
- * a sequence of STX, Data1, Data2, ... , DataN, End, LRC as a protocol-
- * conforming segment. Here STX is alway 0x02 followed by the segment data
- * bytes to transfer, End is a end-of-segment character (Either ETX=0x03 or
- * ETB=0x17 and LRC is the segment checksum (XOR over the data bytes).
- *
- * Any segment with correct checksum is to be acknowledged with ACK=0x06,
- * if the checksum does not match it is replied with NACK=0x15.
- *
- * If a data byte is one of the special bytes (e.g. ETX), it is to be
- * flagged with a preceeding DLE=0x10.
- *
- * A message may consist of several segments, nonfinal segments use the
- * ETB as end marker, final (and only) segments use the ETX.
- *
-**/
-template< class CIO, class xData >
-class mPEtxAck
-{
-
-public:
-
-   /**
-    *
-    * Method return codes.
-    *
-   **/
-   typedef enum
-   {
-      RC_OK,
-      RC_ERROR
-   } RC;
-
-   /**
-    *
-    * Exception class
-    *
-    */
-   class mPEtxAck_Fatal
-   {
-   };
-
-
-private:
-
-   //! Refers the low-level character interface to use.
-   CIO &                            M_CharInOut;
-
-   //! The maximum number of data bytes in a segment.
-   unsigned const                   M_MaxBlock;
-
-   //! Queues the ACKs received.
-   Materna::MSSD::fmtQueue<char>    M_RxAckQ;
-
-   //! Queues the messages received.
-   Materna::MSSD::fmtQueue<xData>   M_RxMessageQ;
-
-   /**
-    *
-    * Receiver state.
-    *
-    */
-   enum
-   {
-      //! Initially and between segments.
-      STA_INI = 1,
-
-      //! Receiving a segment
-      STA_DATA,
-
-      //! Receiving a segment, last was DLE
-      STA_DATA_DLE,
-
-      //! Receiving the checksum.
-      STA_CHK
-   }                 M_RxState;
-
-   //! The currently received segment.
-   xData             M_RxSegment;
-
-   //! The currently received LRC.
-   char              M_RxLRC;
-
-   //! Is the protocol configured to wait for an ACK?
-   bool              M_CfgRxAck;
-
-   //! Is the protocol configured to wait for an LRC?
-   bool              M_CfgXxLRC;
-
-   /**
-    *
-    * Write a segment to the interface with given end-of-text.
-    *
-   **/
-   RC write
-   (
-      typename xData::const_iterator const & SrcFrom,
-      typename xData::const_iterator const & SrcTo,
-      char SrcETX
-   )
-      throw()
-   {
-      int Tries = 3;
-      while( Tries-- )
-      {
-         M_CharInOut.write( ASCII_STX );
-         char TxLRC = 0;
-         char RxAck = 0;
-         xData::const_iterator Iter( SrcFrom );
-         while( Iter != SrcTo )
-         {
-            char C = *Iter;
-            TxLRC ^= C;
-            switch( C )
-            {
-            case ASCII_STX:
-            case ASCII_ETX:
-            case ASCII_ACK:
-            case ASCII_DLE:
-            case ASCII_NAK:
-            case ASCII_ETB:
-               M_CharInOut.write( ASCII_DLE );
-               break;
-            default:
-               break;
-            }
-            M_CharInOut.write( static_cast<unsigned char>( C ) );
-            ++Iter;
-         }
-         TxLRC ^= SrcETX;
-         M_CharInOut.write( static_cast<unsigned char>( SrcETX ) );
-         M_RxAckQ.clear();
-         if( M_CfgXxLRC )
-         {
-            M_CharInOut.write( static_cast<unsigned char>( TxLRC ) );
-         }
-         if( M_CfgRxAck )
-         {
-            M_RxAckQ.read( RxAck, 500 );
-            if( RxAck == ASCII_ACK )
-               return RC_OK;
-         }
-         else
-            return RC_OK;
-      }
-      return RC_ERROR;
-   }
-
-public:
-
-   /**
-    *
-    * Constructor.
-    *
-    * @param CharInOut: The character interface to use.
-    *
-    * @param MaxBlock:  The maximum size allowed for a single segment.
-    *
-   **/
-   explicit mPEtxAck( CIO & CharInOut, unsigned MaxBlock = 2000 )
-      throw():
-      M_CharInOut( CharInOut ),
-      M_MaxBlock( MaxBlock ),
-      M_RxAckQ( 1 ),
-      M_RxMessageQ( 10 ),
-      M_RxState( STA_INI ),
-      M_RxSegment(),
-      M_RxLRC( 0 ),
-      M_CfgRxAck( true ),
-      M_CfgXxLRC( true )
-   {
-   }
-
-   /**
-    *
-    * Calling this method will set the protocol handler to not wait for
-    * an LRC following an ETX/ETB to be received.
-    *
-    */
-   void setChkNone()
-      throw()
-   {
-      M_CfgXxLRC = false;
-      M_CfgRxAck = false;
-   }
-
-   /**
-    *
-    * Calling this method will set the protocol handler to not wait for
-    * an ACK to be received.
-    *
-    */
-   void setNoRxAck()
-      throw()
-   {
-      M_CfgRxAck = false;
-   }
-
-   /**
-    *
-    * Call this method to indicate a received character. Protocol handler
-    * then will feed it into its state machine, eventually letting
-    * a pending read() return.
-    *
-    * @param RxC:       The received character.
-    *
-    */
-   void event( char RxC )
-      throw( mPEtxAck_Fatal )
-   {
-      switch( M_RxState )
-      {
-
-      case STA_INI:
-         if( RxC == ASCII_STX )
-         {
-            M_RxSegment.clear();
-            M_RxState = STA_DATA;
-            M_RxLRC = 0;
-         }
-         else
-         {
-            M_RxAckQ.write( RxC );
-         }
-         break;
-
-      case STA_DATA:
-         switch( RxC )
-         {
-         case ASCII_STX:
-            M_RxSegment.clear();
-            M_RxLRC = 0;
-            break;
-         case ASCII_ETB:
-         case ASCII_ETX:
-            if( M_CfgXxLRC )
-            {
-               // Next byte received should be LRC
-               M_RxState = STA_CHK;
-               M_RxLRC ^= RxC;
-            }
-            else
-            {
-               // End of frame received
-               M_RxState = STA_INI;
-               // Do not send an ACK
-               // M_CharInOut.write( ASCII_ACK );
-               M_RxMessageQ.write( M_RxSegment );
-            }
-            break;
-         case ASCII_DLE:
-            M_RxState = STA_DATA_DLE;
-            break;
-         default:
-            M_RxSegment.push_back( RxC );
-            M_RxLRC ^= RxC;
-         }
-         break;
-
-      case STA_DATA_DLE:
-         M_RxSegment.push_back( RxC );
-         M_RxLRC ^= RxC;
-         break;
-      case STA_CHK:
-         // End of frame received
-#if CHK_RX_CHK
-         if( RxC == M_RxLRC  )
-         {
-#endif
-            M_CharInOut.write( ASCII_ACK );
-            M_RxMessageQ.write( M_RxSegment );
-#if CHK_RX_CHK
-         }
-         else
-            M_CharInOut.write( ASCII_NAK );
-#endif
-         M_RxState = STA_INI;
-         break;
-
-      default:
-         throw( mPEtxAck_Fatal() );
-
-      }
-
-   }
-
-   /**
-    *
-    * Read a message from the interface.
-    *
-    * @param Dst:       Where to write the segment received.
-    *
-   **/
-   RC read( xData & Dst )
-      throw()
-   {
-      if( M_RxMessageQ.read( Dst ) == Materna::MSSD::FMTQ_OK )
-         return RC_OK;
-      else
-         return RC_ERROR;
-   }
-
-   /**
-    *
-    * Write a message to the interface.
-    *
-    * @param Src:       The segment to write.
-    *
-   **/
-   RC write( xData const & Src )
-      throw()
-   {
-      unsigned Remaining = Src.size();
-      xData::const_iterator From( Src.begin() );
-      while( Remaining > M_MaxBlock )
-      {
-         xData::const_iterator To( From + M_MaxBlock );
-         RC PartRC = write( From, To, ASCII_ETB );
-         if( PartRC != RC_OK )
-            return PartRC;
-         From = To;
-         Remaining -= M_MaxBlock;
-      }
-      return write( From, From + Remaining, ASCII_ETX );
-   }
-
-   /**
-    *
-    * Write a forced nonfinal segment to the interface.
-    *
-   **/
-   RC writeNonfinal( xData const & Src )
-      throw()
-   {
-      return write( Src.begin(), Src.end(), ASCII_ETB );
-   }
-
-
-private:
-
-   /**
-    *
-    * Default constructor - intentionally not implemented.
-    *
-   **/
-   mPEtxAck();
-
-   /**
-    *
-    * Copy constructor - intentionally not implemented.
-    *
-   **/
-   mPEtxAck( mPEtxAck const & );
-
-   /**
-    *
-    * Assignment - intentionally not implemented.
-    *
-   **/
-   mPEtxAck & operator=( mPEtxAck const & );
-
-};
-
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- *
- **************************************************************************
-**/
diff --git a/Interfaces/inc/mPTrace.hpp b/Interfaces/inc/mPTrace.hpp
deleted file mode 100644
index 340ef1e8..00000000
--- a/Interfaces/inc/mPTrace.hpp
+++ /dev/null
@@ -1,149 +0,0 @@
-/**
- **************************************************************************
- *
- * @file mPTrace.hpp
- *
- * Template protocol trace handler.
- *
- * @author Juergen Kreierhoff
- *
- * Copyright (c) 2001-2004 MATERNA Information & Communications
- *
- **************************************************************************
-**/
-#ifndef MPTRACE_HPP
-#define MPTRACE_HPP
-
-#include "TraceClt.h"
-
-#include <string>
-
-
-
-/**
- *
- * Trace handler class.
- *
-**/
-template <class PImpl, class PRet, class PData>
-class mPTrace
-{
-
-   //! Module name used in trace entries.
-   std::string const  M_Module;
-
-   //! Read method name.
-   char const * const M_Read;
-
-   //! Write method name.
-   char const * const M_Write;
-
-   //! Refers the protocol implementation.
-   PImpl &            M_P;
-
-public:
-
-   /**
-    *
-    * Constructor.
-    *
-   **/
-   mPTrace( char const * Module, PImpl & Protocol ) :
-      M_Module( Module ),
-      M_Read( "read" ),
-      M_Write( "write" ),
-      M_P( Protocol )
-   {
-   }
-
-   /**
-    *
-    * Protocol method extension. Calls the protocol::read method and then
-    * writes a trace entry.
-    *
-   **/
-   PRet read( PData & Dst )
-      throw()
-   {
-      PRet R = M_P.read( Dst );
-      writeTraceText( BasicProcess, M_Module.c_str(), 0, M_Read, "read:" );
-      dumpTrace
-      (
-         BasicProcess, M_Module.c_str(), 0, M_Read, Dst.size(),
-         &(*Dst.begin())
-      );
-      return R;
-   }
-
-   /**
-    *
-    * Protocol method extension. Writes a trace entry before actually
-    * calling the protocol::write method.
-    *
-   **/
-   PRet write( PData const & Src )
-      throw()
-   {
-      writeTraceText( BasicProcess, M_Module.c_str(), 0, M_Write, "write:" );
-      dumpTrace
-      (
-         BasicProcess, M_Module.c_str(), 0, M_Write, Src.size(),
-         &(*Src.begin())
-      );
-      return M_P.write( Src );
-   }
-
-   /**
-    *
-    * Protocol method extension. Writes a trace entry before actually
-    * calling the protocol::writeNonfinal method.
-    *
-   **/
-   PRet writeNonfinal( PData const & Src )
-      throw()
-   {
-      writeTraceText( BasicProcess, M_Module.c_str(), 0, M_Write, "write (nonfinal):" );
-      dumpTrace
-      (
-         BasicProcess, M_Module.c_str(), 0, M_Write, Src.size(),
-         &(*Src.begin())
-      );
-      return M_P.writeNonfinal( Src );
-   }
-
-private:
-
-   /**
-    *
-    * Default constructor - intentionally not implemented.
-    *
-   **/
-   mPTrace();
-
-   /**
-    *
-    * Copy constructor - intentionally not implemented.
-    *
-   **/
-   mPTrace( mPTrace const & );
-
-   /**
-    *
-    * Assignment - intentionally not implemented.
-    *
-   **/
-   mPTrace & operator=( mPTrace const & );
-
-};
-
-
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- *
- **************************************************************************
-**/
-
diff --git a/Interfaces/inc/massaiDeviceAlert.hpp b/Interfaces/inc/massaiDeviceAlert.hpp
deleted file mode 100644
index 479e6292..00000000
--- a/Interfaces/inc/massaiDeviceAlert.hpp
+++ /dev/null
@@ -1,97 +0,0 @@
-/**
- **************************************************************************
- *
- * @file massaiDeviceAlert.hpp
- *
- * Contains class massaiDeviceAlert definition.
- *
- * @author Juergen Kreierhoff
- *
- * Copyright (c) 2003-2004 MATERNA Information & Communications
- *
- **************************************************************************
-**/
-#ifndef MASSAIDEVICEALERT_HPP
-#define MASSAIDEVICEALERT_HPP
-
-
-
-/**
- **************************************************************************
- *
- * Receive and process alert events from the application.
- *
- **************************************************************************
-**/
-class massaiDeviceAlert
-{
-
-public:
-
-   /**
-    *
-    * Constructor.
-    *
-    * @param Device:    The name of the device as configured in "DEVICES".
-    *
-    * @param Alert:     The name of the alert variable extension. May
-    *                   be NULL, if there is none.
-    *
-   **/
-   explicit massaiDeviceAlert( char const * Device, char const * Alert );
-
-   /**
-    *
-    * Destructor.
-    *
-   **/
-   virtual ~massaiDeviceAlert();
-
-   /**
-    *
-    * Send an alert event.
-    *
-    * @param Value:     The alert value to send for this variable.
-    *
-   **/
-   void write( long Value ) const;
-
-   /**
-    *
-    * Can be overloaded to allow repetition of the alert transmission
-    * for a value.
-    *
-    * @param Value:     The alert value in question.
-    *
-   **/
-   virtual bool repeat( long Value ) const;
-
-private:
-
-   //! Default constructor - intentionally not implemented.
-   massaiDeviceAlert();
-
-   //! Copy constructor - intentionally not implemented.
-   massaiDeviceAlert( massaiDeviceAlert const & );
-
-   //! Assignment - intentionally not implemented.
-   massaiDeviceAlert & operator=( massaiDeviceAlert const & );
-
-   //! Handle class prototype.
-   friend class massaiDeviceAlert_Handle;
-
-   //! Handle to implementation details.
-   class massaiDeviceAlert_Handle * M_Handle;
-
-};
-
-
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- *
- **************************************************************************
-**/
diff --git a/Interfaces/inc/massaiDeviceMonitor.hpp b/Interfaces/inc/massaiDeviceMonitor.hpp
deleted file mode 100644
index 54de1f76..00000000
--- a/Interfaces/inc/massaiDeviceMonitor.hpp
+++ /dev/null
@@ -1,184 +0,0 @@
-/**
- **************************************************************************
- *
- * @file massaiDeviceMonitor.hpp
- *
- * Contains class massaiDeviceMonitor definition.
- *
- * @author Juergen Kreierhoff
- *
- * Copyright (c) 2003-2004 MATERNA Information & Communications
- *
- **************************************************************************
-**/
-#ifndef MASSAIDEVICEMONITOR_HPP
-#define MASSAIDEVICEMONITOR_HPP
-
-#include "massaiDeviceAlert.hpp"
-#include "massaiDevicePersist.hpp"
-
-#include <string>
-
-
-
-/**
- *
- * Device status monitor class.
- *
-**/
-class massaiDeviceMonitor
-{
-
-public:
-
-   /**
-    *
-    * Status subject base class. A status variable monitored by
-    * massaiDeviceMonitor shall be derived from this.
-    *
-   **/
-   class state
-   {
-   public:
-
-      //! Return the string representation.
-      virtual char const * c_str() const = 0;
-
-      //! Return if an alert with the given value is to be repeated.
-      virtual bool repeat( long ) const = 0;
-
-      //! Return the numeric status value.
-      virtual long scalarGet() const = 0;
-
-      //! Set the numeric status value.
-      virtual void scalarSet( long ) = 0;
-
-   };
-
-   /**
-    *
-    * Constructor
-    *
-    * @param State:     The state variable to observe.
-    *
-   **/
-   explicit massaiDeviceMonitor( state & State );
-
-   /**
-    *
-    * Destructor
-    *
-   **/
-   virtual ~massaiDeviceMonitor();
-
-   /**
-    *
-    * Set the alert instance.
-    *
-    * @param Device:    The name of the device as configured in "DEVICES".
-    *
-    * @param Alert:     The name of the alert variable extension. May
-    *                   be NULL, if there is none.
-    *
-   **/
-   void alertSet( char const * Device, char const * Alert = 0 );
-
-   /**
-    *
-    * Retrieve the string-form of the current state.
-    *
-    * @return The current state.
-    *
-   **/
-   char const * c_str() const;
-
-   /**
-    *
-    * Setup persistency names.
-    *
-    * @param Device:    The name of the device as configured in "DEVICES".
-    *
-    * @param Item:      The name of the configuration item to store the
-    *                   persistency.
-    *
-   **/
-   void persistency( char const * Device, char const * Item );
-
-   /**
-    *
-    * Retrieve the current state variable.
-    *
-    * @return A reference to the state variable.
-    *
-   **/
-   state const & stateGet() const;
-
-   /**
-    *
-    * Callback to indicate a valSet() has been called.
-    *
-   **/
-   virtual void valChanged();
-
-   /**
-    *
-    * Retrieve the current state value.
-    *
-    * @return The current value of the linked state variable.
-    *
-   **/
-   long valGet() const;
-
-   /**
-    *
-    * Change the current state value.
-    *
-    * @param NewValue:  The new value for the linked state variable.
-    *
-   **/
-   void valSet( long NewValue );
-
-private:
-
-   //! Default constructor - intentionally not implemented.
-   massaiDeviceMonitor();
-
-   //! Copy constructor - intentionally not implemented.
-   massaiDeviceMonitor( massaiDeviceMonitor const & );
-
-   //! Assignment - intentionally not implemented.
-   massaiDeviceMonitor & operator=( massaiDeviceMonitor const & );
-
-   /**
-    *
-    * The current state of the monitored object.
-    *
-   **/
-   state &                      M_State;
-
-   /**
-    *
-    * The alert instance to be informed.
-    *
-   **/
-   massaiDeviceAlert *          M_Alert;
-
-   /**
-    *
-    * The persistancy instance to be used.
-    *
-   **/
-   massaiDevicePersist *        M_Persist;
-
-};
-
-
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- *
- **************************************************************************
-**/
diff --git a/Interfaces/inc/massaiDevicePersist.hpp b/Interfaces/inc/massaiDevicePersist.hpp
deleted file mode 100644
index e2376465..00000000
--- a/Interfaces/inc/massaiDevicePersist.hpp
+++ /dev/null
@@ -1,93 +0,0 @@
-/**
- **************************************************************************
- *
- * @file massaiDevicePersist.hpp
- *
- * Contains class massaiDevicePersist.
- *
- * @author Juergen Kreierhoff
- *
- * Copyright (c) 2003-2005 MATERNA Information & Communications
- *
- **************************************************************************
-**/
-#ifndef MASSAIDEVICEPERSIST_HPP
-#define MASSAIDEVICEPERSIST_HPP
-
-#include "devicesDotStrDotStr.hpp"
-#include "nConfigNumber.hpp"
-
-#include <limits.h>
-
-
-
-/**
- *
- * Persistent integer variable class.
- *
- * Persistency is achieved by storing the integer value in a configuration
- * item of nConfig::gcNumber. The value is stored/retrieved by the base
- * class methods nConfig::gcNumber::set() and nConfig::gcNumber::get().
- *
-**/
-class massaiDevicePersist :
-   public devicesDotStrDotStr,
-   public nConfig::gcNumber
-{
-
-public:
-
-   /**
-    *
-    * Constructor.
-    *
-    * Do the setup of configuration variable named "DEVICES.<Dev>.<Var>".
-    *
-    * @param Device:    The name of the device as configured in "DEVICES".
-    *
-    * @param Item:      The name of the configuration item to store the
-    *                   persistency.
-    *
-   **/
-   massaiDevicePersist( char const * Device, char const * Item ) :
-      devicesDotStrDotStr( Device, Item ),
-      nConfig::gcNumber( devicesDotStrDotStr::c_str(), Device )
-   {
-   }
-
-private:
-
-   /**
-    *
-    * Create a configuration item.
-    *
-   **/
-   void create
-        (
-           char const * &      Rights,
-           char const * &      Expl,
-           long &              Def,
-           long &              Min,
-           long &              Max
-        )
-   {
-      Rights = "rw-";
-      Expl = "(by massaiDevicePersist)";
-      Def = 0; Min = LONG_MIN; Max = LONG_MAX;
-   }
-
-   //! Default constructor - intentionally not implemented.
-   massaiDevicePersist();
-
-};
-
-
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- *
- **************************************************************************
-**/
diff --git a/Interfaces/inc/massaiDeviceStock.hpp b/Interfaces/inc/massaiDeviceStock.hpp
deleted file mode 100644
index dc687819..00000000
--- a/Interfaces/inc/massaiDeviceStock.hpp
+++ /dev/null
@@ -1,176 +0,0 @@
-/**
- **************************************************************************
- *
- * @file massaiDeviceStock.hpp
- *
- * Contains class massaiDeviceStock.
- *
- * @author JK
- *
- * Copyright (c) 2003 MATERNA Information & Communications
- *
- **************************************************************************
-**/
-#ifndef MASSAIDEVICESTOCK_HPP
-#define MASSAIDEVICESTOCK_HPP
-
-
-
-/**
- *
- * Implementation handle class prototype.
- *
-**/
-class massaiDeviceStock_Handle;
-
-
-
-/**
- *
- * Stock info class
- *
-**/
-class massaiDeviceStock
-{
-
-   //! Implementation handle.
-   massaiDeviceStock_Handle *  M_Handle;
-
-   //! The stock identifier ( '1', '2' or '3' )
-   char const M_Id;
-
-   //! The number of coupons produced recently
-   int        M_Produced;
-
-   //! The number of coupons in stock
-   int        M_Number;
-
-public:
-
-   /**
-    *
-    * Constructor
-    *
-    * @param Id:        The stock identifier (should be ASCII-Printable).
-    *
-   **/
-   explicit massaiDeviceStock( char Id );
-
-   /**
-    *
-    * Add a number of coupons to the stock.
-    *
-    * @param Number:    The number to add to the stock.
-    *
-   **/
-   void add( int Number )
-   {
-      M_Number += Number;
-   }
-
-   /**
-    *
-    * Return stock id
-    *
-   **/
-   char id() const
-   {
-      return M_Id;
-   }
-
-   /**
-    *
-    * Returns stock-out condition.
-    *
-   **/
-   bool out() const;
-
-   /**
-    *
-    * Set stock-out condition.
-    *
-    * @param Out:       If true, the stock is out now.
-    *
-   **/
-   void out( bool Out );
-
-   /**
-    *
-    * Produce a number of coupons from the stock
-    *
-   **/
-   void use( int Produced = 0 )
-   {
-      M_Produced = Produced;
-      M_Number -= Produced;
-   }
-
-   /**
-    *
-    * Return the least recently produced coupons
-    *
-   **/
-   int produced()
-   {
-      return M_Produced;
-   }
-
-   /**
-    *
-    * Set the alert instance.
-    *
-    * @param Device:    The name of the device as configured in "DEVICES".
-    *
-    * @param Alert:     The name of the alert variable extension. May
-    *                   be NULL, if there is none.
-    *
-   **/
-   void alertSet( char const * Device, char const * Alert );
-
-   /**
-    *
-    * Setup persistency names.
-    *
-    * @param Device:    The name of the device as configured in "DEVICES".
-    *
-    * @param Item:      The name of the configuration item to store the
-    *                   persistency.
-    *
-   **/
-   void persistency( char const * Device, char const * Item );
-
-private:
-
-   /**
-    *
-    * Default constructor - intentionally not implemented.
-    *
-   **/
-   massaiDeviceStock();
-
-   /**
-    *
-    * Copy constructor - intentionally not implemented.
-    *
-   **/
-   massaiDeviceStock( massaiDeviceStock const & );
-
-   /**
-    *
-    * Assignment - intentionally not implemented.
-    *
-   **/
-   massaiDeviceStock & operator=( massaiDeviceStock const & );
-
-};
-
-
-
-#endif
-/**
- **************************************************************************
- *
- * End of file
- *
- **************************************************************************
-**/
-- 
2.41.0.windows.1

