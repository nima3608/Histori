From b89fed79da2d3f4515ba53310a4ddb036fe1b5f8 Mon Sep 17 00:00:00 2001
From: tgeisler <tgeisler@90b65887-3827-0410-9a23-83215b262276>
Date: Fri, 11 Nov 2011 13:00:06 +0000
Subject: [PATCH 0174/1076] MANTIS0021474: SelfServiceCommon Tools changes for
 VC10 compatibilty

git-svn-id: svn://localhost/SelfServiceCommon/trunk@216 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/Tools/localtrace.h         |  4 ++
 .../Interfaces/inc/Tools/mListenMDCI.hpp      |  4 ++
 .../Massai/cpp/Tools/makefile.mak             |  2 +-
 .../Massai/cpp/Tools/src/TraceInterface.cpp   |  3 +-
 .../Massai/cpp/Tools/src/bitarray.cpp         | 40 +++++++++----------
 .../Massai/cpp/Tools/src/localtrace.cpp       |  6 ++-
 .../Massai/cpp/Tools/src/tracesToTrc.cpp      |  6 ++-
 7 files changed, 38 insertions(+), 27 deletions(-)

diff --git a/SelfServiceCommon/Interfaces/inc/Tools/localtrace.h b/SelfServiceCommon/Interfaces/inc/Tools/localtrace.h
index 7284818c..d077d662 100644
--- a/SelfServiceCommon/Interfaces/inc/Tools/localtrace.h
+++ b/SelfServiceCommon/Interfaces/inc/Tools/localtrace.h
@@ -6,6 +6,10 @@
 
 #include "trc/tracedef.h"
 
+#ifndef __FUNCTION__ 
+#define __FUNCTION__ ""
+#endif
+
 namespace MASSAI
 {
   namespace localtrace
diff --git a/SelfServiceCommon/Interfaces/inc/Tools/mListenMDCI.hpp b/SelfServiceCommon/Interfaces/inc/Tools/mListenMDCI.hpp
index 7aee9b4d..047b7cc8 100644
--- a/SelfServiceCommon/Interfaces/inc/Tools/mListenMDCI.hpp
+++ b/SelfServiceCommon/Interfaces/inc/Tools/mListenMDCI.hpp
@@ -209,7 +209,11 @@ public:
       bool result= false;
       trace(ERROR_HERE, ex._name());
       trace(ERROR_HERE, ex._info().c_str());
+#ifdef _TAO_2_0_
+	if( ex._tao_type() == CORBA::_tc_COMM_FAILURE)
+#else	  
       if(ex._type() == CORBA::_tc_COMM_FAILURE)
+#endif
       {
         /*
           Some ORB implementations close unused TCP sockets (for example
diff --git a/SelfServiceCommon/Massai/cpp/Tools/makefile.mak b/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
index 4b6b18db..7be3189e 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/Tools/makefile.mak
@@ -8,7 +8,7 @@
 
 ######################################################################
 
-MY_CFLAGS =             -GR -G5 $(INC_INTERFACES) $(INC_REGEX) $(INC_BOOST)
+MY_CFLAGS =             $(MY_CFLAGS_2) $(INC_INTERFACES) $(INC_REGEX) $(INC_BOOST)
 
 MY_LIB1 =               $(LIB_TOOLS)
 
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/TraceInterface.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/TraceInterface.cpp
index 6d40ebf7..f0e2307c 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/src/TraceInterface.cpp
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/TraceInterface.cpp
@@ -12,10 +12,11 @@
 //---------------------------------------------------------------------------
 
 
-#include "Tools/TraceInterface.h"
 #include <stdarg.h>
 #include <stdio.h>
 
+#include "Tools/TraceInterface.h"
+
 namespace
 {
   enum CONSTS
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/bitarray.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/bitarray.cpp
index 6afd3d0a..c748ad36 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/src/bitarray.cpp
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/bitarray.cpp
@@ -12,15 +12,14 @@
 
 namespace
 {
-  using MASSAI::BitArray::byte;
   class BitMask
   {
     public:
       enum { BIT_COUNT= 8 };
       BitMask()
       {
-        byte bit_= 1;
-        byte tail_= 0;
+        MASSAI::BitArray::byte bit_= 1;
+        MASSAI::BitArray::byte tail_= 0;
         for(int i= BIT_COUNT; i-->0; )
         {
           head[i]= ~tail_;
@@ -32,10 +31,10 @@ namespace
         }
       };
 
-      byte bit[BIT_COUNT];   // bit[i]:  bit an position i: 1 sonst 0
-      byte mask[BIT_COUNT];  // mask[i]: bit an position i: 0 sonst 1
-      byte head[BIT_COUNT];  // head[i]: bit von position 0 bis i: 1 sonst 0
-      byte tail[BIT_COUNT];  // tail[i]: bit von position i bis ende: 1 sonst 0
+      MASSAI::BitArray::byte bit[BIT_COUNT];   // bit[i]:  bit an position i: 1 sonst 0
+      MASSAI::BitArray::byte mask[BIT_COUNT];  // mask[i]: bit an position i: 0 sonst 1
+      MASSAI::BitArray::byte head[BIT_COUNT];  // head[i]: bit von position 0 bis i: 1 sonst 0
+      MASSAI::BitArray::byte tail[BIT_COUNT];  // tail[i]: bit von position i bis ende: 1 sonst 0
   };
   BitMask bitmask;
 
@@ -43,16 +42,16 @@ namespace
   {
     public:
       virtual ~BitChange() {};
-      virtual void change(byte& data, size_t first, size_t last)
+      virtual void change(MASSAI::BitArray::byte& data, size_t first, size_t last)
       {
         change(data, bitmask.tail[first] & bitmask.head[last]);
       };
-      virtual void change(byte& data, byte mask)= 0;
+      virtual void change(MASSAI::BitArray::byte& data, MASSAI::BitArray::byte mask)= 0;
   };
   class BitSet: public BitChange
   {
     public:
-      virtual void change(byte& data, byte mask)
+      virtual void change(MASSAI::BitArray::byte& data, MASSAI::BitArray::byte mask)
       {
         data|= mask;
       }
@@ -60,7 +59,7 @@ namespace
   class BitFlip: public BitChange
   {
     public:
-      virtual void change(byte& data, byte mask)
+      virtual void change(MASSAI::BitArray::byte& data, MASSAI::BitArray::byte mask)
       {
         data^= mask;
       }
@@ -68,7 +67,7 @@ namespace
   class BitReset: public BitChange
   {
     public:
-      virtual void change(byte& data, byte mask)
+      virtual void change(MASSAI::BitArray::byte& data, MASSAI::BitArray::byte mask)
       {
         data&= ~mask;
       }
@@ -82,7 +81,7 @@ namespace
       throw std::out_of_range(out.str().c_str());
     }
   }
-  void bitChange(byte* data, size_t size, size_t index, size_t count, BitChange& change)
+  void bitChange(MASSAI::BitArray::byte* data, size_t size, size_t index, size_t count, BitChange& change)
   {
     if(count > 0)
     {
@@ -111,16 +110,15 @@ namespace
 
 namespace MASSAI
 {
-  using MASSAI::text::StringBuffer;
 
-  BitArray::BitArray(const byte* data, size_t size)
+  BitArray::BitArray(const MASSAI::BitArray::byte* data, size_t size)
   {
     copy(data, size, size);
   }
   BitArray::BitArray(size_t size):
     m_size(size),
     m_capacity(size),
-    m_data(StringBuffer(size))
+    m_data(MASSAI::text::StringBuffer(size))
   {}
   size_t BitArray::size() const
   {
@@ -159,15 +157,15 @@ namespace MASSAI
       }
     }
   }
-  const byte* BitArray::data() const
+  const MASSAI::BitArray::byte* BitArray::data() const
   {
     return m_data.udata();
   }
-  byte* BitArray::data()
+  MASSAI::BitArray::byte* BitArray::data()
   {
     return m_data.udata();
   }
-  const StringBuffer BitArray::buffer() const
+  const MASSAI::text::StringBuffer BitArray::buffer() const
   {
     return m_data;
   }
@@ -202,13 +200,13 @@ namespace MASSAI
     size_t offset = index % BitMask::BIT_COUNT;
     return (m_data.udata()[i] & bitmask.bit[offset]) != 0;
   }
-  void BitArray::copy(const byte* src, size_t size, size_t capacity)
+  void BitArray::copy(const MASSAI::BitArray::byte* src, size_t size, size_t capacity)
   {
     m_capacity= capacity;
     m_size= size;
     size_t bufsize= getBufferSize(m_capacity);
     size_t srcsize= getBufferSize(m_size);
-    m_data= StringBuffer(src, bufsize, srcsize);
+    m_data= MASSAI::text::StringBuffer(src, bufsize, srcsize);
   }
   size_t BitArray::getBufferSize(size_t size)
   {
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/localtrace.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/localtrace.cpp
index f77af077..5abb78fa 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/src/localtrace.cpp
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/localtrace.cpp
@@ -42,10 +42,12 @@ namespace
   }
   void printDump(long lDumpSize, const char* pDump)
   {
-    for(long i = 0; i < lDumpSize; i += 16)
+    long i;
+    for(i = 0; i < lDumpSize; i += 16)
     {
       printf("[%04x,%04d] ", i, i);
-      for(long j = 0; j < 16 && (i+j) < lDumpSize; j++)
+      long j;
+      for(j = 0; j < 16 && (i+j) < lDumpSize; j++)
       {
         if(j == 8)
         {
diff --git a/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTrc.cpp b/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTrc.cpp
index ba6fd669..69720304 100644
--- a/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTrc.cpp
+++ b/SelfServiceCommon/Massai/cpp/Tools/src/tracesToTrc.cpp
@@ -18,6 +18,10 @@
 #include "cfgclnt/nConfigNumber.hpp"
 #include "cfgclnt/nConfigSelection.hpp"
 #include "cfgclnt/nConfigText.hpp"
+
+// For SYSTEMTIME
+#include <windows.h>
+
 #include "Tools/tracesMac.hpp"
 #include "trc/TrcHdlClt.h"
 #include "Tools/TraceHandle.h"
@@ -25,8 +29,6 @@
 #include <iostream>
 #include <string>
 
-// For SYSTEMTIME
-#include <windows.h>
 
 
 
-- 
2.41.0.windows.1

