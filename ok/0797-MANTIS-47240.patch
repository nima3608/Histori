From dc146a1c9e0b903986580e7f085b1b25d4965709 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Thu, 31 Aug 2017 11:31:19 +0000
Subject: [PATCH 0797/1000] MANTIS 47240 Mantis 47240: Config service meta data
 access - Invent "CfgMeta.exe" - a tool to show and change meta-data

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1252 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/CfgTools/inc/CfgMeta_def.h     |  31 ++
 .../Massai/cpp/CfgTools/makefile.mak          |  25 ++
 .../Massai/cpp/CfgTools/res/CfgMeta.rc        |  49 +++
 .../Massai/cpp/CfgTools/src/CfgMeta.cpp       | 320 ++++++++++++++++++
 4 files changed, 425 insertions(+)
 create mode 100644 SelfServiceCommon/Massai/cpp/CfgTools/inc/CfgMeta_def.h
 create mode 100644 SelfServiceCommon/Massai/cpp/CfgTools/res/CfgMeta.rc
 create mode 100644 SelfServiceCommon/Massai/cpp/CfgTools/src/CfgMeta.cpp

diff --git a/SelfServiceCommon/Massai/cpp/CfgTools/inc/CfgMeta_def.h b/SelfServiceCommon/Massai/cpp/CfgTools/inc/CfgMeta_def.h
new file mode 100644
index 00000000..b035082f
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CfgTools/inc/CfgMeta_def.h
@@ -0,0 +1,31 @@
+//-------------------------------------------------------------------------
+//
+// Characteristics for CfgMeta.exe
+//
+//-------------------------------------------------------------------------
+
+
+//-------------------------------------------------------------------------
+//
+// Versions
+//
+//
+#define FILE_VER_BIN 1,0,0,0
+#define FILE_VER_DTS "1.0.0.0\0"
+//
+//-------------------------------------------------------------------------
+
+
+#define FILEDESCRIPTION  "FileDescription"  ,"CfgMeta\0"
+#define INTERNALNAME     "InternalName"     ,"CfgMeta\0"
+#define LEGALTRADEMARKS  "LegalTrademarks"  ,"\0"
+#define ORIGINALFILENAME "OriginalFilename" ,"CfgMeta.exe\0"
+#define FILE_VER_STR     "FileVersion"      ,FILE_VER_DTS
+
+
+//-------------------------------------------------------------------------
+//
+// End of file
+//
+//-------------------------------------------------------------------------
+
diff --git a/SelfServiceCommon/Massai/cpp/CfgTools/makefile.mak b/SelfServiceCommon/Massai/cpp/CfgTools/makefile.mak
index 839949de..817a5e59 100644
--- a/SelfServiceCommon/Massai/cpp/CfgTools/makefile.mak
+++ b/SelfServiceCommon/Massai/cpp/CfgTools/makefile.mak
@@ -185,4 +185,29 @@ MY_BIN7_GEN_DIRS = \
     $(GEN_MASSAI_COMMON)
 
 ######################################################################
+
+MY_BIN8 = \
+    $(_BIN)\CfgMeta.exe
+
+MY_BIN8_RES = \
+    $(_OBJ)\CfgMeta.res
+
+MY_BIN8_OBJS = \
+    $(_OBJ)\CfgMgr.obj \
+    $(_OBJ)\CfgMgr_skel.obj \
+    $(_OBJ)\CfgMeta.obj
+
+MY_BIN8_USER_LIBS = \
+    $(LIB_MASSAI) \
+    $(LIB_MCORBA) \
+    $(LIB_MCFGCLNT)
+
+MY_BIN8_LINKLIBS = \
+    $(SYS_ACETAO)
+
+MY_BIN8_GEN_DIRS = \
+    $(GEN_MASSAI_COMMON)
+
+######################################################################
+
 !include $(BUILDROOT)\Build\cpp\makefile.rules.mak
diff --git a/SelfServiceCommon/Massai/cpp/CfgTools/res/CfgMeta.rc b/SelfServiceCommon/Massai/cpp/CfgTools/res/CfgMeta.rc
new file mode 100644
index 00000000..bc90d7c6
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CfgTools/res/CfgMeta.rc
@@ -0,0 +1,49 @@
+//
+// CfgMeta.rc
+//
+#include "Global_def.h"
+#include "CfgMeta_def.h"
+
+#include "winver.h"
+
+
+
+VS_VERSION_INFO VERSIONINFO
+ FILEVERSION FILE_VER_BIN
+ PRODUCTVERSION PRODUCT_VER_BIN
+ FILEFLAGSMASK 0x3fL
+#ifdef _DEBUG
+ FILEFLAGS 0x1L
+#else
+ FILEFLAGS 0x0L
+#endif
+ FILEOS 0x40004L
+ FILETYPE 0x2L
+ FILESUBTYPE 0x0L
+BEGIN
+    BLOCK "StringFileInfo"
+    BEGIN
+        BLOCK "040704b0"
+        BEGIN
+            VALUE COMPANY
+            VALUE FILEDESCRIPTION
+            VALUE FILE_VER_STR
+            VALUE INTERNALNAME
+            VALUE COPYRIGHT
+            VALUE LEGALTRADEMARKS
+            VALUE ORIGINALFILENAME
+            VALUE PRODUCT
+            VALUE PRODUCT_VER_STR
+        END
+    END
+    BLOCK "VarFileInfo"
+    BEGIN
+        VALUE "Translation", 0x407, 1200
+    END
+END
+
+
+
+//
+// End of file
+//
diff --git a/SelfServiceCommon/Massai/cpp/CfgTools/src/CfgMeta.cpp b/SelfServiceCommon/Massai/cpp/CfgTools/src/CfgMeta.cpp
new file mode 100644
index 00000000..02754645
--- /dev/null
+++ b/SelfServiceCommon/Massai/cpp/CfgTools/src/CfgMeta.cpp
@@ -0,0 +1,320 @@
+/**
+ **************************************************************************
+ *
+ * @file CfgMeta.cpp
+ *
+ * Configuration database management utility.
+ *
+ * @author Juergen Kreierhoff
+ *
+ * Copyright (c) 2017 MATERNA Information & Communications
+ *
+ **************************************************************************
+**/
+
+#include "massaiCorba/orbIncDefs.h"
+#include "massaiCorba/corbaclnt.h"
+
+#include "cfgclnt/CfgMgrIPC.h"
+
+#include "CfgMgr.h"
+
+#include "cfgToken.h"
+
+#include "text/mArgScan.hpp"
+#include <iostream>
+#include <fstream>
+
+#define DSPLERR "CfgMeta - "
+#define DSPLLIN "CfgMeta: "
+
+#define HINDENT1 "          "
+#define HINDENT2 "                           "
+
+
+
+/**
+ *
+ * Generate ATSAVER string.
+ *
+**/
+#include "CfgMeta_def.h"
+
+#define MAT_VERS_ID "$Materna$Ver$Rel$Rev: "
+
+char _atsaver[] = MAT_VERS_ID FILE_VER_DTS;
+
+
+
+namespace
+{
+
+
+   struct semanticDump
+   {
+      Config::semanticType      stc;
+      char const *              stt;
+   };
+
+
+   semanticDump const l_semantic_dump[] =
+   {
+      { Config::ST_UNKNOWN,      "UNKNOWN" },
+      { Config::ST_NONE,         "NONE" },
+      { Config::ST_PASSWORD,     "PASSWORD" },
+      { Config::ST_URL,          "URL" },
+      { Config::ST_HOSTNAME,     "HOSTNAME" },
+      { Config::ST_IP_ADDRESS,   "IP_ADDRESS" },
+      { Config::ST_UNKNOWN,      0 }
+   };
+
+
+   char const * c_str( Config::semanticType st )
+   {
+      semanticDump const * ptr = l_semantic_dump;
+      while( ptr->stt )
+      {
+         if( ptr->stc == st )
+         {
+            return ptr->stt;
+         }
+         ptr += 1;
+      }
+      return "?";
+   }
+
+
+   std::string plain( char const * src )
+   {
+      std::string r;
+      if( src )
+      {
+         char c = *src++;
+         while( c )
+         {
+            if( ( c >= ' ' ) && ( c <= 'z' ) )
+            {
+               r += c;
+            }
+            else
+            {
+               r += '~';
+            }
+            c = *src++;
+         }
+      }
+      return r;
+   }
+
+
+   bool handleTextMeta
+      (
+         argScan & arg_scan,
+         char const * cfg_host,
+         char const * auth,
+         char const * item_name
+      )
+   {
+      Config::Text2 *        cfg_proxy = 0;
+      Config::access         acc;
+      acc.Authorization = CORBA::string_dup( auth );
+      acc.Item = CORBA::string_dup( item_name );
+      corbaClient<Config::Text2> * cfg_client =
+         new corbaClient<Config::Text2>
+         ( cfg_host, CFGMGR_PORT, CFGMGR_SRVNAME_TEXT2 );
+      cfg_proxy = cfg_client->proxy();
+      if( !cfg_proxy )
+                  {
+                     std::cout
+                        << DSPLERR "Could not connect the TEXT servant."
+                        << std::endl;
+                     return false;
+                  }
+      {
+         try
+         {
+            Config::Text2::metaData_var md;
+            char const * val = cfg_proxy->getWithMeta( acc, md );
+            if( val )
+            {
+               std::cout
+                  << DSPLLIN "getWithMeta(" << item_name << ") "
+                  << "= \"" << val << "\""
+                  << std::endl;
+               bool changed_meta = false;
+               char const * new_expl = arg_scan.option( "EXPLANATION" );
+               if( new_expl )
+               {
+                  changed_meta = true;
+                  md->Desc.Explanation = CORBA::string_dup( new_expl );
+                  std::cout << "\t-> changed Explanation" << std::endl;
+               }
+               char const * new_regex = arg_scan.option( "REGEX" );
+               if( new_regex )
+               {
+                  changed_meta = true;
+                  md->RegEx = CORBA::string_dup( new_regex );
+                  std::cout << "\t-> changed RegEx" << std::endl;
+               }
+               char const * new_semantic = arg_scan.option( "SEMANTIC" );
+               if( new_semantic )
+               {
+                  semanticDump const * ptr = l_semantic_dump;
+                  bool found = false;
+                  while( !found && ptr->stt )
+                  {
+                     if( !strcmp( ptr->stt, new_semantic ) )
+                     {
+                        found = true;
+                        changed_meta = true;
+                        md->Semantic = ptr->stc;
+                        std::cout << "\t-> changed Semantic" << std::endl;
+                     }
+                     ptr += 1;
+                  }
+                  if( !found )
+                  {
+                     std::cout
+                        << "\t-> unknown semantic \""
+                        << new_semantic << "\""
+                        << std::endl;
+                  }
+               }
+               if( changed_meta )
+               {
+                  cfg_proxy->setMeta2( acc, md );
+               }
+               std::cout
+                  << "\tExplanation = \"" << plain( md->Desc.Explanation )
+                  << "\"\n\tRights = \"" << md->Desc.Rights
+                  << "\"\n\tMinLength = " << md->MinLength
+                  << "\n\tMaxLength = " << md->MaxLength
+                  << "\n\tRegEx = \"" << md->RegEx
+                  << "\"\n\tSemantic = " << c_str( md->Semantic )
+                  << std::endl;
+            }
+         }
+         catch( Config::Node::notFound & )
+         {
+            return false;
+         }
+      }
+      return true;
+   }
+
+
+} // namspace
+
+
+
+/**
+ *
+ * Retrieve the value
+ *
+**/
+int main( int argc, char ** argv )
+{
+   try
+   {
+      argScan arg_scan( argc, argv );
+      char const * cfg_host = arg_scan.option( "HOST" );
+      if( cfg_host )
+      {
+         std::cout << DSPLLIN "CfgMgr host:" << cfg_host << std::endl;
+      }
+      else
+      {
+         cfg_host = CFGMGR_HOST;
+      }
+      char const * item_name = arg_scan.argument( 1 );
+      if( item_name && item_name[0] )
+      {
+         //
+         // Item is specified
+         //
+         if( handleTextMeta( arg_scan, cfg_host, argv[0], item_name ) )
+         {
+            return 0;
+         }
+#if 0
+         //TODO
+         if( handleTextlistMeta( arg_scan, cfg_host, argv[0], item_name ) )
+         {
+            return 0;
+         }
+         //TODO
+         if( handleNumberMeta( arg_scan, cfg_host, argv[0], item_name ) )
+         {
+            return 0;
+         }
+#endif
+         std::cout << DSPLERR "Unknown value type" << std::endl;
+      }
+      else
+      {
+         //
+         // Item not specified
+         //
+         std::cout
+            << "CfgMeta Vers." << _atsaver + 22 << "\n"
+            << HINDENT1
+               "Copyright (c) 2017 MATERNA Information & Communications\n"
+            << HINDENT1 "usage:"
+               " CfgMeta"
+               " [-host:<Config-host>] <item>\n"
+            << std::endl;
+      }
+      return 0;
+   }
+   catch( Config::Node::notFound & )
+   {
+      std::cout << DSPLERR "Got notFound exception" << std::endl;
+   }
+   catch( Config::Node::wrongParam & )
+   {
+      std::cout << DSPLERR "Got wrongParam exception" << std::endl;
+   }
+   catch( Config::Node::noConfiguration & )
+   {
+      std::cout << DSPLERR "Got noConfiguration exception" << std::endl;
+   }
+   catch( Config::Node::notAuthorized & )
+   {
+      std::cout << DSPLERR "Got notAuthorized exception" << std::endl;
+   }
+   catch( Config::Node::notCreated & )
+   {
+      std::cout << DSPLERR "Got notCreated exception" << std::endl;
+   }
+   catch( Config::Node::outOfRange & )
+   {
+      std::cout << DSPLERR "Got outOfRange exception" << std::endl;
+   }
+   catch( Config::Node::alreadyExists & )
+   {
+      std::cout << DSPLERR "Got alreadyExists exception" << std::endl;
+   }
+   catch( CORBA::Exception & X )
+   {
+      std::cout << DSPLERR "Got CORBA::Exception: " << X << std::endl;
+   }
+   catch( std::exception & X )
+   {
+      std::cout << DSPLERR "Got std::exception: " << X.what() << std::endl;
+   }
+   catch( ... )
+   {
+      std::cout << DSPLERR "Got unknown exception" << std::endl;
+   }
+   return 1;
+}
+
+
+
+/**
+ **************************************************************************
+ *
+ * End of file
+ *
+ **************************************************************************
+**/
-- 
2.41.0.windows.1

