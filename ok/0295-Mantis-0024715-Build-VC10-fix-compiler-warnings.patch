From f3d7ee46f1a74c298237617655fa6170cfa1c98c Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 27 Nov 2012 20:03:19 +0000
Subject: [PATCH 0295/1000] Mantis 0024715: Build: VC10; fix compiler warnings
 graphic.lib V1.0.0.2

git-svn-id: svn://localhost/SelfServiceCommon/trunk@444 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/cpp/Graphic/src/barcode128.cpp     | 30 +++++++++++++------
 .../Massai/cpp/Graphic/src/barcode39.cpp      |  2 +-
 .../cpp/Graphic/src/barcodeIndustrial2of5.cpp |  2 +-
 .../Graphic/src/barcodeInterleaved2of5.cpp    |  4 +--
 .../cpp/Graphic/src/blackAndWhiteBitmap.cpp   |  2 +-
 .../Massai/cpp/Graphic/src/local_def.cpp      | 27 +++++++++--------
 6 files changed, 41 insertions(+), 26 deletions(-)

diff --git a/SelfServiceCommon/Massai/cpp/Graphic/src/barcode128.cpp b/SelfServiceCommon/Massai/cpp/Graphic/src/barcode128.cpp
index bd0ed984..79957b4d 100644
--- a/SelfServiceCommon/Massai/cpp/Graphic/src/barcode128.cpp
+++ b/SelfServiceCommon/Massai/cpp/Graphic/src/barcode128.cpp
@@ -37,7 +37,6 @@ namespace
     BC_128_STOP_VALUE = 106
   };
 
-
   struct BC_128_Barcode
   {
     BC128_Value value;
@@ -154,6 +153,7 @@ namespace
     {105, {2, 1, 1, 2, 3, 2, 0}},
     {106, {2, 3, 3, 1, 1, 1, 2}}
   };
+
   size_t getBarcodePixelCount(const std::string barcodeData)
   {
     size_t result= 0;
@@ -174,6 +174,7 @@ namespace
     }
     return result;
   }
+
   MASSAI::BitArray createBarcodePixel(const std::string barcodeData, const Barcode128Settings& settings)
   {
     size_t width= getBarcodePixelCount(barcodeData) * settings.blockSize;
@@ -220,19 +221,19 @@ namespace
     BC_128_CODE_B,
     BC_128_CODE_C,
   };
+
   struct BC_128_CharState
   {
     size_t digitCount;
     bool useCodeA;
     bool useCodeB;
   };
+
   BC_128_CharState stateUseAny= {0, true, true};
   BC_128_CharState stateUseA= {0, true, false};
   BC_128_CharState stateUseB= {0, false, true};
   BC_128_CharState stateUseNone= {0, false, false};
 
-
-
   BC128_Value getValueTypeA(char in)
   {
     // NUL..US
@@ -246,6 +247,7 @@ namespace
     else
       return invalidBCValue;
   }
+
   BC128_Value getValueTypeB(char in)
   {
     // Space!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'abcdefghijklmnopqrstuvwxyz{|}~DEL
@@ -255,6 +257,7 @@ namespace
     else
       return invalidBCValue;
   }
+
   BC128_Value getValue(BC_128_Code code, char in)
   {
     switch(code)
@@ -264,6 +267,7 @@ namespace
     }
     return invalidBCValue;
   }
+
   BC128_Value getStartCode(BC_128_Code code)
   {
     switch(code)
@@ -274,6 +278,7 @@ namespace
     }
     return invalidBCValue;
   }
+
   BC128_Value getSwitchCode(BC_128_Code code)
   {
     switch(code)
@@ -284,10 +289,12 @@ namespace
     }
     return invalidBCValue;
   }
+
   BC128_Value getShiftCode()
   {
     return BC_128_SHIFT_VALUE;
   }
+
   BC128_Value getStopCode()
   {
     return BC_128_STOP_VALUE;
@@ -297,7 +304,7 @@ namespace
   {
     std::string validData;
     validData.reserve(data.size());
-    for(int i= 0; i < data.size(); i++)
+    for(unsigned int i= 0; i < data.size(); i++)
     {
       if(isdigit(data[i])
         || (settings.allowCodeA && getValueTypeA(data[i]) != invalidBCValue)
@@ -308,13 +315,14 @@ namespace
     }
     return validData;
   }
+
   typedef std::vector<BC_128_CharState> StateVector;
   StateVector getStates(const std::string& data)
   {
     StateVector states(data.size());
     BC_128_CharState state= stateUseAny;
 
-    for(int i= data.size() - 1; i >= 0; i--)
+    for(unsigned int i= data.size() - 1; i >= 0; i--)
     {
       if(isdigit(data[i]))
       {
@@ -349,6 +357,7 @@ namespace
     }
     return states;
   }
+
   BC_128_Code getStartCode(const StateVector& states, const Barcode128Settings& settings)
   {
     BC_128_Code code= BC_128_CODE_A;
@@ -384,6 +393,7 @@ namespace
     }
     return code;
   }
+
   struct CheckSum
   {
     public:
@@ -411,7 +421,8 @@ namespace
     check.addValue(result.size(), value);
     result.append(1, value);
   }
-  void appendCode(std::string& result, CheckSum& check, const std::string& data, int& source, BC_128_Code code)
+
+  void appendCode(std::string& result, CheckSum& check, const std::string& data, unsigned int& source, BC_128_Code code)
   {
     switch(code)
     {
@@ -440,7 +451,8 @@ namespace
       }
     }
   }
-  BC_128_Code getSwitchCode(const StateVector& states, int position, BC_128_Code& code, const Barcode128Settings& settings)
+
+  BC_128_Code getSwitchCode(const StateVector& states, unsigned int position, BC_128_Code& code, const Barcode128Settings& settings)
   {
     BC_128_Code result= code;
     bool shift= false;
@@ -520,6 +532,7 @@ namespace
     }
     return result;
   }
+
   std::string createBarcodeData_(const std::string& data, const Barcode128Settings& settings)
   {
     std::string validData = filterValidData(data, settings);
@@ -529,7 +542,7 @@ namespace
     std::string result;
     result.reserve(validData.size() * 2 + 2);
     CheckSum check;
-    int i= 0;
+    unsigned int i= 0;
     appendCode(result, check, getStartCode(code));
     while(i < validData.size())
     {
@@ -552,7 +565,6 @@ namespace
   }
 }
 
-
 namespace MASSAI
 {
   namespace Barcode
diff --git a/SelfServiceCommon/Massai/cpp/Graphic/src/barcode39.cpp b/SelfServiceCommon/Massai/cpp/Graphic/src/barcode39.cpp
index 42b7b87c..78ae0dc7 100644
--- a/SelfServiceCommon/Massai/cpp/Graphic/src/barcode39.cpp
+++ b/SelfServiceCommon/Massai/cpp/Graphic/src/barcode39.cpp
@@ -245,7 +245,7 @@ namespace
     result.reserve(data.size() + 3);
     CheckSum check;
     appendCode(result, check, getStartCode());
-    for(int i= 0; i < data.size(); i++)
+    for(unsigned int i= 0; i < data.size(); i++)
     {
       appendCode(result, check, getValue(data[i]));
     }
diff --git a/SelfServiceCommon/Massai/cpp/Graphic/src/barcodeIndustrial2of5.cpp b/SelfServiceCommon/Massai/cpp/Graphic/src/barcodeIndustrial2of5.cpp
index e29742d9..0c4d2bb7 100644
--- a/SelfServiceCommon/Massai/cpp/Graphic/src/barcodeIndustrial2of5.cpp
+++ b/SelfServiceCommon/Massai/cpp/Graphic/src/barcodeIndustrial2of5.cpp
@@ -190,7 +190,7 @@ namespace
     result.reserve(data.size() + 3);
     CheckSum check;
     appendCode(result, check, getStartCode());
-    for(int i= 0; i < data.size(); i++)
+    for(unsigned int i= 0; i < data.size(); i++)
     {
       appendCode(result, check, getValue(data[i]));
     }
diff --git a/SelfServiceCommon/Massai/cpp/Graphic/src/barcodeInterleaved2of5.cpp b/SelfServiceCommon/Massai/cpp/Graphic/src/barcodeInterleaved2of5.cpp
index e5409082..9dd14557 100644
--- a/SelfServiceCommon/Massai/cpp/Graphic/src/barcodeInterleaved2of5.cpp
+++ b/SelfServiceCommon/Massai/cpp/Graphic/src/barcodeInterleaved2of5.cpp
@@ -207,7 +207,7 @@ namespace
   {
     int size= 0;
     // count valid character
-    for(int i= 0; i < data.size(); i++)
+    for(unsigned int i= 0; i < data.size(); i++)
     {
       if(getValue(data[i]) != invalidBCValue)
       {
@@ -227,7 +227,7 @@ namespace
     {
       appendCode(result, check, getValue('0'));
     }
-    for(int j= 0; j < data.size(); j++)
+    for(unsigned int j= 0; j < data.size(); j++)
     {
       appendCode(result, check, getValue(data[j]));
     }
diff --git a/SelfServiceCommon/Massai/cpp/Graphic/src/blackAndWhiteBitmap.cpp b/SelfServiceCommon/Massai/cpp/Graphic/src/blackAndWhiteBitmap.cpp
index ad111c9a..caaab0cd 100644
--- a/SelfServiceCommon/Massai/cpp/Graphic/src/blackAndWhiteBitmap.cpp
+++ b/SelfServiceCommon/Massai/cpp/Graphic/src/blackAndWhiteBitmap.cpp
@@ -85,7 +85,7 @@ namespace MASSAI
       buffer.append(reinterpret_cast<const char *>(colortable), sizeof(colortable));
 
       size_t alignment = aligned_row_byte_count - row_byte_count;
-      for(int y= 0; y < result.height; y++)
+      for(unsigned int y= 0; y < result.height; y++)
       {
         buffer.append(pixel.getRow(y).data(), row_byte_count);
         buffer.append("\0\0\0", alignment);
diff --git a/SelfServiceCommon/Massai/cpp/Graphic/src/local_def.cpp b/SelfServiceCommon/Massai/cpp/Graphic/src/local_def.cpp
index d713599b..7e3120a5 100644
--- a/SelfServiceCommon/Massai/cpp/Graphic/src/local_def.cpp
+++ b/SelfServiceCommon/Massai/cpp/Graphic/src/local_def.cpp
@@ -1,14 +1,17 @@
 #include "Tools/VERSIONLIB.h"
 
-/*! \page graphic graphic library - Release Notes
- *
- *
- *  \date 25.02.2011 \li V1.0.0.1
- *                   \li SteT Bugfix Interleaved2of5 ignore invalid character
- *
- *  \date 19.10.2010 \li V1.0.0.0
- *                   \li SteT Initial Version
- *
- */
-
-VERSION_ID_DT(graphic, 1, 0, 0, 1);
+/*!
+\page graphic graphic library - Release Notes
+
+\date 25.02.2011 \li V1.0.0.2
+                 \li SteT fixed warnings
+
+\date 25.02.2011 \li V1.0.0.1
+                 \li SteT Bugfix Interleaved2of5 ignore invalid character
+
+\date 19.10.2010 \li V1.0.0.0
+                 \li SteT Initial Version
+
+*/
+
+VERSION_ID_DT(graphic, 1, 0, 0, 2);
-- 
2.41.0.windows.1

