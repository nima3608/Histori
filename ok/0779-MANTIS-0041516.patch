From 7def524640a9107f9cb32681a12e642b207d17f0 Mon Sep 17 00:00:00 2001
From: tgeisler <tgeisler@90b65887-3827-0410-9a23-83215b262276>
Date: Fri, 12 Aug 2016 09:29:33 +0000
Subject: [PATCH 0779/1076] MANTIS 0041516 Devicehandler for generic volume
 control

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1065 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/idl/Massai/makefile.mak            |  3 +-
 .../Massai/idl/Massai/volumecontroldev.idl    | 87 +++++++++++++++++++
 2 files changed, 89 insertions(+), 1 deletion(-)
 create mode 100644 SelfServiceCommon/Massai/idl/Massai/volumecontroldev.idl

diff --git a/SelfServiceCommon/Massai/idl/Massai/makefile.mak b/SelfServiceCommon/Massai/idl/Massai/makefile.mak
index 9dcf2d23..c643a7a5 100644
--- a/SelfServiceCommon/Massai/idl/Massai/makefile.mak
+++ b/SelfServiceCommon/Massai/idl/Massai/makefile.mak
@@ -42,6 +42,7 @@ MY_GEN_CPPS = \
     $(_GEN)\second_screen.cpp \
     $(_GEN)\illudev.cpp \
     $(_GEN)\AnnounceDev.cpp \
-    $(_GEN)\touchscreendev.cpp    
+    $(_GEN)\touchscreendev.cpp \
+    $(_GEN)\volumecontroldev.cpp    
 
 !include $(BUILDROOT)\Build\cpp\makefile.rules.mak
diff --git a/SelfServiceCommon/Massai/idl/Massai/volumecontroldev.idl b/SelfServiceCommon/Massai/idl/Massai/volumecontroldev.idl
new file mode 100644
index 00000000..de7a25c3
--- /dev/null
+++ b/SelfServiceCommon/Massai/idl/Massai/volumecontroldev.idl
@@ -0,0 +1,87 @@
+//---------------------------------------------------------------------------
+//
+//  file:     volumecontroldev.idl
+//
+//  purpose:  interface to a volume control devices
+//
+//  date:     03.08.2016
+//
+//---------------------------------------------------------------------------
+
+#ifndef VOLUMECONTROLDEV_IDL
+#define VOLUMECONTROLDEV_IDL
+
+#ifdef USE_TAO_ORB_IDL
+   #ifdef _TAO_2_0_
+      #include "tao\orb.idl"
+   #endif
+#endif
+
+#pragma prefix "DeviceComponents.massai.materna.com"
+
+module volumeControlDev
+{
+  const string interface_version = "1.0";
+
+  /** Function return codes */
+  enum RC
+  {
+    RC_OK,         	                      /**<  Function was successful executed */
+    RC_ERROR,        	                    /**<  Function failed */
+    RC_NOT_SUPPORTED                      /**<  Function is not supported */
+  };
+
+  /** Output method types */
+  enum OutputMethod
+  {
+    OM_ALL,         	                    /**<  All output methods */
+    OM_SPEAKER,        	                  /**<  Speaker only */
+    OM_HEADSET        	                  /**<  Headset only */
+  };
+
+  interface volumeControl
+  {
+    /** The name of the hardware device */
+    readonly attribute string             device_name;
+
+    /** Signs if the device is working and accepts commands */
+    readonly attribute boolean            is_ok;
+
+    /** Supported output methods */
+    readonly attribute OutputMethod       supported_output_method;
+
+    /** Execute a reset of the device. This includes that the volumes and the mute states are set to default values */
+    RC reset();
+    
+    /** Set the volume for a specific output method */
+    /** The volume may be set as an absolute value (relative = false) in the range from 0.0 to 1.0 */
+    /** Use a relative (relative = true) value in the range from -1.0 to 1.0 to adjust the actual volume. The volume value will be added to the actual volume. */
+    RC set_volume(in OutputMethod output_method, in float volume, in boolean relative);
+
+    /** Get the volume for a specific output method */
+    /** The volume is returned in the range from 0.0 to 1.0 */
+    RC get_volume(in OutputMethod output_method, out float volume);
+    
+    /** Set the default volume for a specific output method */
+    /** The default volume may be set as a value in the range from 0.0 to 1.0 */
+    RC set_default_volume(in OutputMethod output_method, in float default_volume);
+
+    /** Get the default volume for a specific output method */
+    /** The volume is returned in the range from 0.0 to 1.0 */
+    RC get_default_volume(in OutputMethod output_method, out float default_volume);
+
+    /** Mute a specific output method */
+    RC mute(in OutputMethod output_method, in boolean mute);
+    
+    /** Get the mute state for a specific output method */
+    RC is_muted(in OutputMethod output_method, out boolean mute);
+    
+    /** Set the default mute state for a specific output method */
+    RC set_default_mute_state(in OutputMethod output_method, in boolean default_mute);
+
+    /** Get the default mute state for a specific output method */
+    RC get_default_mute_state(in OutputMethod output_method, out boolean default_mute);
+  };
+};
+
+#endif // VOLUMECONTROLDEV_IDL
-- 
2.41.0.windows.1

