From 0e574cabce6ba1345b6759c6b97b73bd9b7056aa Mon Sep 17 00:00:00 2001
From: tstegema <tstegema@90b65887-3827-0410-9a23-83215b262276>
Date: Wed, 5 Mar 2014 13:34:45 +0000
Subject: [PATCH 0447/1000] added comments for using the gmrdev interface

git-svn-id: svn://localhost/SelfServiceCommon/trunk@654 90b65887-3827-0410-9a23-83215b262276
---
 .../Massai/idl/Massai/gmrdev.idl              | 253 ++++++++----------
 1 file changed, 117 insertions(+), 136 deletions(-)

diff --git a/SelfServiceCommon/Massai/idl/Massai/gmrdev.idl b/SelfServiceCommon/Massai/idl/Massai/gmrdev.idl
index b8d02387..552fe5d7 100644
--- a/SelfServiceCommon/Massai/idl/Massai/gmrdev.idl
+++ b/SelfServiceCommon/Massai/idl/Massai/gmrdev.idl
@@ -1,17 +1,9 @@
-/**
- **************************************************************************
- *
- * @file gmrdev.idl
- *
- * Contains module gmrdev, which is the platform-internal interface
- * definition for generic massai multi reader device components.
- *
- * @version 1.1
- *
- * @author Nicolas Bruns
- *
- **************************************************************************
+/** Contains module gmrdev, which is the platform-internal interface
+    definition for generic massai multi reader device components. 
+    @version 1.1
+    @author Nicolas Bruns 
 **/
+
 #ifndef GMRDEV
 #define GMRDEV
 
@@ -23,34 +15,45 @@
 
 #include "gmdev.idl"
 
-
-
-/**
- * The pragma statement must be defined after the last include statement,
- * because some ORB implementations do not handle the scope correctly.
-**/
+/** The pragma statement must be defined after the last include statement,
+    because some ORB implementations do not handle the scope correctly. **/
 #pragma prefix "multidevices.DeviceComponents.massai.materna.com"
 
 
-
-/**
- *
- * Generic MASSAI Device Component interface module for multi reader devices
- *
-**/
+/** Generic MASSAI Device Component interface module for multi reader devices **/
 module gmrdev
 {
-  
-  /**
-   *  Data for component depending commands
-   */
+/*
+using DeviceComponents::indicationListener and DeviceComponents::Generic from mdci.idl
+  RC indicationListener::indication(in any ind);
+    with ind: DeviceComponents::indication
+      with ind.type: gmrdev::indicationType
+      with ind.status: gmrdev::status
+        completionCode and errorStatus is the same for all compStatus elements in status.statusMessage
+      with ind.data: gmrdev::readerDataType            for IND_SETUP_DONE, IND_DATA
+      with ind.data: gmrdev::compDataTypeList          for IND_QUERY_DATA_TYPE_DONE
+      with ind.data: gmrdev::devFunctionality          for IND_COMPS_INFO
+      with ind.data: DeviceComponents::nullData        for the others
+  RC Generic::exec(in any cmd);
+    with cmd: DeviceComponents::command
+      with cmd.type: gmrdev::commandType
+      with cmd.data: gmrdev::multiCompCmdData        
+        with cmd.data.data: string                     for CMD_CONTEXT_SWITCH       
+        with cmd.data.data: gmrdev::compDataType       for CMD_SELECT_DATA_TYPE
+        with cmd.data.data: DeviceComponents::nullData for CMD_CANCEL, CMD_EJECT, CMD_RETRACT, CMD_TEST, CMD_ENABLE, CMD_ENABLE
+        with cmd.data.data:                            for CMD_SETUP 
+          gmrdev::readerDataType
+          or DeviceComponents::aeaData                                                                       
+      with cmd.data: DeviceComponents::nullData        for CMD_STATUS_QUERY, CMD_RESET, CMD_QUERY_DATA_TYPE, CMD_COMPS_QUERY
+*/
+
+  /** Data for component depending commands */
   struct multiCompCmdData
   {
     multidevices::compType  comp; /**< a component type */
-    any                     data; /**< command data */
+    any                     data; /**< command data     */
   };
 
-
   enum dataType 
   {
     DT_UNKNOWN,
@@ -70,11 +73,11 @@ module gmrdev
     DT_CODE16K,
     DT_TLCODE39,
     DT_MICROPDF,
-    DT_PDF417,           /* PDF417 2D barcode */
+    DT_PDF417,            /* PDF417 2D barcode */
     DT_MSI,
     DT_CODABLOCK,
     DT_PLESSEY,
-    DT_QR,               /* QR Code 2D barcode */
+    DT_QR,                /* QR Code 2D barcode */
     DT_IATA25,
     DT_STRT25,
     DT_CODE49,
@@ -97,21 +100,21 @@ module gmrdev
     DT_COMPOSITE,
     DT_OCR,
     DT_POSICODE,
-    DT_AZTEC,             /* Aztec 2D barcode */
+    DT_AZTEC,             /* Aztec 2D barcode  */
     DT_MESA,   
-    DT_BMP_IR,            /* Infrared image */
-    DT_BMP_VIS,           /* Visible image */
+    DT_BMP_IR,            /* Infrared image    */
+    DT_BMP_VIS,           /* Visible image     */
     DT_BMP_UV,            /* Ultraviolet image */
-    DT_BMP_PHOTO,         /* Photo image */
-    DT_BMP_COAX,          /* Coaxial image */
-    DT_JPG_IR,            /* Infrared image */
-    DT_JPG_VIS,           /* Visible image */
+    DT_BMP_PHOTO,         /* Photo image       */
+    DT_BMP_COAX,          /* Coaxial image     */
+    DT_JPG_IR,            /* Infrared image    */
+    DT_JPG_VIS,           /* Visible image     */
     DT_JPG_UV,            /* Ultraviolet image */
-    DT_JPG_PHOTO,         /* Photo image */
-    DT_JPG_COAX,          /* Coaxial image */
-    DT_CODELINE,          /* Codeline data */
-    DT_BARCODE,           /* Barcode data */
-    DT_JIS2,              /* JIS2 data */
+    DT_JPG_PHOTO,         /* Photo image       */
+    DT_JPG_COAX,          /* Coaxial image     */
+    DT_CODELINE,          /* Codeline data     */
+    DT_BARCODE,           /* Barcode data      */
+    DT_JIS2,              /* JIS2 data         */
     DT_ISO7816,           /* communication protocols for PICC/RFID/NFC devices */
     DT_MIFARE,            /* communication protocols for PICC/RFID/NFC devices */
     DT_EPASSPORT_DG1,     /* e-Passport format */
@@ -135,17 +138,15 @@ module gmrdev
     DT_EPASSPORT_DG19,    /* e-Passport format */
     DT_EPASSPORT_DG20,    /* e-Passport format */
     DT_VALIDATION_STATUS, /* support dataStatus SECURITY_FAILED, ALTERED, MISMATCH */
-    DT_FOID_ISO,           /* ISO track data with FOID Data truncation */
-    DT_PAYMENT_ISO,        /* ISO track data without truncation */
-    DT_DISCRETIONARY_ISO,  /* ISO track data with DISCRETIONARY Data truncation */
-    DT_FOID_JIS2,          /* JIS-2 track data with FOID Data truncation */
-    DT_PAYMENT_JIS2,       /* JIS-2 track data without truncation */
-    DT_DISCRETIONARY_JIS2  /* JIS-2 track data with DISCRETIONARY Data truncation */   
+    DT_FOID_ISO,          /* ISO track data with FOID Data truncation              */
+    DT_PAYMENT_ISO,       /* ISO track data without truncation                     */
+    DT_DISCRETIONARY_ISO, /* ISO track data with DISCRETIONARY Data truncation     */
+    DT_FOID_JIS2,         /* JIS-2 track data with FOID Data truncation            */
+    DT_PAYMENT_JIS2,      /* JIS-2 track data without truncation                   */
+    DT_DISCRETIONARY_JIS2 /* JIS-2 track data with DISCRETIONARY Data truncation   */   
   };
 
-  /**
-   *  The data status
-   */
+  /**  The data status */
   enum dataStatus
   {
     OK,
@@ -160,43 +161,33 @@ module gmrdev
   typedef sequence<dataType> dataTypeList;
   typedef sequence<octet> octetList;
 
-  /**
-   *  The device functionality
-   */
+  /** The device functionality  */
   struct devFunctionality
   {
-    compTypeList types; /**< a sequence of components */
+    compTypeList types;             /**< a sequence of components */
   };
 
-  /**
-   *  The components data types
-   */
+  /** The components data types */
   struct compDataType
   {
-    multidevices::compType type;       /**< A component type */
-    dataTypeList types;           /**< a sequence of data types */
+    multidevices::compType type;    /**< A component type         */
+    dataTypeList types;             /**< a sequence of data types */
   };
 
   typedef sequence<compDataType> compDataTypeList_;
 
-  /**
-   *  The data types of a list of components
-   */
+  /** The data types of a list of components */
   struct compDataTypeList
   {
-    compDataTypeList_ dataTypes; /**< a sequence of data types */
+    compDataTypeList_ dataTypes;    /**< a sequence of data types */
   };
   
-
-
-  /**
-   *  The data type definition for tracks.
-   */
+  /** The data type definition for tracks. */
   struct dataTrack
   {
-    dataStatus      ds;         /**< a data status */
-    dataType        dt;         /**< a data type */
-    octetList       data;       /**< a data stream */
+    dataStatus      ds;             /**< a data status */
+    dataType        dt;             /**< a data type   */
+    octetList       data;           /**< a data stream */
   };
 
   typedef sequence<dataTrack> dataTrackList;
@@ -206,58 +197,51 @@ module gmrdev
    */
   struct readerDataType
   {
-    multidevices::compType  type;       /**< A component type */
-    dataTrackList           tracks;     /**< A list of data scanner tracks */
+    multidevices::compType  type;   /**< A component type              */
+    dataTrackList           tracks; /**< A list of data scanner tracks */
   };
 
-
-
-  /**
-   *
-   * Definition of completion types returned by the device handler in the
+  /** Definition of completion types returned by the device handler in the
    * indication status. The completion type only describes the outcome of
-   * the last command and is not a device status.
-   *
-  **/
+   * the last command and is not a device status. **/
   enum completionType
   {
-    CMPL_COMPLETED,           /**< Command has been completed, no error */
-    CMPL_CANCELLED,           /**< Command has been cancelled */
-    CMPL_CANCEL_FAILED,       /**< Command could not be cancelled successfully */
-    CMPL_ILLOGICAL,           /**< Command is out of sequence */
-    CMPL_WRONG_FORMAT,        /**< Wrong format in command data */
-    CMPL_FAILED               /**< Execution of command has failed */
+    CMPL_COMPLETED,     /**< Command has been completed, no error        */
+    CMPL_CANCELLED,     /**< Command has been cancelled                  */
+    CMPL_CANCEL_FAILED, /**< Command could not be cancelled successfully */
+    CMPL_ILLOGICAL,     /**< Command is out of sequence                  */
+    CMPL_WRONG_FORMAT,  /**< Wrong format in command data                */
+    CMPL_FAILED         /**< Execution of command has failed             */
   };
 
   /** Definition of error types returned by the device handler in the indication status.
-   *  The error type represents the current device status.
-   */
+   *  The error type represents the current device status. */
   enum errorType
   {
-    ERR_NONE,             /**< No error */
-    ERR_BUSY,             /**< Device is busy */
+    ERR_NONE,             /**< No error               */
+    ERR_BUSY,             /**< Device is busy         */
     ERR_DISCONNECTED,     /**< Device is disconnected */
-    ERR_HARDWARE,         /**< Hardware error */
-    ERR_CONFIGURATION,    /**< Configuration error */
-    ERR_MEDIA_JAMMED      /**< Media jammed */
+    ERR_HARDWARE,         /**< Hardware error         */
+    ERR_CONFIGURATION,    /**< Configuration error    */
+    ERR_MEDIA_JAMMED      /**< Media jammed           */
   };
 
   /** Definition of media status types returned by the device handler in the indication status. */
   enum mediaStatusType
   {
-    MEDIA_ABSENT,         /**< Media present in device */
+    MEDIA_ABSENT,         /**< Media present in device     */
     MEDIA_PRESENT,        /**< Media not present in device */
-    MEDIA_UNKNOWN,        /**< Media unknown */
-    MEDIA_MISPLACED       /**< Media misplaced */
+    MEDIA_UNKNOWN,        /**< Media unknown               */
+    MEDIA_MISPLACED       /**< Media misplaced             */
   };
 
   /** Defines the current component status. */
   struct compStatus
   {
-    multidevices::compType  componentType;    /**< The component type */
-    completionType          completionCode;   /**< The completion code of the last command (component) */
-    errorType               errorStatus;      /**< The current error status of the component */
-    mediaStatusType         mediaStatus;      /**< The current media status of the component */
+    multidevices::compType  componentType;    /**< The component type                                   */
+    completionType          completionCode;   /**< The completion code of the last command (component)  */
+    errorType               errorStatus;      /**< The current error status of the component            */
+    mediaStatusType         mediaStatus;      /**< The current media status of the component            */
   };
 
   typedef sequence<compStatus> compStatusList;
@@ -269,48 +253,45 @@ module gmrdev
   };
 
   /** Definition of command types passed to this device handler. */
-
   enum commandType
   {
-    CMD_CANCEL,                 /**< Cancel last command (component) */
-    CMD_CONTEXT_SWITCH,         /**< Switch context (device) */
-    CMD_SETUP,                  /**< Setup a reader component */
-    CMD_RESET,                  /**< Reset device */
-    CMD_ENABLE,                 /**< Enable a reader component */
-    CMD_DISABLE,                /**< Disable a reader component */
-    CMD_STATUS_QUERY,           /**< Query a component status */
-    CMD_TEST,                   /**< Test device driver */
-    CMD_COMPS_QUERY,            /**< Query device types */
-    CMD_EJECT,                  /**< Eject media (dispenser) */
-    CMD_RETRACT,                /**< Retract media (capture) */
+    CMD_CANCEL,                 /**< Cancel last command (component)          */
+    CMD_CONTEXT_SWITCH,         /**< Switch context (device)                  */
+    CMD_SETUP,                  /**< Setup a reader component                 */
+    CMD_RESET,                  /**< Reset device                             */
+    CMD_ENABLE,                 /**< Enable a reader component                */
+    CMD_DISABLE,                /**< Disable a reader component               */
+    CMD_STATUS_QUERY,           /**< Query a component status                 */
+    CMD_TEST,                   /**< Test device driver                       */
+    CMD_COMPS_QUERY,            /**< Query device types                       */
+    CMD_EJECT,                  /**< Eject media (dispenser)                  */
+    CMD_RETRACT,                /**< Retract media (capture)                  */
     CMD_QUERY_DATA_TYPE,        /**< Query supported data type of a component */
-    CMD_SELECT_DATA_TYPE        /**< Set supported data types */
+    CMD_SELECT_DATA_TYPE        /**< Set supported data types                 */
   };
 
   /** Definition of indication types received from this device handler. */
-
   enum indicationType
   {
-    IND_CONTEXT_SWITCH_DONE,    /**< Context switch finished (component/device) */
-    IND_DATA,                   /**< Data is available (component) */
-    IND_RESET_DONE,             /**< Reset device finished (component/device) */
-    IND_ENABLE_DONE,            /**< Enable component finished*/
-    IND_DISABLE_DONE,           /**< Disable component finished */
-    IND_STATUS_INFO,            /**< Current component/device status */
-    IND_COMPS_INFO,             /**< Device functionality */
-    IND_SETUP_DONE,             /**< Setup component has finished */
-    IND_POWER_SWITCH_REQUEST,   /**< Request to switch Power off and on again (device) */
-    IND_EJECT_DONE,             /**< Eject media has finished */
-    IND_RETRACT_DONE,           /**< Retract media has finished */
-    IND_TEST_DONE,              /**< Test has finished */
-    IND_QUERY_DATA_TYPE_DONE,   /**< Return the supported data type */
-    IND_SELECT_DATA_TYPE_DONE   /**< data type selected */
+    IND_CONTEXT_SWITCH_DONE,    /**< Context switch finished (component/device)         */
+    IND_DATA,                   /**< Data is available (component)                      */
+    IND_RESET_DONE,             /**< Reset device finished (component/device)           */
+    IND_ENABLE_DONE,            /**< Enable component finished                          */
+    IND_DISABLE_DONE,           /**< Disable component finished                         */
+    IND_STATUS_INFO,            /**< Current component/device status                    */
+    IND_COMPS_INFO,             /**< Device functionality                               */
+    IND_SETUP_DONE,             /**< Setup component has finished                       */
+    IND_POWER_SWITCH_REQUEST,   /**< Request to switch Power off and on again (device)  */
+    IND_EJECT_DONE,             /**< Eject media has finished                           */
+    IND_RETRACT_DONE,           /**< Retract media has finished                         */
+    IND_TEST_DONE,              /**< Test has finished                                  */
+    IND_QUERY_DATA_TYPE_DONE,   /**< Return the supported data type                     */
+    IND_SELECT_DATA_TYPE_DONE   /**< data type selected                                 */
   };
 
   /** scanner dev interface inherits from the generic interface. */
   interface Handler : DeviceComponents::Generic
-  {
-  };
+  {};
 };
 
-#endif // GMRDEV
\ No newline at end of file
+#endif // GMRDEV
-- 
2.41.0.windows.1

