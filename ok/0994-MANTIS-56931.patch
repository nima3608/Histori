From b2f6adc12c62eeefb15252ad3a92221ef21988f8 Mon Sep 17 00:00:00 2001
From: jkreierh <jkreierh@90b65887-3827-0410-9a23-83215b262276>
Date: Tue, 28 Jan 2020 13:53:34 +0000
Subject: [PATCH 0994/1077] MANTIS 56931 Mantis 56931: Compiler Warnings

git-svn-id: svn://localhost/SelfServiceCommon/trunk@1531 90b65887-3827-0410-9a23-83215b262276
---
 .../Interfaces/inc/systools/mSysException.hpp | 11 +--
 .../cpp/Systools/src/mSysExceptionW32.cpp     | 68 ++++++++++---------
 .../Massai/cpp/Systools/src/tRex.cpp          |  9 ++-
 3 files changed, 50 insertions(+), 38 deletions(-)

diff --git a/SelfServiceCommon/Interfaces/inc/systools/mSysException.hpp b/SelfServiceCommon/Interfaces/inc/systools/mSysException.hpp
index 1ab08d6c..e73e5c72 100644
--- a/SelfServiceCommon/Interfaces/inc/systools/mSysException.hpp
+++ b/SelfServiceCommon/Interfaces/inc/systools/mSysException.hpp
@@ -7,7 +7,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2009-2012 MATERNA Information & Communications
+ * Copyright (c) 2009-2020 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -17,8 +17,9 @@
 #pragma message("including: " __FILE__)
 #endif
 
-// Common header
-#include "tools/pImplPtr.h"
+
+// Boost
+#include <boost/smart_ptr/shared_ptr.hpp>
 
 // Compiler lib
 #include <exception>
@@ -74,7 +75,7 @@ namespace mSysException
       class impl;
 
       //! Implementation object reference.
-      pImplPtr<impl> M_Impl;
+      boost::shared_ptr<impl> m_impl;
 
    public:
 
@@ -117,7 +118,7 @@ namespace mSysException
       class impl;
 
       //! Implementation object reference.
-      impl * M_Impl;
+      impl * m_impl;
 
       /**
        *
diff --git a/SelfServiceCommon/Massai/cpp/Systools/src/mSysExceptionW32.cpp b/SelfServiceCommon/Massai/cpp/Systools/src/mSysExceptionW32.cpp
index 319a9ed0..e1b14336 100644
--- a/SelfServiceCommon/Massai/cpp/Systools/src/mSysExceptionW32.cpp
+++ b/SelfServiceCommon/Massai/cpp/Systools/src/mSysExceptionW32.cpp
@@ -8,7 +8,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2010-2012 MATERNA Information & Communications
+ * Copyright (c) 2010-2020 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -530,8 +530,12 @@ int mSysException::filter_throw_std_exception
 
 
 
+
+
+
+
 mSysException::standardException::standardException() :
-   M_Impl( 0 )
+   m_impl( 0 )
 {
 }
 
@@ -924,79 +928,79 @@ namespace mSysException
       switch( ExPtrs->ExceptionRecord->ExceptionCode )
       {
       case STATUS_NO_MEMORY:
-         dst->M_Impl = new no_memory(ExPtrs);
+         dst->m_impl = new no_memory(ExPtrs);
          break;
       case STATUS_ACCESS_VIOLATION:
-         dst->M_Impl = new access_violation( ExPtrs);
+         dst->m_impl = new access_violation( ExPtrs);
          break;
       case STATUS_DATATYPE_MISALIGNMENT:
-         dst->M_Impl = new datatype_misalignment(ExPtrs);
+         dst->m_impl = new datatype_misalignment(ExPtrs);
          break;
       case STATUS_BREAKPOINT:
-         dst->M_Impl = new breakpoint(ExPtrs);
+         dst->m_impl = new breakpoint(ExPtrs);
          break;
       case STATUS_SINGLE_STEP:
-         dst->M_Impl = new single_step(ExPtrs);
+         dst->m_impl = new single_step(ExPtrs);
          break;
       case STATUS_ARRAY_BOUNDS_EXCEEDED:
-         dst->M_Impl = new array_bounds_exceeded(ExPtrs);
+         dst->m_impl = new array_bounds_exceeded(ExPtrs);
          break;
       case STATUS_FLOAT_DENORMAL_OPERAND:
-         dst->M_Impl = new flt_denormal_operand(ExPtrs);
+         dst->m_impl = new flt_denormal_operand(ExPtrs);
          break;
       case STATUS_FLOAT_DIVIDE_BY_ZERO:
-         dst->M_Impl = new flt_divide_by_zero(ExPtrs);
+         dst->m_impl = new flt_divide_by_zero(ExPtrs);
          break;
       case STATUS_FLOAT_INEXACT_RESULT:
-         dst->M_Impl = new flt_inexact_result(ExPtrs);
+         dst->m_impl = new flt_inexact_result(ExPtrs);
          break;
       case STATUS_FLOAT_INVALID_OPERATION:
-         dst->M_Impl = new flt_invalid_operation(ExPtrs);
+         dst->m_impl = new flt_invalid_operation(ExPtrs);
          break;
       case STATUS_FLOAT_OVERFLOW:
-         dst->M_Impl = new flt_overflow(ExPtrs);
+         dst->m_impl = new flt_overflow(ExPtrs);
          break;
       case STATUS_FLOAT_STACK_CHECK:
-         dst->M_Impl = new flt_stack_check(ExPtrs);
+         dst->m_impl = new flt_stack_check(ExPtrs);
          break;
       case STATUS_FLOAT_UNDERFLOW:
-         dst->M_Impl = new flt_underflow(ExPtrs);
+         dst->m_impl = new flt_underflow(ExPtrs);
          break;
       case STATUS_INTEGER_DIVIDE_BY_ZERO:
-         dst->M_Impl = new int_divide_by_zero(ExPtrs);
+         dst->m_impl = new int_divide_by_zero(ExPtrs);
          break;
       case STATUS_INTEGER_OVERFLOW:
-         dst->M_Impl = new int_overflow(ExPtrs);
+         dst->m_impl = new int_overflow(ExPtrs);
          break;
       case STATUS_PRIVILEGED_INSTRUCTION:
-         dst->M_Impl = new priv_instruction(ExPtrs);
+         dst->m_impl = new priv_instruction(ExPtrs);
          break;
       case STATUS_IN_PAGE_ERROR:
-         dst->M_Impl = new in_page_error(ExPtrs);
+         dst->m_impl = new in_page_error(ExPtrs);
          break;
       case STATUS_ILLEGAL_INSTRUCTION:
-         dst->M_Impl = new illegal_instruction(ExPtrs);
+         dst->m_impl = new illegal_instruction(ExPtrs);
          break;
       case STATUS_NONCONTINUABLE_EXCEPTION:
-         dst->M_Impl = new noncontinuable_exception(ExPtrs);
+         dst->m_impl = new noncontinuable_exception(ExPtrs);
          break;
       case STATUS_STACK_OVERFLOW:
-         dst->M_Impl = new stack_overflow(ExPtrs);
+         dst->m_impl = new stack_overflow(ExPtrs);
          break;
       case STATUS_INVALID_DISPOSITION:
-         dst->M_Impl = new invalid_disposition(ExPtrs);
+         dst->m_impl = new invalid_disposition(ExPtrs);
          break;
       case STATUS_GUARD_PAGE_VIOLATION:
-         dst->M_Impl = new guard_page(ExPtrs);
+         dst->m_impl = new guard_page(ExPtrs);
          break;
       case STATUS_INVALID_HANDLE:
-         dst->M_Impl = new invalid_handle(ExPtrs);
+         dst->m_impl = new invalid_handle(ExPtrs);
          break;
       case 0xE06D7363:
-         dst->M_Impl = new microsoft_cpp(ExPtrs);
+         dst->m_impl = new microsoft_cpp(ExPtrs);
          break;
       default:
-         dst->M_Impl = new exception::impl(ExPtrs);
+         dst->m_impl = new exception::impl(ExPtrs);
       }
       return EXCEPTION_EXECUTE_HANDLER;
    }
@@ -1005,21 +1009,21 @@ namespace mSysException
 
    char const * exception::what() const
    {
-      if( M_Impl )
-         return M_Impl->what();
+      if( m_impl )
+         return m_impl->what();
       return "mSysException failure!";
    }
 
 
 
    exception::exception() :
-      M_Impl( 0 )
+      m_impl( 0 )
    {
    }
 
 
    exception::exception( exception const & src ) :
-      M_Impl( src.M_Impl )
+      m_impl( src.m_impl )
    {
    }
 
@@ -1028,7 +1032,7 @@ namespace mSysException
    {
       try
       {
-         delete M_Impl;
+         delete m_impl;
       }
       catch( ... )
       {
diff --git a/SelfServiceCommon/Massai/cpp/Systools/src/tRex.cpp b/SelfServiceCommon/Massai/cpp/Systools/src/tRex.cpp
index fee62b6d..e2240d63 100644
--- a/SelfServiceCommon/Massai/cpp/Systools/src/tRex.cpp
+++ b/SelfServiceCommon/Massai/cpp/Systools/src/tRex.cpp
@@ -7,7 +7,7 @@
  *
  * @author Juergen Kreierhoff
  *
- * Copyright (c) 2008-2010 MATERNA Information & Communications
+ * Copyright (c) 2008-2020 MATERNA Information & Communications
  *
  **************************************************************************
 **/
@@ -18,6 +18,13 @@ using namespace std;
 
 #include <windows.h>
 
+
+
+// 'this' : used in base member initializer list
+#pragma warning(disable:4355)
+
+
+
 #define MAX_KEY_LENGTH 255
 #define MAX_VALUE_NAME 16383
 
-- 
2.41.0.windows.1

